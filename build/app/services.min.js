app.factory('asmNewServices', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var asmNewServicesFactory = {};

    var _creatAsm = function (data) {
        var deferred = $q.defer();

        apiHelper.post(constants.ASM.creatAsm, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _cancelAsm = function (asmId) {
        var deferred = $q.defer();

        var url = constants.ASM.cancelAsm;
        url = url.format(asmId);

        apiHelper.delete(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAreas = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.ASM.getAreas).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };


    var _getUnitByArea = function (areaId) {
        var deferred = $q.defer();

        var url = constants.ASM.getUnitByArea;
        url = url.format(areaId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getTagNoByUnit = function (unitId) {
        var deferred = $q.defer();

        var url = constants.ASM.getTagNoByUnit;
        url = url.format(unitId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAlarmClasses = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.ASM.getAlarmClasses).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAlarmTypes = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.ASM.getAlarmTypes).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAsmReviewers = function (keyWord, take) {
        var deferred = $q.defer();

        var url = constants.ASM.getAsmReviewers;
        url = url.format(keyWord, take);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAsmDetail = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.getAsmDetail;
        url = url.format(alarmId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }

    var _editAsm = function (alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.editAsm;
        url = url.format(alarmId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _asmUpdatesRequires = function (alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.requiresUpdateAsm;
        url = url.format(alarmId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }

    asmNewServicesFactory.getAreas = _getAreas;
    asmNewServicesFactory.getUnitByArea = _getUnitByArea;
    asmNewServicesFactory.getTagNoByUnit = _getTagNoByUnit;
    asmNewServicesFactory.getAlarmClasses = _getAlarmClasses;
    asmNewServicesFactory.getAlarmTypes = _getAlarmTypes;
    asmNewServicesFactory.getAsmReviewers = _getAsmReviewers;
    asmNewServicesFactory.creatAsm = _creatAsm;
    asmNewServicesFactory.cancelAsm = _cancelAsm;
    asmNewServicesFactory.getAsmDetail = _getAsmDetail;
    asmNewServicesFactory.editAsm = _editAsm;
    asmNewServicesFactory.asmUpdatesRequires = _asmUpdatesRequires;

    return asmNewServicesFactory;
}]);
app.factory('asmServices', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {
    var asmServicesFactory = {};
    var _asmShelving = function(alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.shelveASM;
        url = url.format(alarmId);


        apiHelper.put(url).then(function(response) {
                deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
            },
            function(error) {
                deferred.reject(error);
            });

        return deferred.promise;
    };
    
    var _getAlarmClosureReason = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.ASM.getAlarmClosureReason).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getASMLog = function (data) {
        var deferred = $q.defer();

        apiHelper.post(constants.ASM.getAsmLog, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _asmClose = function(alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.closeASM;
        url = url.format(alarmId);

        apiHelper.put(url, data).then(function(response) {
                deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
            },
            function(error) {
                deferred.reject(error);
            });

        return deferred.promise;
    };

    var _getMocApprovers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.ASM.getASMMOCApprovers;
        url = url.format([keyword]);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getAsmListing = function (filter) {
        var deferred = $q.defer();

        apiHelper.post(constants.ASM.listAsm, filter).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getTotalMyPedingAsm = function() {
        var deferred = $q.defer();

        apiHelper.get(constants.ASM.totalMyPendingAsm).then(function(response) {
                deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
            },
            function(error) {
                deferred.reject(error);
            });

        return deferred.promise;
    };

    var _reviewAsm = function (alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.reviewAsm;
        url = url.format(alarmId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _cancelShelving = function(alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.cancelAsm;
        url = url.format(alarmId);

        apiHelper.put(url).then(function(response) {
                deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
            },
            function(error) {
                deferred.reject(error);
            });

        return deferred.promise;
    };

    var _createMOC = function (alarmId) {
        var deferred = $q.defer();
        var url = constants.ASM.createNewMOC;
        url = url.format(alarmId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getApplicantsForTransferInSameAreas = function (alarmId, keyword) {
        var deferred = $q.defer();
        var url = constants.ASM.getApplicantsForTransfer.format(alarmId, keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getPreData = function (controlName, parentId, keyword) {
        var deferred = $q.defer();

        var url = constants.ASM.getPreData;
        url = url.format(controlName, parentId === null || parentId === undefined ? '' : parentId, keyword === null || keyword === undefined ? '' : keyword);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _transferAsm = function (asmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.transferAsm;
        url = url.format(asmId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getPendingPeopleForTransferingRoles = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.getPendingPeopleForTransferingRoles;
        url = url.format(alarmId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _transferRoles = function (alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.asmTransferRoles;
        url = url.format(alarmId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    asmServicesFactory.asmShelving = _asmShelving;
    asmServicesFactory.asmClose = _asmClose;
    asmServicesFactory.getAsmLog = _getASMLog;
    asmServicesFactory.getMocApprovers = _getMocApprovers;
    asmServicesFactory.getAsmListing = _getAsmListing;
    asmServicesFactory.getTotalMyPedingAsm = _getTotalMyPedingAsm;
    asmServicesFactory.reviewAsm = _reviewAsm;
    asmServicesFactory.cancelShelving = _cancelShelving;
    asmServicesFactory.createMOC = _createMOC;
    asmServicesFactory.getApplicantsForTransferInSameAreas = _getApplicantsForTransferInSameAreas;
    asmServicesFactory.transferAsm = _transferAsm;
    asmServicesFactory.getPendingPeopleForTransferingRoles = _getPendingPeopleForTransferingRoles;
    asmServicesFactory.getPreData = _getPreData;
    asmServicesFactory.transferRoles = _transferRoles;
    asmServicesFactory.getAlarmClosureReason = _getAlarmClosureReason

    return asmServicesFactory;

}])
app.factory('asmWorkflowServices', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {
    var asmWorkflowServicesFactory = {};
    // Get Detailed Information of Alarm records
    var _getAsmDetail = function (alarmId) {
        var deferred = $q.defer();
        var url = constants.ASM.getAsmDetail;
        url = url.format(alarmId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode,message:response.data.message });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _reviewAsm = function (alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.reviewAsm;
        url = url.format(alarmId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };


    var _endorseAsm = function (alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.endorseAsm;
        url = url.format(alarmId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _approveAsm = function (alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.approveAsm;
        url = url.format(alarmId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _transferRoles = function (asmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.asmTransferRoles;
        url = url.format(asmId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _transferAsm = function (asmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.transferAsm;
        url = url.format(asmId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getApplicantsForTransfer = function (keyword) {
        var deferred = $q.defer();
        var url = constants.ASM.getApplicants.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };
    var _getApplicantsForTransferInSameAreas = function (alarmId, keyword) {
        var deferred = $q.defer();
        var url = constants.ASM.getApplicantsForTransfer.format(alarmId, keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _cancelAsm = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.cancelAsm;
        url = url.format(alarmId);

        apiHelper.put(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getReviewers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.ASM.getReviewers.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };
    var _getEndorsers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.ASM.getEndorsers.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };
    var _getApprovers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.ASM.getApprovers.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getAsmCopy = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.getAsmCopy;
        url = url.format(alarmId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }

    var _getUnitByAreaId = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.getUnitByArea;
        url = url.format(alarmId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getTagNoByUnitId = function (unitId) {
        var deferred = $q.defer();

        var url = constants.ASM.getTagNoByUnit;
        url = url.format(unitId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _submitMOC = function (alarmId, data) {
        var deferred = $q.defer();
        var url = constants.ASM.submitMOC;
        url = url.format(alarmId);
        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getMocApprovers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.ASM.getASMMOCApprovers;
        url = url.format([keyword]);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _cancelMOC = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.cancelMOC;
        url = url.format(alarmId);

        apiHelper.put(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _requireUpdateMOC = function (alarmId, data) {
        var deferred = $q.defer();
        var url = constants.ASM.requireUpdateMOC;
        url = url.format(alarmId);
        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _approveMoc = function (alarmId, data) {
        var deferred = $q.defer();

        var url = constants.ASM.approveMoc;
        url = url.format(alarmId);

        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAsmApprovalExtension = function (data) {
        var deferred = $q.defer();

        var url = constants.ASM.getAsmApprovalExtension;

        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAsmReShelvingSchedule = function (data) {
        var deferred = $q.defer();

        var url = constants.ASM.getAsmReShelvingSchedule;

        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _reApproveAsm = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.reApproveAsm;
        url = url.format(alarmId);

        apiHelper.put(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }

    var _reShelveAsm = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.reShelveAsm;
        url = url.format(alarmId);

        apiHelper.put(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }


    var _getAsmPrintingDetail = function (alarmId) {
        var deferred = $q.defer();

        var url = constants.ASM.getAsmPrintingDetail;
        url = url.format(alarmId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    asmWorkflowServicesFactory.getAsmDetail = _getAsmDetail;
    asmWorkflowServicesFactory.reviewAsm = _reviewAsm;
    asmWorkflowServicesFactory.endorseAsm = _endorseAsm;
    asmWorkflowServicesFactory.approveAsm = _approveAsm;
    asmWorkflowServicesFactory.transferRoles = _transferRoles;
    asmWorkflowServicesFactory.transferAsm = _transferAsm;
    asmWorkflowServicesFactory.getApplicantsForTransfer = _getApplicantsForTransfer;
    asmWorkflowServicesFactory.getApplicantsForTransferInSameAreas = _getApplicantsForTransferInSameAreas;
    asmWorkflowServicesFactory.cancelAsm = _cancelAsm;
    asmWorkflowServicesFactory.getReviewers = _getReviewers;
    asmWorkflowServicesFactory.getEndorsers = _getEndorsers;
    asmWorkflowServicesFactory.getApprovers = _getApprovers;
    asmWorkflowServicesFactory.getAsmCopy = _getAsmCopy;
    asmWorkflowServicesFactory.getUnitByAreaId = _getUnitByAreaId;
    asmWorkflowServicesFactory.getTagNoByUnitId = _getTagNoByUnitId;
    asmWorkflowServicesFactory.submitMOC = _submitMOC;
    asmWorkflowServicesFactory.getMocApprovers = _getMocApprovers;
    asmWorkflowServicesFactory.cancelMOC = _cancelMOC;
    asmWorkflowServicesFactory.requireUpdateMOC = _requireUpdateMOC;
    asmWorkflowServicesFactory.approveMoc = _approveMoc;
    asmWorkflowServicesFactory.getAsmApprovalExtension = _getAsmApprovalExtension;
    asmWorkflowServicesFactory.getAsmReShelvingSchedule = _getAsmReShelvingSchedule;
    asmWorkflowServicesFactory.reApproveAsm = _reApproveAsm;
    asmWorkflowServicesFactory.reShelveAsm = _reShelveAsm;
    asmWorkflowServicesFactory.getAsmPrintingDetail = _getAsmPrintingDetail;

    return asmWorkflowServicesFactory;
}]);
app.factory('asmDashBoardService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {
    var asmDashBoardServicesFactory = {};

    var _getAsmDashBoard = function (data) {
        var deferred = $q.defer();
        apiHelper.post(constants.ASMDashBoard.getASMDashBoard, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getActiveAreas = function () {
        var deferred = $q.defer();
        apiHelper.get(constants.ASMDashBoard.getActiveAreas).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };


    var _getSubscribedAreas = function () {
        var deferred = $q.defer();
        apiHelper.get(constants.ASMDashBoard.getSubscribedAreas).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getAsmPendingInDashboard = function (data) {
        var deferred = $q.defer();
        apiHelper.post(constants.ASMDashBoard.getAsmPendingInDashboard, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };


    var _getEEMUAData = function (year) {
        var deferred = $q.defer();
        var url = constants.ASMDashBoard.getEEMUAData;
        url = url.format(year);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };
    var _saveEEMUAData = function (data, year) {
        var deferred = $q.defer();
        var url = constants.ASMDashBoard.saveEEMUAData;
        url = url.format(year);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };


    asmDashBoardServicesFactory.getAsmDashBoard = _getAsmDashBoard;
    asmDashBoardServicesFactory.getActiveAreas = _getActiveAreas;
    asmDashBoardServicesFactory.getAsmPendingInDashboard = _getAsmPendingInDashboard;
    asmDashBoardServicesFactory.getSubscribedAreas = _getSubscribedAreas;
    asmDashBoardServicesFactory.getEEMUAData = _getEEMUAData;
    asmDashBoardServicesFactory.saveEEMUAData = _saveEEMUAData;
    return asmDashBoardServicesFactory;
}]);
app.factory('diDashBoardService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {


    var _getSampleData = function() {
        //var deferred = $q.defer();
        //var url = constants.ASMDashBoard.getEEMUAData;
        //url = url.format(year);
        //apiHelper.get(url).then(function (response) {
        //    deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        //}, function (error) {
        //    deferred.reject(error);
        //});
        //return deferred.promise;

        return "OK";
    }

    return {
        getSampleData: _getSampleData
    };
}]);
app.factory('sceDashBoardService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var sceDashBoardServicesFactory = {};

    var _getSCEDashBoard = function (data) {
        var deferred = $q.defer();
        apiHelper.post(constants.SCEDashBoard.getSCEDashBoard, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getActiveAreas = function () {
        var deferred = $q.defer();
        apiHelper.get(constants.SCEDashBoard.getActiveAreas).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getSubscribedAreas = function () {
        var deferred = $q.defer();
        apiHelper.get(constants.SCEDashBoard.getSubscribedAreas).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getScePendingInDashboard = function (data) {
        var deferred = $q.defer();
        apiHelper.post(constants.SCE.getScePendingInDashboard, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRaPendingInDashboard = function (data) {
        var deferred = $q.defer();
        apiHelper.post(constants.SCE.getRaPendingInDashBoard, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getSCELiveStatistic = function (data) {
        var deferred = $q.defer();
        var url = constants.SCEDashBoard.getSceLiveStatistic;
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    sceDashBoardServicesFactory.getSCEDashBoard = _getSCEDashBoard;
    sceDashBoardServicesFactory.getActiveAreas = _getActiveAreas;
    sceDashBoardServicesFactory.getScePendingInDashboard = _getScePendingInDashboard;
    sceDashBoardServicesFactory.getRaPendingInDashboard = _getRaPendingInDashboard;
    sceDashBoardServicesFactory.getSubscribedAreas = _getSubscribedAreas;
    sceDashBoardServicesFactory.getSCELiveStatistic = _getSCELiveStatistic;
    return sceDashBoardServicesFactory;
}]);
app.factory('fileService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var fileServicesFactory = {};

    var _checkExistFile = function (fileId) {

        var deferred = $q.defer();

        var url = constants.viewFile.checkExistFileSce.format(fileId);

        apiHelper.post(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    fileServicesFactory.checkExistFile = _checkExistFile;

    return fileServicesFactory;
}]);
app.factory('messageService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var messageServiceFactory = {};

    var _getListMessageDashBoard = function (data) {

        var deferred = $q.defer();

        var url = constants.message.getListMessageDashBoard;
        url = url.format(data.moduleName, data.areaId, data.messageId, data.scroll);

        apiHelper.get(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _sendMessage = function (data) {

        var deferred = $q.defer();

        apiHelper.post(constants.message.create, data).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getListOfArea = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.message.getListOfArea).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getListMessageAdmin = function (data) {

        var deferred = $q.defer();

        var url = constants.message.getListMessageAdmin;
        url = url.format(data.moduleId, data.areaId, data.messageId, data.keyWord, data.scroll);

        apiHelper.get(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _deleteMessages = function (arrayMessageId) {
        var deferred = $q.defer();

        apiHelper.delete(constants.message.deleteMessages, arrayMessageId).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    messageServiceFactory.deleteMessages = _deleteMessages;
    messageServiceFactory.getListOfArea = _getListOfArea;
    messageServiceFactory.sendMessage = _sendMessage;
    messageServiceFactory.getListMessageAdmin = _getListMessageAdmin;
    messageServiceFactory.getListMessageDashBoard = _getListMessageDashBoard;

    return messageServiceFactory;
}]);
app.factory('notificationService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var notificationServiceFactory = {};

    var _getTopNotification = function () {
        var deferred = $q.defer();
        apiHelper.post(constants.notification.getTopNotification).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getListNotification = function (data) {
        var deferred = $q.defer();
        apiHelper.post(constants.notification.getListNotification, data).then(function (response) {
            // Need repair response.data.result for group
            var today = new Date();
            today.setHours(0, 0, 0, 0);
            var yesterday = new Date(today);
            yesterday.setDate(yesterday.getDate() - 1);

            if (response.data.result != undefined && response.data.result != null) {
                $.each(response.data.result, function (index, value) {
                    var createdDateTime = new Date(value.createdDateTime);
                    if (createdDateTime >= today) {
                        response.data.result[index]['groupField'] = "1_Today";
                    } else if (createdDateTime >= yesterday) {
                        response.data.result[index]['groupField'] = "2_Yesterday";
                    } else {
                        response.data.result[index]['groupField'] = "3_Date (earlier)";
                    }
                });
            }
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _countUnreadNotification = function () {
        var deferred = $q.defer();
        apiHelper.get(constants.notification.getCountUnreadNotification).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    }

    var _countNotification = function () {
        var deferred = $q.defer();
        apiHelper.get(constants.notification.getCountNotification).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    }

    // Start action
    var _markAsAllReadNotification = function () {
        var deferred = $q.defer();
        apiHelper.post(constants.notification.markAsAllReadNotification).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _markAsReadNotification = function (notificationId) {
        var deferred = $q.defer();
        apiHelper.post(constants.notification.markAsReadNotification, { "notificationId": notificationId }).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result, message: dataOutput.data.message });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };
    // End action

    notificationServiceFactory.getTopNotification = _getTopNotification;
    notificationServiceFactory.getListNotification = _getListNotification;
    notificationServiceFactory.countUnreadNotification = _countUnreadNotification;
    notificationServiceFactory.countNotification = _countNotification;
    notificationServiceFactory.markAsAllReadNotification = _markAsAllReadNotification;
    notificationServiceFactory.markAsReadNotification = _markAsReadNotification;
    return notificationServiceFactory;
}]);
app.factory('rotfServices', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {
    var services = {};

    var _getNPAT = function () {
        var deferred = $q.defer();

        var url = constants.ROTF.getNPAT;

        apiHelper.get(url).then(function (response) {
                deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
            },
            function (error) {
                deferred.reject(error);
            });

        return deferred.promise;
    };

    var _getOEE = function () {
        var deferred = $q.defer();

        var url = constants.ROTF.getOEE;
        
        apiHelper.get(url).then(function (response) {
                deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
            },
            function (error) {
                deferred.reject(error);
            });

        return deferred.promise;
    };

    services.getOEE = _getOEE;
    services.getNPAT = _getNPAT;

    return services;
}]);
app.factory('sceServices', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var sceServicesFactory = {};

    var _addNewSce = function (data) {
        var deferred = $q.defer();

        apiHelper.post(constants.SCE.insertSce, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _transferSce = function (sceId, data) {
        var deferred = $q.defer();

        var url = constants.SCE.transferSce;
        url = url.format(sceId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _transferRoles = function (sceId, data) {
        var deferred = $q.defer();

        var url = constants.SCE.sceTransferRoles;
        url = url.format(sceId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getApplicantsForTransfer = function (keyword) {
        var deferred = $q.defer();
        var url = constants.RA.getApplicants.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };
    var _getApplicantsForTransferInSameAreas = function (sceId, keyword) {
        var deferred = $q.defer();
        var url = constants.SCE.getApplicantsForTransfer.format(sceId, keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };
    var _getPreData = function (controlName, parentId, keyword) {
        var deferred = $q.defer();

        var url = constants.SCE.getPreData;
        url = url.format(controlName, parentId === null || parentId === undefined ? '' : parentId, keyword === null || keyword === undefined ? '' : keyword);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getSceListing = function (filter) {
        var deferred = $q.defer();

        apiHelper.post(constants.SCE.getSceListing, filter).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getSceDetail = function (sceId) {
        var deferred = $q.defer();

        var url = constants.SCE.getSceDetail;
        url = url.format(sceId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _cancelSce = function (sceId) {
        var deferred = $q.defer();

        var url = constants.SCE.cancelSce;
        url = url.format(sceId);

        apiHelper.delete(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _reviewSce = function (sceId, data) {
        var deferred = $q.defer();

        var url = constants.SCE.reviewSce;
        url = url.format(sceId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _endorseSce = function (sceId, data) {
        var deferred = $q.defer();

        var url = constants.SCE.endorseSce;
        url = url.format(sceId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _approveSce = function (sceId, data) {
        var deferred = $q.defer();

        var url = constants.SCE.approveSce;
        url = url.format(sceId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getPTWListing = function (sceId) {
        var deferred = $q.defer();
        var url = constants.SCE.GetPTWListing;
        url = url.format(sceId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _deletePTW = function (sceId, ptwData) {
        var deferred = $q.defer();
        var url = constants.SCE.DeletePTW;
        url = url.format(sceId);
        apiHelper.delete(url, ptwData).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _updatePTW = function (sceId, ptwData) {
        var deferred = $q.defer();
        var url = constants.SCE.UpdatePTW;
        url = url.format(sceId);
        apiHelper.put(url, ptwData).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _addNewPTW = function (sceId, ptwData) {
        var deferred = $q.defer();
        var url = constants.SCE.AddNewPTW;
        url = url.format(sceId);
        apiHelper.post(url, ptwData).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _acknowledgeSce = function (sceId, isReAcknowledge) {
        var deferred = $q.defer();

        var url = constants.SCE.acknowledgeSce;
        url = url.format(sceId);

        apiHelper.put(url, isReAcknowledge).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getTotalMySceListing = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.SCE.getTotalMySceListing).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _editSce = function (sceId, data) {
        var deferred = $q.defer();

        var url = constants.SCE.editSce;
        url = url.format(sceId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _normalizeSce = function (sceId, data) {
        var deferred = $q.defer();

        var url = constants.SCE.normalizeSce;
        url = url.format(sceId);

        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        },
            function (error) {
                deferred.reject(error);
            });

        return deferred.promise;
    };

    var _getSceExtApproval = function (data) {
        var deferred = $q.defer();

        var url = constants.SCE.getSceExtApproval;

        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAcknowledgeSchedule = function (data) {
        var deferred = $q.defer();

        var url = constants.SCE.getSceAcknowledgeSchedule;

        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAllUnit = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.SCE.getAllUnit).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAllTag = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.SCE.getAllTag).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getUnitByArea = function (areaId, isActive) {
        var deferred = $q.defer();

        var url = "";
        if (isActive === null || isActive === undefined) {
            url = constants.SCE.getUnitByAreaId;
            url = url.format(areaId);
        }
        else {
            url = constants.SCE.getUnitByAreaIdAndStatus;
            url = url.format(areaId, isActive);
        }

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getTagNoByUnit = function (unitId, isActive) {
        var deferred = $q.defer();

        var url = "";
        if (isActive === null || isActive === undefined) {
            url = constants.SCE.getTagNoByUnitId;
            url = url.format(unitId);
        }
        else {
            url = constants.SCE.getTagNoByUnitIdAndStatus;
            url = url.format(unitId, isActive);
        }

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };
    var _getSilIdByTagId = function (tagId) {
        var deferred = $q.defer();
        url = constants.SCE.getSilIdByTagId;
        url = url.format(tagId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getScePrintingDetail = function (sceId) {
        var deferred = $q.defer();

        var url = constants.SCE.getScePrintingDetail;
        url = url.format(sceId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getPendingPeopleForTransferingRoles = function (sceId) {
        var deferred = $q.defer();

        var url = constants.SCE.getPendingPeopleForTransferingRoles;
        url = url.format(sceId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getSCELog = function (data) {
        var deferred = $q.defer();

        apiHelper.post(constants.SCE.getSCELog, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getSceCopied = function (id) {
        var deferred = $q.defer();

        var url = constants.SCE.getSceCopy;
        url = url.format(id);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }

    var _buildUploadUrl = function (sceId, group) {
        var url = constants.SCE.uploadFiles;
        return apiHelper.includeToken(url.format(sceId, group));
    }

    var _getUploadedFiles = function (sceId) {
        var deferred = $q.defer();

        var url = constants.SCE.getUploadedFiles;
        url = url.format(sceId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }

    var _viewFile = function (sceId, fileId) {
        var url = constants.SCE.viewFile;
        url = url.format(sceId, fileId);
        return apiHelper.includeToken(url.format(sceId, fileId));
    }

    var _exportFile = function () {
        var deferred = $q.defer();

        var url = constants.SCE.exportFile;

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }

    var _approverTransfer = function (sceId, data) {
        var deferred = $q.defer();
        var url = constant.SCE.approverTransfer;
        url = url.format(sceId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    }

    sceServicesFactory.addNewSCE = _addNewSce;
    sceServicesFactory.transferSce = _transferSce;
    sceServicesFactory.getPreData = _getPreData;
    sceServicesFactory.getApplicantsForTransfer = _getApplicantsForTransfer;
    sceServicesFactory.getSceListing = _getSceListing;
    sceServicesFactory.getSceDetail = _getSceDetail;
    sceServicesFactory.cancelSce = _cancelSce;
    sceServicesFactory.reviewSce = _reviewSce;
    sceServicesFactory.GetPTWListing = _getPTWListing;
    sceServicesFactory.endorseSce = _endorseSce;
    sceServicesFactory.approveSce = _approveSce;
    sceServicesFactory.AddNewPTW = _addNewPTW;
    sceServicesFactory.UpdatePTW = _updatePTW;
    sceServicesFactory.DeletePTW = _deletePTW;
    sceServicesFactory.acknowledgeSce = _acknowledgeSce;
    sceServicesFactory.getTotalMySceListing = _getTotalMySceListing;
    sceServicesFactory.editSce = _editSce;
    sceServicesFactory.normalizeSce = _normalizeSce;
    sceServicesFactory.getSceExtApproval = _getSceExtApproval;
    sceServicesFactory.getAcknowledgeSchedule = _getAcknowledgeSchedule;
    sceServicesFactory.getAllUnit = _getAllUnit;
    sceServicesFactory.getAllTag = _getAllTag;
    sceServicesFactory.getUnitByArea = _getUnitByArea;
    sceServicesFactory.getTagNoByUnit = _getTagNoByUnit;
    sceServicesFactory.getSilIdByTagId = _getSilIdByTagId;
    sceServicesFactory.getScePrintingDetail = _getScePrintingDetail;
    sceServicesFactory.transferRoles = _transferRoles;
    sceServicesFactory.getPendingPeopleForTransferingRoles = _getPendingPeopleForTransferingRoles;
    sceServicesFactory.getApplicantsForTransferInSameAreas = _getApplicantsForTransferInSameAreas;
    sceServicesFactory.getSceLog = _getSCELog;
    sceServicesFactory.getSceCopied = _getSceCopied;
    sceServicesFactory.buildUploadUrl = _buildUploadUrl;
    sceServicesFactory.getUploadedFiles = _getUploadedFiles;
    sceServicesFactory.viewFile = _viewFile;
    sceServicesFactory.exportFile = _exportFile;
    sceServicesFactory.approverTransfer = _approverTransfer;

    return sceServicesFactory;
}]);
app.factory('accessModule', ['$window', '$rootScope', '$state', 'constants', function ($window, $rootScope, $state, constants) {

    var accessModuleFactory = {};

    var _checkAccess = function (e, stateName) {
        if (stateName !== constants.state.accessdenied) {

            $rootScope.$broadcast('activeMenu', stateName);

            var isAccess = true;
            switch (stateName) {
                case constants.state.scenew: {
                    isAccess = _checkAccessModule(constants.module.sce, constants.allowAccess.allowWrite);
                    if (!isAccess) {
                        e.preventDefault();
                        $state.go(constants.state.accessdenied);
                    }
                    break;
                }
                case constants.state.sceedit:
                case constants.state.sceupdaterequire:
                case constants.state.scereview:
                case constants.state.sceendorse:
                case constants.state.sceapprove:
                case constants.state.sceacknowledge:
                case constants.state.scelive:
                case constants.state.scenormalized:
                case constants.state.scedetail:
                case constants.state.scelist:
                case constants.state.reviewupdaterequire:
                case constants.state.sceDashBoard:
                    {
                        isAccess = _checkAccessModule(constants.module.sce, constants.allowAccess.allowRead);
                        if (!isAccess) {
                            e.preventDefault();
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                    }
                case constants.state.newUser:
                case constants.state.manageUser:
                    {
                        isAccess = $rootScope.$app !== null && $rootScope.$app !== undefined && $rootScope.$app.userProfile.isAdmin === true;
                        if (!isAccess) {
                            e.preventDefault();
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                    }
                case constants.state.adminMessage:
                    {
                        isAccess = $rootScope.$app !== null && $rootScope.$app !== undefined && $rootScope.$app.userProfile.isAdmin === true;
                        if (!isAccess) {
                            e.preventDefault();
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                    }
                case constants.state.raNew:
                    {
                        isAccess = _checkAccessModule(constants.module.sce, constants.allowAccess.allowWrite);
                        if (!isAccess) {
                            e.preventDefault();
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                    }
                case constants.state.raEdit:
                case constants.state.raUpdateRequired:
                case constants.state.raReview:
                case constants.state.raEndorse:
                case constants.state.raApprove:
                case constants.state.raInfo:
                case constants.state.raDetail:
                case constants.state.raList:
                case constants.state.raMOC:
                    {
                        isAccess = _checkAccessModule(constants.module.sce, constants.allowAccess.allowRead);
                        if (!isAccess) {
                            e.preventDefault();
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                    }
                case constants.state.asmDashBoard:
                    {
                        isAccess = _checkAccessModule(constants.module.asm, constants.allowAccess.allowRead);
                        if (!isAccess) {
                            e.preventDefault();
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                    }
                case constants.state.diDashBoard:
                    {
                        isAccess = _checkAccessModule(constants.module.di, constants.allowAccess.allowRead);
                        if (!isAccess) {
                            e.preventDefault();
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                    }
            }
        }
    };

    var _checkAccessModule = function (module, allowAccess) {
        if ($rootScope.$app === null || $rootScope.$app === undefined || $rootScope.$app.userProfile === null || $rootScope.$app.userProfile === undefined || $rootScope.$app.userProfile.moduleAccess === null || $rootScope.$app.userProfile.moduleAccess === undefined) {
            return false;
        }

        var accessModule = $rootScope.$app.userProfile.moduleAccess;

        var getAccessModuleItem = {};

        switch (allowAccess) {
            case constants.allowAccess.allowRead:
                {
                    getAccessModuleItem = _.filter(accessModule, function (item) {
                        return item.module === module && item.allowRead === true;
                    });

                    if (getAccessModuleItem.length === 0) {
                        return false;
                    }
                    break;
                }
            case constants.allowAccess.allowWrite:
                {
                    if (module === constants.module.sce && $rootScope.$app !== null && $rootScope.$app !== undefined && $rootScope.$app.userProfile !== null && $rootScope.$app.userProfile !== undefined && !$rootScope.$app.userProfile.isAdmin && ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",1,") < 0) {
                        return false;
                    }

                    getAccessModuleItem = _.filter(accessModule, function (item) {
                        return item.module === module && item.allowWrite === true;
                    });

                    if (getAccessModuleItem.length === 0) {
                        return false;
                    }
                    break;
                }
            case constants.allowAccess.allowDelete:
                {
                    getAccessModuleItem = _.filter(accessModule, function (item) {
                        return item.module === module && item.allowDelete === true;
                    });

                    if (getAccessModuleItem.length === 0) {
                        return false;
                    }
                    break;
                }
        }

        return true;
    };

    accessModuleFactory.checkAccess = _checkAccess;
    accessModuleFactory.checkAccessModule = _checkAccessModule;

    return accessModuleFactory;
}]);
app.factory('authService', ['apiHelper', '$window', '$location', '$q', 'appSettings', 'constants', 'utilsService', function (apiHelper, $window, $location, $q, appSettings, constants, utilsService) {

    var authServiceFactory = {};

    var loginData = {
        "id": constants.singleSignOn.id,
        "userId": "",
        "password": "",
        "domain": "",
        "applicationId": constants.singleSignOn.applicationId,
        "client": {
            "ip": "",
            "hostname": $location.host(),
            "userAgent": navigator.userAgent
        }
    };

    var _login = function (data) {

        var deferred = $q.defer();
        loginData.userId = data.userId;
        loginData.password = data.password;
        loginData.domain = data.domain;

        if (constants.singleSignOn.disabled === true) {

            $window.localStorage.setItem(constants.localStorage.accessToken, loginData.userId);
            loginInApp(loginData.userId).then(function (dataoutput) {

                var userProfile = dataoutput.data.result.userProfile;
                userProfile.moduleAccess = dataoutput.data.result.moduleAccess;

                deferred.resolve({ status: true, secret: dataoutput.data.result.secret, userProfile: userProfile });
            }, function (error) {
                deferred.reject(error);
            });
        }
        else {

            var callLogin = function () {
                apiHelper.post(constants.singleSignOn.login, loginData).then(function (response) {

                    if (response !== null && response.data !== null && response.data.accessToken !== "00000000-0000-0000-0000-000000000000") {
                        $window.localStorage.setItem(constants.localStorage.accessToken, response.data.accessToken);
                        loginInApp(response.data.accessToken).then(function (dataoutput) {
                            var userProfile = dataoutput.data.result.userProfile;
                            userProfile.moduleAccess = dataoutput.data.result.moduleAccess;
                            deferred.resolve({ status: true, secret: dataoutput.data.result.secret, userProfile: userProfile });
                        }, function (error) {
                            deferred.reject(error);
                        });
                    }
                    else {
                        deferred.reject({ status: false, message: constants.messages.invalidEnterprise });
                    }
                }, function (error) {
                    deferred.reject(error);
                });
            };

            utilsService.getIp().then(function (response) {
                loginData.client.ip = response.data;
                callLogin();
            }, function () {
                loginData.client.ip = "";
                callLogin();
            });
        }

        return deferred.promise;
    };

    var loginInApp = function (accessToken) {
        var deferred = $q.defer();

        apiHelper.post(constants.loginApp.login, { tokenSingleSignOn: accessToken, client: appSettings.client }).then(function (response) {
            deferred.resolve(response);
        },
        function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _signOn = function (accessToken) {
        var deferred = $q.defer();

        if (constants.singleSignOn.disabled === true) {
            loginInApp(accessToken).then(function (dataoutput) {
                if (dataoutput !== null && dataoutput !== undefined && dataoutput.data.statusCode === 201) {

                    var userProfile = dataoutput.data.result.userProfile;
                    userProfile.moduleAccess = dataoutput.data.result.moduleAccess;

                    $window.localStorage.setItem(constants.localStorage.userSecret, dataoutput.data.result.secret);
                    $window.localStorage.setItem(constants.localStorage.userProfile, JSON.stringify(userProfile));
                    deferred.resolve({ status: true, secret: dataoutput.data.result.secret });
                }
                else {
                    $window.localStorage.removeItem(constants.localStorage.userProfile);
                    $window.localStorage.removeItem(constants.localStorage.userSecret);
                    deferred.resolve({ status: false });
                }
            }, function (error) {
                deferred.reject(error);
            });
        }
        else {
            apiHelper.get(constants.singleSignOn.signOn, null, { 'Access-Token': accessToken }).then(function (response) {
                var username = response === null || response === undefined || response.data === null || response.data === undefined ? null : response.data.username;
                if (username !== null && username !== "") {
                    loginInApp(accessToken).then(function (dataoutput) {
                        var userProfile = dataoutput.data.result.userProfile;
                        userProfile.moduleAccess = dataoutput.data.result.moduleAccess;

                        $window.localStorage.setItem(constants.localStorage.userSecret, dataoutput.data.result.secret);
                        $window.localStorage.setItem(constants.localStorage.userProfile, JSON.stringify(userProfile));
                        deferred.resolve({ status: true, secret: dataoutput.data.result.secret });
                    }, function (error) {
                        $window.localStorage.removeItem(constants.localStorage.userProfile);
                        $window.localStorage.removeItem(constants.localStorage.userSecret);
                        deferred.reject(error);
                    });
                }
                else {
                    deferred.resolve({ status: false });
                }
            },
            function (error) {
                deferred.reject(error);
            });
        }

        return deferred.promise;
    };

    var _logoutSingleSignOn = function (accessToken) {
        var deferred = $q.defer();
        if (constants.singleSignOn.disabled !== true) {

            apiHelper.get(constants.singleSignOn.logout, null, { 'Access-Token': accessToken}).then(function (response) {
                deferred.resolve({ status: true, message: "" });
            }, function (error) {
                deferred.reject(error);
            });
        }
        else {
            deferred.resolve({ status: true, message: "" });
        }
        return deferred.promise;
    };

    authServiceFactory.login = _login;
    authServiceFactory.signOn = _signOn;
    authServiceFactory.logoutSingleSignOn = _logoutSingleSignOn;

    return authServiceFactory;
}]);
app.factory('userService', ['$q', 'apiHelper', 'constants', function ($q, apiHelper, constants) {

    var userServiceFactory = {};

    var _getListUser = function (data) {
        var deferred = $q.defer();

        apiHelper.post(constants.user.getListUser, data).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _deactivateListUser = function (listUserProfileId) {
        var deferred = $q.defer();

        apiHelper.put(constants.user.deactivateListUser, listUserProfileId).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _deactivateUser = function (userProfileId) {
        var deferred = $q.defer();

        var url = constants.user.deactivateUser;
        url = url.format(userProfileId);

        apiHelper.put(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _activeUser = function (userProfileId) {
        var deferred = $q.defer();

        var url = constants.user.activeUser;
        url = url.format(userProfileId);

        apiHelper.put(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject({ status: false, message: error.data.Message });
        });

        return deferred.promise;
    };

    var _adFindUser = function (userName) {
        var deferred = $q.defer();
        var url = constants.user.adFindUser;
        url = url.format(userName);

        apiHelper.get(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _create = function (model) {
        var deferred = $q.defer();

        apiHelper.post(constants.user.create, model).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _edit = function (userProfileId, model) {
        var deferred = $q.defer();

        var url = constants.user.edit;
        url = url.format(userProfileId);

        apiHelper.put(url, model).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getDetail = function (userProfileId) {
        var deferred = $q.defer();

        var url = constants.user.detail;
        url = url.format(userProfileId);

        apiHelper.get(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getRoleEdit = function (userProfileId) {
        var deferred = $q.defer();

        var url = constants.user.getRoleEdit;
        url = url.format(userProfileId);

        apiHelper.get(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _manageRole = function (userProfileId, listRoleIds) {
        var deferred = $q.defer();

        var url = constants.user.manageRole;

        url = url.format(userProfileId);

        apiHelper.put(url, listRoleIds).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _manageRoles = function (model) {
        var deferred = $q.defer();

        apiHelper.put(constants.user.manageRoles, model).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getMyProfile = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.user.myProfile).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _updateMyProfile = function (model) {
        var deferred = $q.defer();

        apiHelper.put(constants.user.updateMyProfile, model).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getProfile = function (userProfileId) {
        var deferred = $q.defer();

        var url = constants.user.profile;
        url = url.format(userProfileId);

        apiHelper.get(url).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    userServiceFactory.getProfile = _getProfile;
    userServiceFactory.getMyProfile = _getMyProfile;
    userServiceFactory.updateMyProfile = _updateMyProfile;
    userServiceFactory.manageRoles = _manageRoles;
    userServiceFactory.manageRole = _manageRole;
    userServiceFactory.getRoleEdit = _getRoleEdit;
    userServiceFactory.getDetail = _getDetail;
    userServiceFactory.deactivateListUser = _deactivateListUser;
    userServiceFactory.edit = _edit;
    userServiceFactory.create = _create;
    userServiceFactory.adFindUser = _adFindUser;
    userServiceFactory.deactivateUser = _deactivateUser;
    userServiceFactory.activeUser = _activeUser;
    userServiceFactory.getListUser = _getListUser;

    return userServiceFactory;

}]);
app.factory('areaService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var areaServiceFactory = {};

    var _getAllAreaIsActive = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.area.getAllAreaIsActive).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAreaByUserSubscription = function (userProfileId) {
        var deferred = $q.defer();

        var url = constants.area.getAreaByUserSubscription;
        url = url.format(userProfileId);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getAreas = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.ASM.getAreas).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    areaServiceFactory.getAllAreaIsActive = _getAllAreaIsActive;
    areaServiceFactory.getAreaByUserSubscription = _getAreaByUserSubscription;
    areaServiceFactory.getAreas = _getAreas;

    return areaServiceFactory;
}]);
app.factory('riskService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var riskServiceFactory = {};

    var _getAllRiskLevel = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.risk.getAllRiskLevel).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    riskServiceFactory.getAllRiskLevel = _getAllRiskLevel;

    return riskServiceFactory;
}]);
app.factory('roleService', ['$q', 'apiHelper', 'constants', function ($q, apiHelper, constants) {

    var roleServiceFactory = {};

    var _getAllRoleIncludeNumberUser = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.role.getAllRoleIncludeNumberUser).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getRolesIncludeModule = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.role.getRolesIncludeModule).then(function (dataOutput) {
            deferred.resolve({ status: true, data: dataOutput.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    roleServiceFactory.getAllRoleIncludeNumberUser = _getAllRoleIncludeNumberUser;
    roleServiceFactory.getRolesIncludeModule = _getRolesIncludeModule;

    return roleServiceFactory;

}]);
app.factory('statusService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var statusServiceFactory = {};

    var _getStatusBySce = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.status.getStatusBySce).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getListStatusOfRa = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.status.getListStatisOfRa).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    var _getListStatusByModuleName = function (moduleName) {
        var deferred = $q.defer();

        var url = constants.status.getListStatusByModuleName.format(moduleName);

        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }

    statusServiceFactory.getStatusBySce = _getStatusBySce;
    statusServiceFactory.getListStatusOfRa = _getListStatusOfRa;
    statusServiceFactory.getListStatusByModuleName = _getListStatusByModuleName;

    return statusServiceFactory;
}]);
app.factory('utilsService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var utilsServiceFactory = {};

    var _getIp = function () {
        var deferred = $q.defer();

        apiHelper.get(constants.utils.getIp).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    utilsServiceFactory.getIp = _getIp;

    return utilsServiceFactory;
}]);
app.factory('serviceHelper', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {
    var services = {};
    var _requiredRule = function (input) {

        if (!$(input).is("[required]")) {
            return true;
        }

        if (input.is("[norequired=Draft]")) {
            return true;
        }

        var name = $(input).attr("name");
        var value = "";

        if ($(input).is("[type=text]") || $(input).is("textarea")) {
            value = $(input).val();
        }
        else {
            if ($(input).is("select")) {
                value = $(input).find(":selected").attr('value');

                if (value === null || value === undefined || value === "") {
                    if ($(input).parent().find(".selected-value").length > 0) {
                        value = "selected";
                    }
                }
            }
            else
                if ($(input).is("[type=checkbox]")) {
                    _.each($(input).closest("form").find("[name='" + name + "']"), function (item) {
                        if ($(item).is(":checked")) {
                            value = "checked";
                        }
                    });
                }
                else {
                    if ($(input).is("[type=radio]")) {
                        _.each($(input).closest("form").find("[name='" + name + "']"), function (item) {
                            if ($(item).is(":checked")) {
                                value = "checked";
                            }
                        });
                    }
                    else {
                        if ($(input).attr("data-role") === "dropdownlist") {
                            if ($(input).parent().find(".k-input").length > 0) {

                                var lable = $(input).attr("k-option-label");
                                var textSelect = ($(input).parent().find(".k-input").text() + "").trim();

                                if (textSelect !== "" && lable !== "'" + textSelect + "'" && lable !== textSelect) {
                                    value = "selected";
                                }

                            }
                        }
                    }
                }
        }

        if (value === null || value === undefined) {
            value = "";
        }

        value = value.replace(/\n/g, '');
        value = value.trim();

        if (value === "") {
            return false;
        }
        return true;
    };

    services.requiredRule = _requiredRule;
    return services;
}]);
app.factory('diNewService', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var diServicesFactory = {};

    var _getDiHse = function () {
        var deferred = $q.defer();
        var url = constants.DI.getHseIssue;
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data, statusCode: response.data.status });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getDiCopSol = function () {
        var deferred = $q.defer();
        var url = constants.DI.getCopSol;
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data, statusCode: response.data.status });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    diServicesFactory.getDiHse = _getDiHse;
    diServicesFactory.getDiCopSol = _getDiCopSol;
   
    return diServicesFactory;
}]);
app.factory('raServices', ['apiHelper', '$q', 'constants', function (apiHelper, $q, constants) {

    var raServicesFactory = {};

    var _getInitialData = function (sceId) {
        var deferred = $q.defer();
        var url = constants.RA.getInitialData;
        url = url.format(sceId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getApplicants = function (keyword) {
        var deferred = $q.defer();
        var url = constants.RA.getApplicants;
        url = url.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRAFacilitators = function (keyword) {
        var deferred = $q.defer();
        var url = constants.RA.getRAFacilitator;
        url = url.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRAEndorsers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.RA.getRAEndorsers;
        url = url.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRAApprovers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.RA.getRAApprovers;
        url = url.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getMocApprovers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.RA.getMocApprovers;
        url = url.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getSeverities = function (impactType) {
        var deferred = $q.defer();
        var url = constants.RA.getSeveritiesByImpactGroup;
        url = url.format(impactType);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getLikeliHoods = function () {
        var deferred = $q.defer();
        var url = constants.RA.getLikelihoods;
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRiskIdentification = function (impactValue, likelihoodValue) {
        var deferred = $q.defer();
        var url = constants.RA.getRiskIdentification;
        url = url.format(impactValue, likelihoodValue);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getTeamMembers = function (keyword) {
        var deferred = $q.defer();
        var url = constants.RA.getTeamMembers.format(keyword);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRATeamMembers = function (raId) {
        var deferred = $q.defer();
        var url = constants.RA.getRATeamMembers;
        url = url.format(raId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _createRA = function (sceId, data) {
        var deferred = $q.defer();
        var url = constants.RA.createRA;
        url = url.format(sceId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRADetail = function (sceId, raId) {
        var deferred = $q.defer();
        var url = constants.RA.getRADetail;
        url = url.format(sceId, raId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRaListing = function (data) {
        var deferred = $q.defer();
        var url = constants.RA.raListing;
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    // service get Log'RA
    var _getRALog = function (raId) {
        var deferred = $.defer();
        var url = constants.RA.getRALog;
        url = url.format(raId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRABasic = function (raId) {
        var deferred = $q.defer();
        var url = constants.RA.getRABasic;
        url = url.format(raId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getTotalMyRaListing = function () {
        var deferred = $q.defer();
        apiHelper.get(constants.RA.getTotalMyRaListing).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _updateRA = function (sceId, raId, data) {
        var deferred = $q.defer();
        var url = constants.RA.updateRA;
        url = url.format(sceId, raId);
        apiHelper.put(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _updateMOC = function (sceId, raId, data) {
        var deferred = $q.defer();
        var url = constants.RA.updateMOC;
        url = url.format(sceId, raId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _reviewRA = function (sceId, raId, data) {
        var deferred = $q.defer();
        var url = constants.RA.reviewRA;
        url = url.format(sceId, raId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _endorseRA = function (sceId, raId, data) {
        var deferred = $q.defer();
        var url = constants.RA.endorseRA;
        url = url.format(sceId, raId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _approveRA = function (sceId, raId, data) {
        var deferred = $q.defer();
        var url = constants.RA.approveRA;
        url = url.format(sceId, raId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _approveMOC = function (sceId, raId, data) {
        var deferred = $q.defer();
        var url = constants.RA.approveMOC;
        url = url.format(sceId, raId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _cancelRA = function (sceId, raId) {
        var deferred = $q.defer();
        var url = constants.RA.cancelRA;
        url = url.format(sceId, raId);
        apiHelper.post(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _cancelMOC = function (sceId, raId) {
        var deferred = $q.defer();
        var url = constants.RA.cancelMOC;
        url = url.format(sceId, raId);
        apiHelper.post(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _transferRole = function (sceId, raId, data) {
        var deferred = $q.defer();
        var url = constants.RA.transferRoles;
        url = url.format(sceId, raId);
        apiHelper.post(url, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getPendingPerson = function (sceId, raId) {
        var deferred = $q.defer();
        var url = constants.RA.getPendingPerson;
        url = url.format(sceId, raId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _checkRaCopy = function (sceId) {
        var deferred = $q.defer();
        var url = constants.RA.checkRaCopy;
        url = url.format(sceId);
        apiHelper.post(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, message: response.data.message, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    }

    var _getInfoRaCopy = function (sceId) {
        var deferred = $q.defer();
        var url = constants.RA.getRaCopy;
        url = url.format(sceId);
        apiHelper.get(url).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, message: response.data.message, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };

    var _getRaLog = function (data) {
        var deferred = $q.defer();

        apiHelper.post(constants.RA.getRALog, data).then(function (response) {
            deferred.resolve({ status: true, data: response.data.result, statusCode: response.data.statusCode });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    };

    raServicesFactory.getInitialData = _getInitialData;
    raServicesFactory.getApplicants = _getApplicants;
    raServicesFactory.getRAFacilitors = _getRAFacilitators;
    raServicesFactory.getRAEndorsers = _getRAEndorsers;
    raServicesFactory.getRAApprovers = _getRAApprovers;
    raServicesFactory.getMocApprovers = _getMocApprovers;
    raServicesFactory.getSeverities = _getSeverities;
    raServicesFactory.getLikelihoods = _getLikeliHoods;
    raServicesFactory.getRiskIdentification = _getRiskIdentification;
    raServicesFactory.getTeamMembers = _getTeamMembers;
    raServicesFactory.getRATeamMembers = _getRATeamMembers;
    raServicesFactory.createRA = _createRA;
    raServicesFactory.getRADetail = _getRADetail;
    raServicesFactory.getRaListing = _getRaListing;
    raServicesFactory.getRALog = _getRALog;
    raServicesFactory.getTotalMyRaListing = _getTotalMyRaListing;
    raServicesFactory.getRABasic = _getRABasic;
    raServicesFactory.updateRA = _updateRA;
    raServicesFactory.reviewRA = _reviewRA;
    raServicesFactory.endorseRA = _endorseRA;
    raServicesFactory.approveRA = _approveRA;
    raServicesFactory.approveMOC = _approveMOC;
    raServicesFactory.cancelRA = _cancelRA;
    raServicesFactory.cancelMOC = _cancelMOC;
    raServicesFactory.updateMOC = _updateMOC;
    raServicesFactory.transferRoles = _transferRole;
    raServicesFactory.getPendingPerson = _getPendingPerson;
    raServicesFactory.checkRaCopy = _checkRaCopy;
    raServicesFactory.getInfoRaCopy = _getInfoRaCopy;
    raServicesFactory.getRaLog = _getRaLog;

    return raServicesFactory;
}]);