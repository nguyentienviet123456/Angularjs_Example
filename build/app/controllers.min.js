app.controller('asmListController',
    ['$rootScope', '$state', '$stateParams', '$scope', '$location', '$timeout', 'asmServices', 'statusService', 'areaService', 'constants',
function ($rootScope, $state, $stateParams, $scope, $location, $timeout, asmServices, statusService, areaService, constants) {
    var indexTab = 0;
    $scope.alarmId = $stateParams.alarmId;
    $scope.isCalling = true;
    $scope.dialogOption = {
        id: "dialogInfo",
        title: "",
        lableClose: "CLOSE",
        content: "",
        width: 300
    };

    // total my asm listing model
    $scope.totalMyAsmListing = {
        totalMyAsm: 0,
        totalMyPendingAction: 0
    };

    // listing model
    $scope.model = {
        view: "All",
        tagNo: "",
        status: "",
        filter: [{
            field: "",
            valueString: "",
            valueDateTimeFrom: "",
            valueDateTimeTo: "",
            valueDecimalFrom: "",
            valueDecimalTo: "",
            valueBit: "",
            isActive: false
        }],
        sort: [{
            field: "",
            asc: false,
            isActive: ""
        }],
        skip: 0,
        take: 0
    };

    var onLoad = function () {
        $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
        // Set page title
        $rootScope.$app.title = constants.titlePage.asmListing;

        // Is current user has applicant role
        $scope.hasApplicantRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",21,") >= 0;

        // Get number of my asm and my pending action
        asmServices.getTotalMyPedingAsm().then(function (response) {
            $scope.totalMyAsmListing = {
                totalMyAsm: response.data.myAsmNumber,
                totalMyPendingAction: response.data.myPendingActionNumber
            };
        }, function (error) {
            utils.error.showErrorGet(error);
        });
    };
    onLoad();

    $scope.searchByTagNo = function (keyEvent) {
        if (keyEvent.which === 13)
            $scope.searchByTagNoClick();
    };

    $scope.searchByTagNoClick = function () {
        $scope.onChangeTab(indexTab);
    };

    $scope.resetModel = function () {
        $scope.model.status = "";
        $scope.model.filter = [];
        $scope.model.sort = [];
        $scope.model.skip = "";
        $scope.model.take = "";
    };

    $scope.initData = function (options, isPendingReApproval, isPendingReShelving, isPendingMoc) {
        kendo.ui.progress($('.asm-listing'), false);
        // reset input data
        $scope.resetModel();
        var optionfilters = [];
        var filters = [
            {
                field: "applicationDate",
                valueDateTimeFrom: null,
                valueDateTimeTo: null,
                isActive: false
            },
            {
                field: "area",
                valueString: "",
                isActive: false
            },
            {
                field: "status",
                valueString: "",
                isActive: false
            },
            {
                field: "lapse",
                ValueDecimalFrom: null,
                isActive: false
            },
            {
                field: "isPendingReApprove",
                valueBit: true,
                isActive: isPendingReApproval === true
            },
            {
                field: "isPendingReShelving",
                valueBit: true,
                isActive: isPendingReShelving === true
            },
            {
                field: "isPendingMoc",
                valueBit: true,
                isActive: isPendingMoc === true
            }
        ];

        if (options.data.filter !== null && options.data.filter !== undefined) {

            _.each(options.data.filter.filters, function (o) {
                var listFilterOut = [];
                utils.getfilter(o, listFilterOut);
                Array.prototype.push.apply(optionfilters, listFilterOut);
            });

            _.each(optionfilters, function (m) {
                var date;
                switch (m.field) {
                    case "applicationDate":
                        if (m.operator === "gte") {
                            date = $.format.toBrowserTimeZone(m.value, constants.format.date.default);
                            filters[0].valueDateTimeFrom = date;
                            filters[0].isActive = true;
                        }
                        else {
                            date = $.format.toBrowserTimeZone(m.value, constants.format.date.default);
                            filters[0].valueDateTimeTo = date;
                            filters[0].isActive = true;
                        }
                        break;

                    case "area":
                        filters[1].valueString = filters[1].valueString + "," + m.value;
                        filters[1].isActive = true;
                        break;

                    case "status":
                        filters[2].valueString = filters[2].valueString + "," + m.value;
                        filters[2].isActive = true;
                        break;
                    case "lapse":
                        filters[3].ValueDecimalFrom = m.value;
                        filters[3].isActive = true;
                        break;
                    default:
                        var filterModel = {
                            field: m.field,
                            valueString: m.value,
                            isActive: true
                        };
                        filters.push(filterModel);
                        break;
                }
            });

            $scope.model.filter = filters;
        }
        if (options.data.sort !== null && options.data.sort !== undefined) {
            _.each(options.data.sort, function (o) {
                $scope.model.sort.push({
                    field: o.field,
                    asc: o.dir === 'asc',
                    isActive: true
                });
            });
        }
        $scope.model.take = options.data.take;
        $scope.model.skip = (options.data.page - 1) * options.data.pageSize;
    };

    $scope.isFilter = 0;
    $scope.needToCallServer = 0;

    $scope.allDataSource = new kendo.data.DataSource({
        transport: {
            read: function (options) {
                if ($scope.isCalling) {
                    $rootScope.isLoading = true;

                    $scope.initData(options, $rootScope.filterIsPendingReApprove, $rootScope.filterIsPendingReShelving, $rootScope.filterIsPendingMoc);

                    var isPreFilter = $rootScope.filterByArea !== null && $rootScope.filterByArea !== undefined && $rootScope.filterByArea.length > 0;

                    $scope.needToCallServer++;

                    if (isPreFilter && $scope.isFilter === 0) {
                        var ds = $(".asm-listing").data("kendoGrid").dataSource;
                        var currentFilter = [];
                        currentFilter.push({ field: "status", operator: "eq", value: $rootScope.filterByStatus });
                        _.each($rootScope.filterByArea, function (m) {
                            currentFilter.push({ field: "area", operator: "eq", value: m });
                        });
                        $scope.isFilter++;
                        ds.filter(currentFilter);
                    }

                    if (!isPreFilter || isPreFilter && $scope.needToCallServer === 2) {
                        if ($rootScope.goToMyPendingAction) {
                            $("#asmTab").data("kendoTabStrip").select(2);
                            $scope.model.view = "PendingMyAction";
                            $rootScope.goToMyPendingAction = false;
                        }
                        asmServices.getAsmListing($scope.model).then(function (response) {
                            if (response.data !== null && response.data !== undefined) {
                                options.success(response.data);
                            } else {
                                options.success([]);
                            }
                            // reset value
                            $rootScope.filterByArea = null;
                            $rootScope.filterByStatus = '';
                            $rootScope.filterIsPendingReApprove = false;
                            $rootScope.filterIsPendingReShelving = false;
                            $rootScope.filterIsPendingMoc = false;

                            $rootScope.isLoading = false;
                        }, function (error) {
                            options.error([]);
                            utils.error.showErrorGet(error);
                            // reset value
                            $rootScope.filterByArea = null;
                            $rootScope.filterByStatus = '';
                            $rootScope.filterIsPendingReApprove = false;
                            $rootScope.filterIsPendingReShelving = false;
                            $rootScope.filterIsPendingMoc = false;

                            $rootScope.isLoading = false;
                        });
                    }
                    else {
                        options.success([]);
                        $('.asm-listing .k-grid-norecords-template').hide();
                    }
                }
                else {
                    options.success([]);
                    $('.asm-listing .k-grid-norecords-template').hide();
                }
            }
        },
        schema: {
            model: {
                fields: {
                    area: { type: "string" },
                    tagNo: { type: "string" },
                    alarmNo: { type: "string" },
                    description: { type: "string" },
                    applicationDate: { type: "date" },
                    lapse: { type: "number", validation: { required: true, min: 0 } },
                    status: { type: "string" },
                    live: { type: "string" }
                }
            },
            total: function (response) {
                return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
            }
        },
        pageSize: 20,
        serverPaging: true,
        serverFiltering: true,
        serverSorting: true
    });

    $scope.mainGridOptions = {
        dataSource: $scope.allDataSource,
        filterable: {
            extra: true,
            operators: {
                date: {
                    gte: "Start Date",
                    lte: "End Date"
                },
                string: {
                    operator: "contains"
                },
                number: {
                    operator: "eq"
                }
            }
        },
        filterMenuInit: function (e) {
            utils.filterMenuInit(e);
        },
        scrollable: false,
        sortable: {
            mode: "multiple",
            allowUnsort: true
        },
        pageable: {
            pageSizes: true,
            buttonCount: 5
        },
        columns: [{
            field: "area",
            title: "Area",
            width: "70px",
            attributes: {
                "class": "cell_area"
            },
            filterable: {
                multi: true,
                dataSource: {
                    transport: {
                        read: function (options) {
                            areaService.getAreas().then(function (response) {
                                if (response.data !== null && response.data !== undefined) {
                                    options.success(response.data);
                                } else {
                                    options.success([]);
                                }
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                            });
                        }
                    }
                },
                itemTemplate: function (e) {
                    if (e.field === "all") {
                        return "<li class=\"select_all\"><label><input type='checkbox' /> <span>#= all#</span></label></li>";
                    } else {
                        return "<li><label><input type='checkbox' name='" + e.field + "' value='#=data.lookupAreaId#'/> <span>#= data.description #</span></label></li>";
                    }
                }
            }
        }, {
            field: "tagNo",
            title: "Tag No.",
            width: "93px",
            attributes: {
                "class": "cell_tag_no"
            },
            filterable: {
                extra: false
            }
        }, {
            field: "alarmNo",
            title: "ASM No.",
            width: "127px",
            attributes: {
                "class": "cell_alarm_no"
            },
            filterable: {
                extra: false
            }
        }, {
            field: "description",
            title: "Description",
            filterable: {
                extra: false
            },
            attributes: {
                "class": "cell_description"
            }
        }, {
            field: "applicationDate",
            title: "Application Date",
            width: "140px",
            format: "{0:dd MMM yyyy}",
            attributes: {
                "class": "cell_application_date"
            },
            filterable: {
                ui: "datepicker"
            }
        }, {
            field: "lapse",
            title: "Lapse",
            width: "85px",
            attributes: {
                "class": "cell_lapse"
            },
            filterable: {
                extra: false
            },
            template: '#:lapse# days'
        }, {
            field: "status",
            title: "Status",
            width: "145px",
            attributes: {
                "class": "cell_status"
            },
            filterable: {
                multi: true,
                dataSource: {
                    transport: {
                        read: function (options) {
                            statusService.getListStatusByModuleName(constants.module.asm).then(function (response) {
                                if (response.data !== null && response.data !== undefined) {
                                    options.success(response.data);
                                } else {
                                    options.success([]);
                                }
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                            });
                        }
                    }
                },
                itemTemplate: function (e) {
                    if (e.field === "all") {
                        return "<li class=\"select_all\"><label><input type='checkbox' /> <span>#= all#</span></label></li>";
                    } else {
                        return "<li><label><input type='checkbox' name='" + e.field + "' value='#=data.statusKey#'/> <span>#= data.description #</span></label></li>";
                    }
                }
            },
            template: function (dataItem) {
                var retVal = "";
                switch (dataItem.statusKey) {
                    case "21":
                        retVal = "<strong class='text-grey'>" + dataItem.status + "</strong>";
                        break;
                    case "22":
                    case "23":
                    case "24":
                    case "25":
                    case "26":
                        retVal = "<strong class='text-light-orange'>" + dataItem.status + "</strong>";
                        break;
                    case "28":
                    case "30":
                        retVal = "<strong class='text-green'>" + dataItem.status + "</strong>";
                        break;
                    case "31":
                    case "32":
                    case "33":
                    case "34":
                        retVal = "<strong class='text-green'>ASM Live</strong>";
                        break;
                }
                return retVal;
            }
        }, {
            title: "Live",
            field: "live",
            width: "300px",
            attributes: {
                "class": "cell_live"
            },
            template: function (dataItem) {
                var outPut = '';
                if (dataItem.live !== '') {
                    var dataArray = jQuery.parseJSON(dataItem.live);
                    _.each(dataArray, function (item) {
                        outPut += "<li><span><i class=\"icon-hourglass\"></i> " + item + "</span></li>";
                    });
                }
                if (outPut !== '') {
                    outPut = "<ul class=\"live_data\">"
                                + outPut +
                            "</ul>";
                }

                return "<button class=\"btn-grid-item-menu\" type=\"button\" data-ng-click=\"openItemMenu($event)\"><i class=\"icon-dot-3 icon-btn-grid-item-menu\"></i></button>" +
                        outPut +
                        "<ul class=\"grid-item-menu\" data-id='" + dataItem.alarmId + "' style=\"display: none; background-color: #fff; border: 1px solid #ccc;\" >" +
                            // Bind view detail menu item
                            "<li><a href=\"#\" data-ng-click=\"viewDetail('" + dataItem.statusKey + "', '" + dataItem.alarmId + "')\">View</a></li>" +
                            // Bind transfer roles menu item
                            ($rootScope.$app.userProfile.isAsmAdmin && parseInt(dataItem.statusKey) > 21 ? "<li><a href =\"#\" data-ng-click=\"showTransferRolesKendoDiaglog('" + dataItem.alarmId + "')\">Transfer Roles...</a></li>" : "") +
                            // Bind transfer menu item
                            ($scope.hasApplicantRole && $rootScope.$app.userProfile.userProfileId === dataItem.applicantId && parseInt(dataItem.statusKey) > 21 ? "<li><a href=\"#\" data-ng-click=\"transferAlarm('" + dataItem.alarmId + "')\">Transfer</a></li>" : "") +
                            // Bind copy alarm menu item
                            ($scope.hasApplicantRole && parseInt(dataItem.statusKey) >= 26 ? "<li><a href=\"#\" data-ng-click=\"copyAlarm('" + dataItem.alarmId + "', '" + dataItem.alarmNo + "')\">Copy Alarm</li>" : "") +
                            // Bind cancel alarm menu item
                            ((($rootScope.$app.userProfile.isAsmAdmin
                                || ($scope.hasApplicantRole && $rootScope.$app.userProfile.userProfileId === dataItem.applicantId))
                                && (parseInt(dataItem.statusKey) < 26)) ?
                            "<li><a href=\"#\" data-ng-click=\"cancelShelving('" + dataItem.alarmId + "')\">Cancel Shelving</a></li>" : "") +
                           // Bind print alarm menu item                    
                            (parseInt(dataItem.statusKey) > 27 ? "<li><a href data-ng-click='asmPrint(\"" + dataItem.alarmId + "\")' data-ng-hide='" + (dataItem.statusKey === "1") + "'>Print</a></li>" : "") +
                           // Bind alarm status log menu item
                            "<li><a href=\"#\" data-ng-click=\"statusLog('" + dataItem.alarmId + "')\">Status Log</a></li>" +
                        "</ul>";
            },  
            filterable: false,
            sortable: false
        }],
        noRecords: true,
        messages: {
            noRecords: "There is no data on current page"
        },
        toolbar: [{
            template: "<kendo-tabstrip id='asmTab'>" +
                            "<ul>" +
                                "<li data-ng-click=\"onChangeTab(0)\" class=\"k-state-active\">All</li>" +
                                "<li data-ng-click=\"onChangeTab(1)\">My ASM <small>({{totalMyAsmListing.totalMyAsm}})</small></li>" +
                                "<li data-ng-click=\"onChangeTab(2)\">Pending My Action <small>({{totalMyAsmListing.totalMyPendingAction}})</small></li>" +
                            "</ul>" +
                        "</kendo-tabstrip>"
        }],
        selectable: "row",
        change: function (e) {
            e.preventDefault();
            var dataItem = this.dataItem(this.select());
            $scope.viewDetail(dataItem.statusKey, dataItem.alarmId);
        }
    };

    $scope.openItemMenu = function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        var itemMenu = $(e.target).closest("td").find(".grid-item-menu");
        _.each($('.grid-item-menu'), function (item) {
            if ($(item).attr("data-id") !== $(itemMenu).attr("data-id")) {
                $(item).hide();
            }
            else {
                $(itemMenu).slideToggle();
            }
        });
    };


    $scope.asmPrint = function (id) {
        window.open('/print/asm/' + id, '_blank');
    };

    $scope.viewDetail = function (statusKey, alarmId) {
        if (statusKey === "21") {
            $state.go(constants.state.asmEditDraft, { alarmId: alarmId });
        } else {
            $state.go(constants.state.asmDetail, { alarmId: alarmId });
        }
    };

    $scope.statusLog = function (id) {
        $state.go(constants.state.asmStatusLog, { alarmId: id });
    }

    $scope.alarmIdSelected = "";

    $scope.transferAlarm = function (id) {
        $scope.alarmIdSelected = id;
        $scope.transferDialog.open();
    };

    $scope.cancelShelving = function (id) {
        $scope.confirmDialog("Cancel Alarm Shelving", "Are you sure you want to cancel this shelving?").then(function () {
            $rootScope.isLoading = true;
            try {
                asmServices.cancelShelving(id).then(function (response) {
                    if (response.data === true) {
                        $scope.dialogOption.title = "Alarm Shelving Canceled";
                        $scope.dialogOption.content = "Alarm Shelving form has been canceled successfully";
                        utils.dialog.showDialog($scope.dialogOption, function () {
                            var grid = $(".asm-listing").data("kendoGrid");
                            grid.dataSource.read();
                            onLoad();
                        });
                    }

                    $rootScope.isLoading = false;
                }, function (error) {
                    $rootScope.isLoading = false;

                    $scope.dialogOption.title = "Alarm Shelving Cancel Failed";
                    $scope.dialogOption.content = error.message;
                    utils.dialog.showDialog($scope.dialogOption);
                });
            }
            catch (err) {
                $rootScope.isLoading = false;
            }
        }, function () {
            // Chooses cancel, do nothing
        });
    };

    //$scope.asmPrint = function (id) {
    //    window.open('/print/asm/' + id, '_blank');
    //};

    $scope.alarmCopyDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content,
            actions: [{ text: "COPY", primary: true },
                { text: "CANCEL" }]
        }).data("kendoConfirm").open().result;
    };

    $scope.copyAlarm = function (id, alarmNo) {
        $scope.alarmCopyDialog("Copy Alarm", "Existing alarm shelving request No. <strong>" + alarmNo + "</strong> information will be copied into new Alarm request. Are you sure to proceed?").then(function () {
            $state.go(constants.state.asmCopy, { alarmId: id });
        }, function () {
            // Chooses cancel, do nothing
        });
    }

    $scope.onChangeTab = function (index) {
        indexTab = index;
        var grid = $(".asm-listing").data("kendoGrid");

        $scope.isCalling = false;
        // clear filter
        grid.dataSource.sort({});
        grid.dataSource.filter({});

        switch (index) {
            case 0:
                $scope.model.view = "All";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
            case 1:
                $scope.model.view = "MyASM";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
            case 2:
                $scope.model.view = "PendingMyAction";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
        }
    };

    //#region Transfer ASM
    $scope.transferAlarmModel = {
        newApplicantId: "",
        comment: ""
    };

    $scope.transferAlarmAction = [
        { text: 'CANCEL' },
        {
            text: 'TRANSFER',
            action: function () {
                $rootScope.isLoading = true;
                asmServices.transferAsm($scope.alarmIdSelected, $scope.transferAlarmModel).then(function (response) {
                    $rootScope.isLoading = false;
                    $scope.dialogOption.title = "ASM Transferred";
                    $scope.dialogOption.content = "This ASM is now transferred to <strong>" + response.data + "</strong>. A notification has been sent to alert the new applicant.";
                    utils.dialog.showDialog($scope.dialogOption, function () {
                        $state.go(constants.state.asmlist);
                        if ($state.current.name === constants.state.asmlist) {
                            var grid = $(".asm-listing").data("kendoGrid");
                            switch (indexTab) {
                                case 0:
                                    $scope.model.view = "All";
                                    $scope.isCalling = true;
                                    grid.dataSource.read();
                                    break;
                                case 1:
                                    $scope.model.view = "MyASM";
                                    $scope.isCalling = true;
                                    grid.dataSource.read();
                                    break;
                                case 2:
                                    $scope.model.view = "PendingMyAction";
                                    $scope.isCalling = true;
                                    grid.dataSource.read();
                                    break;
                            }
                        }
                    });
                    onLoad();
                }, function (error) {
                    var option = {
                        id: "dialogInfo",
                        title: "ASM Transfer Failure",
                        lableClose: "CLOSE",
                        content: error.message,
                        width: 300
                    };
                    $rootScope.isLoading = false;
                    utils.dialog.showDialog(option);
                });
                // Returning false will prevent the closing of the dialog
                return true;
            },
            primary: true
        }
    ];

    $scope.applicantSearchTextForApplicant = "";
    // Bind new applicant to transfer
    $scope.newApplicantForApplicantOptions = {
        autoBind: false,
        optionLabel: "Select New Applicant",
        filter: "contains",
        filtering: function (e) {
            $scope.applicantSearchTextForApplicant = e.filter == null ? "" : e.filter.value;
        },
        dataSource: {
            serverFiltering: true,
            transport: {
                read: function (options) {
                    asmServices.getApplicantsForTransferInSameAreas($scope.alarmIdSelected, $scope.applicantSearchTextForApplicant).then(function (response) {
                        if (response.data != null) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                }
            }
        },
        dataTextField: "userName",
        dataValueField: "userProfileId",
        valueTemplate: function (dataItem) {
            if (!dataItem.hasOwnProperty('image')) {
                dataItem.image = $scope.applicantToTransfer === null || $scope.applicantToTransfer === undefined ? "" : $scope.applicantToTransfer.image;
            }
            return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
        },
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
    };

    //#endregion

    //#region Transfer Role
    $scope.applicantToTransfer = null;
    $scope.backupApplicant = null;

    $scope.reviewerToTransfer = null;
    $scope.backupReviewer = null;

    $scope.endorserToTransfer = null;
    $scope.backupEndorser = null;

    $scope.approverToTransfer = null;
    $scope.backupApprover = null;

    $scope.mocApproverToTransfer = null;
    $scope.backupMocApprover = null;

    $scope.applicantSearchText = "";
    // Bind new applicant to transfer
    $scope.newApplicantOptions = {
        autoBind: false,
        optionLabel: "Select new Applicant",
        filter: "contains",
        filtering: function (e) {
            $scope.applicantSearchText = e.filter == null || e.filter == undefined ? "" : e.filter.value;
        },
        dataSource: {
            serverFiltering: true,
            transport: {
                read: function (options) {
                    asmServices.getApplicantsForTransferInSameAreas($scope.transferAlarmId, $scope.applicantSearchText).then(function (response) {
                        if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                }
            }
        },
        dataTextField: "userName",
        dataValueField: "userProfileId",
        valueTemplate: function (dataItem) {
            if (!dataItem.hasOwnProperty("image")) {
                dataItem.image = $scope.applicantToTransfer === null || $scope.applicantToTransfer === undefined ? "" : $scope.applicantToTransfer.image;
            }
            return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
        },
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
    };

    $scope.reviewerForTransferSearchText = "";

    $scope.reviewerForTransferDataSource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                asmServices.getPreData('reviewers', null, $scope.reviewerForTransferSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.endorserSearchText = "";

    $scope.endorseDatasource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                asmServices.getPreData('endorsers', null, $scope.endorserSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.approverSearchText = "";

    $scope.approverDatasource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                asmServices.getPreData('approvers', null, $scope.approverSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.mocApproverSearchText = "";

    $scope.mocApproverDatasource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                asmServices.getPreData('mocapprovers', null, $scope.mocApproverSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    option.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.transferAlarmId = "";

    $scope.pendingReview = false;

    $scope.pendingEndorse = false;

    $scope.pendingApprove = false;

    $scope.pendingMocApprove = false;
    $scope.showTransferRolesKendoDiaglog = function (alarmId) {
        $scope.transferAlarmId = alarmId;
        $rootScope.isLoading = true;
        asmServices.getPendingPeopleForTransferingRoles(alarmId).then(function (response) {
            $rootScope.isLoading = false;
            if (response.data !== null && response.data !== undefined) {
                var statusKey = response.data.statusKey;
                $scope.applicantToTransfer = response.data.applicant;
                $scope.backupApplicant = $scope.applicantToTransfer;
                switch (statusKey) {
                    case "24": {
                        $scope.pendingReview = true;
                        $scope.pendingEndorse = false;
                        $scope.pendingApprove = false;
                        $scope.pendingMocApprove = false;
                        $scope.reviewerToTransfer = response.data.pendingPerson;
                        $scope.backupReviewer = $scope.reviewerToTransfer;
                        $scope.endorserToTransfer = null;
                        $scope.approverToTransfer = null;

                        $scope.reviewerForTransferOptions = {
                            autoBind: false,
                            filter: "contains",
                            filtering: function (e) {
                                $scope.reviewerForTransferSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                            },
                            optionLabel: "Select Reviewer",
                            dataSource: $scope.reviewerForTransferDataSource,
                            dataTextField: "userName",
                            dataValueField: "userProfileId",
                            valueTemplate: function (dataItem) {
                                if (!dataItem.hasOwnProperty('image')) {
                                    dataItem.image = $scope.reviewerToTransfer.image;
                                }
                                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                            },
                            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                        };
                        break;
                    }
                    case "23": {
                        $scope.pendingReview = false;
                        $scope.pendingEndorse = true;
                        $scope.pendingApprove = false;
                        $scope.pendingMocApprove = false;
                        $scope.endorserToTransfer = response.data.pendingPerson;
                        $scope.backupEndorser = $scope.endorserToTransfer;
                        $scope.reviewerToTransfer = null;
                        $scope.approverToTransfer = null;

                        $scope.endorserOptions = {
                            autoBind: false,
                            filter: "contains",
                            filtering: function (e) {
                                $scope.endorserSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                            },
                            optionLabel: "Select Endorser",
                            dataSource: $scope.endorseDatasource,
                            dataTextField: "userName",
                            dataValueField: "userProfileId",
                            valueTemplate: function (dataItem) {
                                if (!dataItem.hasOwnProperty('image')) {
                                    dataItem.image = $scope.endorserToTransfer.image;
                                }
                                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                            },
                            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                        };

                        break;
                    }
                    case "25": {
                        $scope.pendingReview = false;
                        $scope.pendingEndorse = false;
                        $scope.pendingApprove = true;
                        $scope.pendingMocApprove = false;
                        $scope.approverToTransfer = response.data.pendingPerson;
                        $scope.backupApprover = $scope.approverToTransfer;
                        $scope.reviewerToTransfer = null;
                        $scope.endorserToTransfer = null;

                        $scope.approverOptions = {
                            autoBind: false,
                            optionLabel: "Select Approver",
                            filter: "contains",
                            filtering: function (e) {
                                $scope.approverSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                            },
                            dataSource: $scope.approverDatasource,
                            dataTextField: "userName",
                            dataValueField: "userProfileId",
                            valueTemplate: function (dataItem) {
                                if (!dataItem.hasOwnProperty('image')) {
                                    dataItem.image = $scope.approverToTransfer.image;
                                }
                                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                            },
                            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                        };

                        break;
                    }
                    case "32": {
                        $scope.pendingReview = false;
                        $scope.pendingEndorse = false;
                        $scope.pendingApprove = false;
                        $scope.pendingMocApprove = true;
                        console.log($scope.pendingMocApprove);
                        $scope.mocApproverToTransfer = response.data.pendingPerson;
                        $scope.backupMocApprover = $scope.mocApproverToTransfer;
                        $scope.reviewerToTransfer = null;
                        $scope.endorserToTransfer = null;

                        $scope.mocApproverOptions = {
                            autoBind: false,
                            optionLabel: "Select MOC Approver",
                            filter: "contains",
                            filtering: function (e) {
                                $scope.mocApproverSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                            },
                            dataSource: $scope.mocApproverDatasource,
                            dataTextField: "userName",
                            dataValueField: "userProfileId",
                            valueTemplate: function (dataItem) {
                                if (!dataItem.hasOwnProperty('image')) {
                                    dataItem.image = $scope.mocApproverToTransfer.image;
                                }
                                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                            },
                            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                        };

                        break;
                    }
                    default: {
                        $scope.pendingReview = false;
                        $scope.pendingEndorse = false;
                        $scope.pendingApprove = false;
                        $scope.pendingMocApprove = false;
                        $scope.reviewerToTransfer = null;
                        $scope.endorserToTransfer = null;
                        $scope.approverToTransfer = null;
                        $scope.mocApproverToTransfer = null;
                        break;
                    }
                }
                $scope.alarmTransferRolesKendoDiaglog.center();
                $scope.alarmTransferRolesKendoDiaglog.open();
            }
        }, function (err) {
            $rootScope.isLoading = false;
            utils.error.showErrorGet(err);
        });
    };

    $scope.adminComment = "";
    $scope.applicantIsTransfered = false;
    $scope.reviewerIsTransfered = false;
    $scope.endorserIsTransfered = false;
    $scope.approverIsTransfered = false;
    $scope.mocApproverIsTransfered = false;
    $scope.alarmTransferRoles = [
        { text: 'CANCEL' },
        {
            text: 'CONFIRM',
            action: function () {
                if ($scope.validators.alarmTransfer.validate()) {
                    $scope.transferRolesModel = {
                        applicantProfileId: $scope.applicantToTransfer.userProfileId !== $scope.backupApplicant.userProfileId && $scope.applicantToTransfer.userProfileId !== "" ? $scope.applicantToTransfer.userProfileId : null,
                        reviewerProfileId: $scope.pendingReview && $scope.reviewerToTransfer.userProfileId !== $scope.backupReviewer.userProfileId && $scope.reviewerToTransfer.userProfileId !== "" ? $scope.reviewerToTransfer.userProfileId : null,
                        endorserProfileId: $scope.pendingEndorse && $scope.endorserToTransfer.userProfileId !== $scope.backupEndorser.userProfileId && $scope.endorserToTransfer.userProfileId !== "" ? $scope.endorserToTransfer.userProfileId : null,
                        approverProfileId: $scope.pendingApprove && $scope.approverToTransfer.userProfileId !== $scope.backupApprover.userProfileId && $scope.approverToTransfer.userProfileId !== "" ? $scope.approverToTransfer.userProfileId : null,
                        mocApproverProfileId: $scope.pendingMocApprove && $scope.mocApproverToTransfer.userProfileId !== $scope.backupMocApprover.userProfileId && $scope.mocApproverToTransfer.userProfileId !== "" ? $scope.mocApproverToTransfer.userProfileId : null,
                        comment: $scope.adminComment
                    };
                    if (($scope.transferRolesModel.applicantProfileId === null || $scope.transferRolesModel.applicantProfileId === undefined) && ($scope.transferRolesModel.reviewerProfileId === null || $scope.transferRolesModel.reviewerProfileId === undefined) && ($scope.transferRolesModel.endorserProfileId === null || $scope.transferRolesModel.endorserProfileId === undefined) && ($scope.transferRolesModel.approverProfileId === null || $scope.transferRolesModel.approverProfileId === undefined) && ($scope.transferRolesModel.mocApproverProfileId === null || $scope.transferRolesModel.mocApproverProfileId === undefined)) {
                        isProcessTriggerClick = true;
                        return true;
                    }
                    $rootScope.isLoading = true;
                    asmServices.transferRoles($scope.transferAlarmId, $scope.transferRolesModel).then(function (response) {
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.applicantProfileId !== null && $scope.transferRolesModel.applicantProfileId !== undefined) {
                            $scope.applicantIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.reviewerProfileId !== null && $scope.transferRolesModel.reviewerProfileId !== undefined) {
                            $scope.reviewerIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.endorserProfileId !== null && $scope.transferRolesModel.endorserProfileId !== undefined) {
                            $scope.endorserIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.approverProfileId !== null && $scope.transferRolesModel.approverProfileId !== undefined) {
                            $scope.approverIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.mocApproverProfileId !== null && $scope.transferRolesModel.mocApproverProfileId !== undefined) {
                            $scope.mocApproverIsTransfered = true;
                        }
                        $rootScope.isLoading = false;
                        $scope.transferResultDialog.center();
                        $scope.transferResultDialog.open();
                        if ($state.current.name === constants.state.asmlist) {
                            var grid = $(".asm-listing").data("kendoGrid");
                            grid.dataSource.read();
                        }
                        onLoad();
                    }, function (err) {
                        $rootScope.isLoading = false;
                        var option = {
                            id: "dialogInfo",
                            title: "ASM Roles transferred failed.",
                            lableClose: "CLOSE",
                            content: err.message,
                            width: 300
                        };
                        utils.dialog.showDialog(option);
                    });
                    return true;
                }
                return false;
            },
            primary: true
        }
    ];

    $scope.transferResultActions = [{
        text: 'CLOSE',
        action: function () {
            $state.go(constants.state.asmlist);
        }
    }];
    //#endregion

    $scope.confirmDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content
        }).data("kendoConfirm").open().result;
    };
}]);
app.controller('asmNewController',
    ['$rootScope', '$window', '$state', '$stateParams', '$scope', '$location', 'authService', 'appSettings', 'constants', 'asmNewServices', 'serviceHelper', 'asmWorkflowServices',
function ($rootScope, $window, $state, $stateParams, $scope, $location, authService, appSettings, constants, asmNewServices, serviceHelper, asmWorkflowServices) {

    //#region Form definition
    // Get current logged-in user profile
    $scope.userProfile = $rootScope.$app.userProfile;
    // Model
    $scope.model = {
        radio: null,
        areaId: null,
        unitId: null,
        tagNo: null,
        otherTagNo: null,
        equipmentNo: null,
        alarmClass: null,
        type: null,
        otherType: null,
        description: null,
        reviewerId: null,
        parentAlarm: null,
        isSubmitAction: null,
        mobileNo: $scope.userProfile.mobileNo == null ? '' : $scope.userProfile.mobileNo
    };

    //Common field value
    $scope.selectedArea = "";
    $scope.selectedAlarmClass = "";
    $scope.selectedUnitNo = "";
    $scope.selectedTagNo = "";
    $scope.selectedType = "";
    $scope.selectedReviewer = "";

    // Common info dialog
    $scope.dialogOption = {
        id: "dialogInfo",
        title: "",
        lableClose: "CLOSE",
        content: "",
        width: 300
    };

    var onLoad = function () {
        $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
    };
    onLoad();
    // Pop up internal kendo 
    $scope.confirmDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content
        }).data("kendoConfirm").open().result;
    };

    //#endregion

    //#region Business function

    // Get reviewer data
    var getReviewer = function (options, keyWord) {
        asmNewServices.getAsmReviewers(keyWord).then(function (response) {
            if (response.data != null) {
                options.success(response.data);
            } else {
                options.success([]);
            }
        }, function (error) {
            options.error([]);
            utils.error.showErrorGet(error);
        });
    }

    // Get Area data
    var getArea = function (options) {
        asmNewServices.getAreas().then(function (response) {
            if (response.data != null) {
                options.success(response.data);
            } else {
                options.success([]);
            }
        }, function (error) {
            options.error([]);
            utils.error.showErrorGet(error);
        });
    }

    // Get UnitNo. data
    var getUnitNoByAreaId = function (options, keyWord) {
        asmNewServices.getUnitByArea(keyWord).then(function (response) {
            if (response.data != null) {
                options.success(response.data);
            } else {
                options.success([]);
            }
        }, function (error) {
            options.error([]);
            utils.error.showErrorGet(error);
        });
    }

    // Get TagNo. data
    var getTagNoByUnitId = function (options, keyWord) {
        asmNewServices.getTagNoByUnit(keyWord).then(function (response) {
            if (response.data != null) {
                options.success(response.data);
            } else {
                options.success([]);
            }
        }, function (error) {
            options.error([]);
            utils.error.showErrorGet(error);
        });
    }

    // Get Alarm Type data
    var getType = function (options) {
        asmNewServices.getAlarmTypes().then(function (response) {
            if (response.data != null) {
                options.success(response.data);
            } else {
                options.success([]);
            }
        }, function (error) {
            options.error([]);
            utils.error.showErrorGet(error);
        });
    }

    var bindPreData = function () {

        // On Open Area
        var countAreaClick = 0;
        $scope.onAreaOpen = function () {
            if (countAreaClick == 0) {
                $scope.areasDataSource = {
                    transport: {
                        read: function (options) {
                            getArea(options);

                        }
                    }
                };
                countAreaClick = countAreaClick + 1;
            }
        };

        // On selected Area changed
        $scope.onAreaChange = function () {
            if ($("#asmArea").val() !== "") {
                $scope.unitDataSource = {
                    transport: {
                        read: function (options) {
                            getUnitNoByAreaId(options, $("#asmArea").val());
                        }
                    }
                };
                $scope.tagNoDataSource = null;
            } else {
                $scope.unitDataSource = null;
                $scope.tagNoDataSource = null;
            }
        };

        // On selected Unit changed
        $scope.onUnitChange = function () {
            if ($("#UnitNo").val() !== "") {
                $scope.tagNoDataSource = {
                    transport: {
                        read: function (options) {
                            getTagNoByUnitId(options, $("#UnitNo").val());
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupTagId: { type: "string" },
                                description: { type: "string" }
                            }
                        },
                        data: function (response) {
                            response.push({ lookupTagId: "0", description: "Others" });
                            return response;
                        }
                    }
                };
            } else {
                $scope.tagNoDataSource = null;
            }
        };

        // Bind data to Alarm Classes radio button
        $scope.AlarmClassesDataSource = null;
        asmNewServices.getAlarmClasses().then(function (response) {
            $scope.AlarmClassesDataSource = response.data;
        }, function (error) {
            utils.error.showErrorGet(error);
        });

        // On open type
        $scope.onTypeOpen = function () {
            $scope.alarmTypesDataSource = {
                transport: {
                    read: function (options) {
                        getType(options);
                    }
                },
                schema: {
                    model: {
                        fields: {
                            lookupId: { type: "string" },
                            description: { type: "string" }
                        }
                    },
                    data: function (response) {
                        response.push({ lookupId: "0", description: "Others" });
                        return response;
                    }
                }
            };
        }

        // On selected alarm type changed
        $scope.onSelectedAlarmTypeChange = function () {
            if ($scope.selectedType === "0") {
                $("#otherType").val("");
            }
        };

        // bind data to drop_down list reviewer
        $scope.reviewerSearchText = "";
        $scope.reviewerOptions = {
            autoBind: false,
            optionLabel: "Select Reviewer",
            height: 300,
            filter: "contains",
            filtering: function (e) {
                $scope.reviewerSearchText = e.filter == null ? "" : e.filter.value;
            },
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: function (options) {
                        getReviewer(options, $scope.reviewerSearchText);
                    }
                }
            },
            dataTextField: "userName",
            dataValueField: "userProfileId",
            valueTemplate: function (dataItem) {
                if (!dataItem.hasOwnProperty('image')) {
                    dataItem.image = $scope.selectedReviewer.image;
                }
                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
            },
            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
        };
    };


    // Bind detail data to form
    var bindAsmDetail = function (alarmId) {
        asmNewServices.getAsmDetail(alarmId).then(function (response) {
            if (response.data != null) {
                // Bind area data source
                $scope.areasDataSource = {
                    transport: {
                        read: function (options) {
                            getArea(options);
                        }
                    }
                };

                // On selected Area changed
                $scope.onAreaChange = function () {

                    if ($("#asmArea").val() !== "") {
                        $scope.unitDataSource = {
                            transport: {
                                read: function (options) {
                                    getUnitNoByAreaId(options, $("#asmArea").val());
                                }
                            }
                        };
                        $scope.tagNoDataSource = null;
                    } else {
                        $scope.unitDataSource = null;
                        $scope.tagNoDataSource = null;
                    }
                };

                // Bind unit data source
                $scope.unitDataSource = {
                    transport: {
                        read: function (options) {
                            getUnitNoByAreaId(options, response.data.asmDetail.areaId);
                        }
                    }
                };

                // On selected Unit changed
                $scope.onUnitChange = function () {
                    if ($("#UnitNo").val() !== "") {
                        $scope.tagNoDataSource = {
                            transport: {
                                read: function (options) {
                                    getTagNoByUnitId(options, $("#UnitNo").val());
                                }
                            },
                            schema: {
                                model: {
                                    fields: {
                                        lookupTagId: { type: "string" },
                                        description: { type: "string" }
                                    }
                                },
                                data: function (response) {
                                    response.push({ lookupTagId: "0", description: "Others" });
                                    return response;
                                }
                            }
                        };
                    } else {
                        $scope.tagNoDataSource = null;
                    }
                };

                // Bind tagNo data source
                $scope.tagNoDataSource = {
                    transport: {
                        read: function (options) {
                            getTagNoByUnitId(options, response.data.asmDetail.unitId);
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupTagId: { type: "string" },
                                description: { type: "string" }
                            }
                        },
                        data: function (response) {
                            response.push({ lookupTagId: "0", description: "Others" });
                            return response;
                        }
                    }
                };

                // Bind data to Alarm Classes radio button
                $scope.AlarmClassesDataSource = null;
                asmNewServices.getAlarmClasses().then(function (response) {
                    $scope.AlarmClassesDataSource = response.data;
                }, function (error) {
                    utils.error.showErrorGet(error);
                });

                // Bind data to alarm type
                $scope.alarmTypesDataSource = {
                    transport: {
                        read: function (options) {
                            getType(options);
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupId: { type: "string" },
                                description: { type: "string" }
                            }
                        },
                        data: function (response) {
                            response.push({ lookupId: "0", description: "Others" });
                            return response;
                        }
                    }
                };

                // bind data to drop_down list reviewer
                $scope.reviewerSearchText = "";
                $scope.reviewerOptions = {
                    autoBind: false,
                    optionLabel: "Select Reviewer",
                    height: 300,
                    filter: "contains",
                    filtering: function (e) {
                        $scope.reviewerSearchText = e.filter == null ? "" : e.filter.value;
                    },
                    dataSource: {
                        serverFiltering: true,
                        transport: {
                            read: function (options) {
                                getReviewer(options, $scope.reviewerSearchText);
                            }
                        }
                    },
                    index: 0,

                    dataTextField: "userName",
                    dataValueField: "userProfileId",
                    valueTemplate: function (dataItem) {
                        if (!dataItem.hasOwnProperty('image')) {
                            dataItem.image = $scope.selectedReviewer.image;
                        }
                        return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                    },
                    template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                                '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                };

                $scope.selectedArea = response.data.asmDetail.areaId;
                $scope.selectedAlarmClass = response.data.asmDetail.alarmClassId;
                $scope.selectedUnitNo = response.data.asmDetail.unitId;
                $scope.selectedTagNo = response.data.asmDetail.tagId == null ? "0" : response.data.asmDetail.tagId;
                $scope.selectedType = response.data.asmDetail.typeId == null ? "0" : response.data.asmDetail.typeId;
                $scope.selectedReviewer = response.data.reviewer == null ? "" : response.data.reviewer.userProfileId;
                $scope.model.otherTagNo = response.data.asmDetail.tagId !== null ? "" : response.data.asmDetail.tagNo;
                $scope.model.radio = response.data.asmDetail.radio;
                $scope.model.equipmentNo = response.data.asmDetail.equipmentNo;
                $scope.model.description = response.data.asmDetail.description;
                $scope.model.otherType = response.data.asmDetail.typeId !== null ? "" : response.data.asmDetail.type;
            }
        }, function (err) {
            utils.error.showErrorGet(err);
        });
    }

    //#endregion

    //#region Form event handler

    //#region Redirection

    var goToListPage = function (event) {
        event.preventDefault();
        $state.go(constants.state.asmlist);
    };

    //#endregion

    //#region Validation form

    // Validate form data
    var isValidFormData = function (isSubmit) {
        var isValid;
        if (isSubmit) {
            // Custom validations
            isValid = $(".asm-form").kendoValidator({
                rules: {
                    otherTagNo: function (input) {
                        if (input.is("[name=tagNo]")) {
                            var retVal = true;
                            if ($scope.selectedTagNo === '' || $scope.selectedTagNo == null) {
                                return false;
                            } else if ($scope.selectedTagNo === '0') {
                                retVal = $scope.model.otherTagNo != null & $scope.model.otherTagNo != "";
                            }
                            if (retVal) {
                                $("#TagNo").removeClass("k-invalid");
                            } else {
                                $("#TagNo").addClass("k-invalid");
                                $("#otherTagNo").addClass("k-invalid");
                            }
                            return retVal;
                        }
                        return true;
                    },
                    otherType: function (input) {
                        if (input.is("[name=TypeofAlarm]")) {
                            var retVal = true;
                            if ($scope.selectedType === '' || $scope.selectedType == null) {
                                return false;
                            } else if ($scope.selectedType === '0') {
                                retVal = $scope.model.otherType != null & $scope.model.otherType != "";
                            }
                            if (retVal) {
                                $("#Type").removeClass("k-invalid");
                            } else {
                                $("#Type").addClass("k-invalid");
                                $("#otherType").addClass("k-invalid");
                            }
                            return retVal;
                        }
                        return true;
                    }
                },
                messages: {
                    otherTagNo: "Tag No. is required",
                    otherType: "Type is required"
                }
            }).data("kendoValidator").validate();
        } else {
            isValid = $(".asm-form").kendoValidator({
                rules: {
                    required: serviceHelper.requiredRule,
                    otherTagNo: function (input) {
                        if (input.is("[name=tagNo]")) {
                            var retVal = true;
                            if ($scope.selectedTagNo === '' || $scope.selectedTagNo == null) {
                                return false;
                            } else if ($scope.selectedTagNo === '0') {
                                retVal = $scope.model.otherTagNo != null & $scope.model.otherTagNo != "";
                            }
                            if (retVal) {
                                $("#TagNo").removeClass("k-invalid");
                            } else {
                                $("#TagNo").addClass("k-invalid");
                                $("#otherTagNo").addClass("k-invalid");
                            }
                            return retVal;
                        }
                        return true;
                    }
                },
                messages: {
                    otherTagNo: "Tag No. is required"
                }
            }).data("kendoValidator").validate();
        }

        return isValid;
    }

    //#endregionselectedAlarmClassId

    //#region SaveData action

    // prevent multi click
    $scope.inProgress = false;

    var saveData = function (event, actionType) {
        //prevent multi click
        $scope.inProgress = true;
        event.preventDefault();
        event.stopImmediatePropagation();

        // show loading
        $rootScope.isLoading = true;

        try {
            if (isValidFormData(actionType)) {
                // Get submitted data
                $scope.model.isSubmitAction = actionType;
                $scope.model.areaId = $scope.selectedArea;
                $scope.model.unitId = $scope.selectedUnitNo;
                $scope.model.tagNo = $scope.selectedTagNo === '0' ? '' : $scope.selectedTagNo;
                $scope.model.alarmClass = $scope.selectedAlarmClass;
                $scope.model.type = $scope.selectedType === '0' ? '' : $scope.selectedType;
                $scope.model.reviewerId = $scope.selectedReviewer == null ? null : $scope.selectedReviewer;

                // Send submitted data to server
                switch ($state.current.name) {
                    case constants.state.asmNewState:
                    case constants.state.asmCopy:
                        asmNewServices.creatAsm($scope.model).then(function (response) {
                            $scope.inProgress = false;
                            $rootScope.isLoading = false;
                            if (response.data == true) {
                                $scope.userProfile.mobileNo = $scope.model.mobileNo;
                                $rootScope.$app.userProfile.mobileNo = $scope.model.mobileNo;
                                if (!actionType) {
                                    $scope.dialogOption.title = "Save ASM as Draft";
                                    $scope.dialogOption.content = "This ASM is saved as draft";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                } else {
                                    $scope.dialogOption.title = "Create ASM";
                                    $scope.dialogOption.content = "This ASM is submitted and <strong>pending review</strong>";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                }
                            }
                        }, function (error) {
                            $scope.inProgress = false;
                            $rootScope.isLoading = false;

                            if (!actionType) {
                                $scope.dialogOption.title = "Save ASM as Draft";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            } else {
                                $scope.dialogOption.title = "Create ASM";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            }
                        });
                        break;
                    case constants.state.asmEditDraft:
                        asmNewServices.editAsm($stateParams.alarmId, $scope.model).then(function () {
                            $scope.inProgress = false;
                            $rootScope.isLoading = false;
                            $scope.userProfile.mobileNo = $scope.model.mobileNo;
                            $rootScope.$app.userProfile.mobileNo = $scope.model.mobileNo;
                            if (actionType) {
                                $scope.dialogOption.title = "Submit ASM";
                                $scope.dialogOption.content = "This ASM is submitted and <strong>pending review</strong>";
                            }
                            else {
                                $scope.dialogOption.title = "Save ASM as Draft";
                                $scope.dialogOption.content = "This ASM is saved";
                            }
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.asmlist);
                            });
                        }, function (error) {
                            $scope.inProgress = false;
                            $rootScope.isLoading = false;

                            $scope.dialogOption.title = "Save ASM as Draft";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);

                        });

                        break;

                    default:
                        break;
                }
            } else {
                $scope.inProgress = false;
                $rootScope.isLoading = false;
            }
        } catch (error) {
            utils.error.showErrorGet(error);
            $scope.inProgress = false;
            $rootScope.isLoading = false;
        }
    };

    //#endregion

    //#region cancel alarm

    // prevent multi click
    $scope.inProgress = false;
    var cancelAlarm = function (event) {
        //prevent multi click
        $scope.inProgress = true;
        event.preventDefault();
        event.stopImmediatePropagation();

        try {
            $scope.confirmDialog("Alarm Shelving Cancel", "Are you sure you want to cancel this Alarm Shelving?").then(function () {
                // show loading
                $rootScope.isLoading = true;

                asmWorkflowServices.cancelAsm($stateParams.alarmId).then(function (response) {
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;

                    $scope.dialogOption.title = "Alarm Shelving Canceled";
                    $scope.dialogOption.content = "Alarm Shelving has been canceled successfully";
                    utils.dialog.showDialog($scope.dialogOption, function () {
                        $state.go(constants.state.asmlist);
                    });
                }, function (error) {
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                    $scope.dialogOption.title = "Alarm Shelving Cancel Failed";
                    $scope.dialogOption.content = error.message;
                    utils.dialog.showDialog($scope.dialogOption);
                });
            }, function () {
                $scope.inProgress = false;
            });
        }
        catch (err) {
            utils.error.showErrorGet(err);
            $scope.inProgress = false;
            $rootScope.isLoading = false;
        }

        $scope.inProgress = false;
    };
    //#endregion cancel
    //#endregion Form event handler

    //#region Form initializing

    // Get current logged-in user profile
    $scope.userProfile = $rootScope.$app.userProfile;
    $scope.isAdmin = $scope.userProfile.isAdmin;
    $scope.hasApplicantRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",21,") >= 0;

    var onInitializing = function () {
        $rootScope.bigModule = {
            SCE: false,
            ASM: true
        };
        $rootScope.$app.title = constants.titlePage.asmNew;

        switch ($state.current.name) {
            case constants.state.asmNewState:
                bindPreData();
                $scope.saveFormData = function (event, actionType) {
                    saveData(event, actionType);
                }
                $scope.cancelForm = function (event) {
                    goToListPage(event);
                }
                break;
            case constants.state.asmEditDraft:
                bindAsmDetail($stateParams.alarmId);

                $scope.saveFormData = function (event, actionType) {
                    saveData(event, actionType);
                }
                $scope.cancelForm = function (event) {
                    cancelAlarm(event);
                }
                break;
            case constants.state.asmCopy:
                bindAsmDetail($stateParams.alarmId);

                $scope.saveFormData = function (event, actionType) {
                    saveData(event, actionType);
                }
                $scope.cancelForm = function (event) {
                    goToListPage(event);
                }
                break;
            default:
                break;
        }
    }
    // Calling form initializing
    onInitializing();

    //#endregion

}]);
app.controller('asmPrintController',
    ['$rootScope', '$stateParams', '$scope', 'constants', 'asmWorkflowServices',
function ($rootScope, $stateParams, $scope, constants, asmWorkflowServices) {

    $scope.asmDetail = null;    
    $scope.reAcknowledgeHistoriesLeft = null;
    $scope.reAcknowledgeHistoriesRight = null;
    $scope.reApproveHistoriesLeft = null;
    $scope.reApproveHistoriesRight = null;

    var loadData = function () {
        $rootScope.isLoading = true;
        asmWorkflowServices.getAsmPrintingDetail($stateParams.alarmId).then(function (response) {
            if (response.data != null) {
                $scope.asmDetail = response.data;

                if (response.data.reShelvingHistory != null) {
                    var halfLength = Math.ceil(response.data.reShelvingHistory.length / 2);
                    $scope.reShelvingHistoryLeft = response.data.reShelvingHistory.splice(0, halfLength);
                    $scope.reShelvingHistoryRight = response.data.reShelvingHistory.splice(0, halfLength);
                }

                if (response.data.reApprovalHistory != null) {
                    var halfLength = Math.ceil(response.data.reApprovalHistory.length / 2);
                    $scope.reApproveHistoriesLeft = response.data.reApprovalHistory.splice(0, halfLength);
                    $scope.reApproveHistoriesRight = response.data.reApprovalHistory.splice(0, halfLength);
                }
            }
            $rootScope.isLoading = false;
        }, function (error) {
            utils.error.showErrorGet(error);
            $rootScope.isLoading = false;
        });
    };
    loadData();

}]);
app.controller('asmWorkflowController',
    ['$rootScope', '$window', '$state', '$stateParams', '$scope', '$location', 'authService', 'appSettings', 'constants', 'asmWorkflowServices', 'asmServices', 'asmNewServices', 'serviceHelper',
        function ($rootScope, $window, $state, $stateParams, $scope, $location, authService, appSettings, constants, asmWorkflowServices, asmServices, asmNewServices, serviceHelper) {
            //user Profile
            $scope.alarmId = $stateParams.alarmId;
            $scope.isPic = false;
            $scope.userProfile = $rootScope.$app.userProfile;
            $scope.model = null;
            $scope.panelOperatorRole = "";

            var isProcessTriggerClick = true;
            $scope.alarmModel = {
                radio: null,
                areaId: null,
                unitId: null,
                tagNo: null,
                otherTagNo: null,
                equipmentNo: null,
                alarmClass: null,
                type: null,
                otherType: null,
                description: null,
                reviewerId: null,
                parentAlarm: null,
                isSubmitAction: null
            };
            // check visibility button
            $scope.visibleButton = {
                adminCancelAsm: false,
                //review
                rejectReview: false,
                review: false,
                applicantCancelAsm: false,
                //endorse 
                rejectEndorse: false,
                endorse: false,
                //approve
                rejectApprove: false,
                approve: false,
                //require update by review
                rejectByReviewer: false,
                submitForEndorser: false,
                // require update by applicant
                updateRequireUpdateApplicant: false,
                submitForReview: false,
                //shelving alarm
                shelve: false,
                //request moc
                requestMoc: false,
                close: false,
                //update moc
                updateMoc: false,
                cancelMoc: false,
                //approve moc
                rejectMoc: false,
                approveMoc: false,
                hideCancelShelving: false,
                adminCancelMoc: false,
                applicantCancelMoc: false
            }

            // check userRole, set false is default
            $scope.checkUserRole = {
                asmApplicant: false,
                asmReviewer: false,
                asmEndorser: false,
                asmApprover: false,
                asmShelver: false,
                asmMocApprover: false,
                asmAdmin: false
            };
            // variable to check isApplicant
            $scope.checkIsApplicant = false;
            $scope.checkIsReviewer = false;
            $scope.checkIsEndorser = false;
            $scope.checkIsApprover = false;
            $scope.checkIsShelver = false;
            $scope.checkIsMocApprover = false;
            // check statusTitle
            $scope.checkStatusTitle = {
                PendingReview: false,
                PendingEndorse: false,
                PendingApproval: false,
                RequiresUpdate: false,
                PendingShelving: false,
                Live: false,
                PendingMoc: false,
                PendingMocApproval: false,
                MOCRequireUpdate: false,
                ASMMoc: false,
                ASMCLose: false,
                Draft: false
            }
            $scope.checkStatus = {
                Applicant: false,
                Review: false,
                Endorsement: false,
                Approval: false,
                Shelving: false,
                Live: false,
                MOC: false,
                MOCApproval: false,
            }
            // show section, set false is default
            $scope.showSection = {
                Application: false,
                Review: false,
                Endorsement: false,
                Approval: false,
                Live: false,
                MocApplication: false,
                MocApproval: false,
                MocApplicationUpdate: false,
                Close: false
            };
            $scope.status = "";
            $scope.statusTitle = "";
            // check userRole
            $scope.checkUserRole.asmApplicant = checkUserHasRoleKey($scope.userProfile.rolesKeyString, constants.role.roleKeys.asmApplicant);
            $scope.checkUserRole.asmReviewer = checkUserHasRoleKey($scope.userProfile.rolesKeyString, constants.role.roleKeys.asmReviewer);
            $scope.checkUserRole.asmEndorser = checkUserHasRoleKey($scope.userProfile.rolesKeyString, constants.role.roleKeys.asmEndorser);
            $scope.checkUserRole.asmApprover = checkUserHasRoleKey($scope.userProfile.rolesKeyString, constants.role.roleKeys.asmApprover);
            $scope.checkUserRole.asmShelver = checkUserHasRoleKey($scope.userProfile.rolesKeyString, constants.role.roleKeys.asmShelver);
            $scope.checkUserRole.asmMocApprover = checkUserHasRoleKey($scope.userProfile.rolesKeyString, constants.role.roleKeys.asmMocApprover);
            $scope.checkUserRole.asmAdmin = checkUserHasRoleKey($scope.userProfile.rolesKeyString, constants.role.roleKeys.asmAdmin);
            // end check

            // function check action bar(doing)

            var onLoad = function () {
                $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
            };

            onLoad();

            //get detail of asm
            var getAsmDetail = function () {
                $rootScope.isLoading = true;
                asmWorkflowServices.getAsmDetail($stateParams.alarmId).then(function (response) {
                    $rootScope.isLoading = false;
                    if (response.data !== null && response.data !== undefined) {
                        $scope.model = response.data;

                        if ($scope.model.asmDetail != null) {
                            var checkUserProfile = function (id) {
                                try {
                                    if ($scope.userProfile.userProfileId === id) {
                                        return true;
                                    } else return false;
                                } catch (err) {
                                    return false;
                                }
                            };

                            // add reviewModel attribute
                            $scope.reviewModel.occurence = $scope.model.asmDetail.occurence;
                            $scope.reviewModel.sapNo = $scope.model.asmDetail.sapNo;
                            $scope.reviewModel.faultCondition = $scope.model.asmDetail.faultCondition;
                            $scope.reviewModel.consequences = $scope.model.asmDetail.consequences;
                            $scope.reviewModel.endorser = $scope.model.endorser;
                            $scope.reviewModel.approver = $scope.model.approver;

                            // check role admin to show bar action

                            // check is people in charge

                            if ($scope.model.applicant != null) {
                                $scope.checkIsApplicant =
                                    $scope.userProfile.userProfileId === $scope.model.applicant.userProfileId
                                    ? true
                                    : false;
                            } else {
                                $scope.checkIsApplicant = false;
                            }
                            if ($scope.model.reviewer != null) {
                                $scope.checkIsReviewer =
                                    $scope.userProfile.userProfileId === $scope.model.reviewer.userProfileId
                                    ? true
                                    : false;
                            } else {
                                $scope.checkIsReviewer = false;
                            }
                            if ($scope.model.endorser != null) {
                                $scope.checkIsEndorser =
                                    $scope.userProfile.userProfileId === $scope.model.endorser.userProfileId
                                    ? true
                                    : false;
                            } else {
                                $scope.checkIsEndorser = false;
                            }
                            if ($scope.model.approver != null) {
                                $scope.checkIsApprover =
                                    $scope.userProfile.userProfileId === $scope.model.approver.userProfileId
                                    ? true
                                    : false;
                            } else {
                                $scope.checkIsApprover = false;
                            }
                            if ($scope.model.mocApprover != null) {
                                $scope.checkIsMocApprover =
                                    $scope.userProfile.userProfileId === $scope.model.mocApprover.userProfileId
                                    ? true
                                    : false;
                            } else {
                                $scope.checkIsMocApprover = false;
                            }

                            // check status key
                            switch (response.data.asmDetail.statusKey) {
                                case constants.ASM.statusKey.requiresUpdate:
                                    {
                                        $rootScope.$app.title = "ASM Requires Update ";
                                        $scope.status = "Application";
                                        $scope.statusTitle = "Requires Update";
                                        $scope.checkStatusTitle.RequiresUpdate = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true
                                            });
                                        // require update by applicant
                                        $scope.isPic = ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant);
                                        $scope.panelOperatorRole = "Applicant";
                                        angular.merge($scope.visibleButton,
                                            {
                                                updateRequireUpdateApplicant: $scope.checkIsApplicant &&
                                                    $scope.checkUserRole.asmApplicant,
                                                submitForReview: $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant,
                                                applicantCancelAsm: ($scope.checkIsApplicant &&
                                                    $scope.checkUserRole.asmApplicant),
                                                adminCancelAsm: $scope.checkUserRole.asmAdmin
                                            });
                                        if ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant) {
                                            //bind data to asm_form
                                            bindAsmDetail(response);
                                        } else {
                                            break;
                                        }
                                        break;
                                    }
                                case constants.ASM.statusKey.pendingReview:
                                    {
                                        $scope.status = "Review";
                                        if ($scope.model.asmDetail.isRequiredUpdate === true) {
                                            $scope.checkStatusTitle.RequiresUpdate = true;
                                            $scope.statusTitle = "Requires Update";
                                            $rootScope.$app.title = "ASM Requires Update";
                                            angular.merge($scope.showSection,
                                                {
                                                    Application: true,
                                                    Review: true
                                                });
                                        } else {
                                            $scope.checkStatusTitle.PendingReview = true;
                                            $scope.statusTitle = "Pending Review";
                                            $rootScope.$app.title = "ASM Pending Review";
                                            angular.merge($scope.showSection,
                                                {
                                                    Application: true
                                                });
                                        }
                                        $scope.isPic = ($scope.checkIsReviewer && $scope.checkUserRole.asmReviewer) ||
                                            ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant);
                                        $scope.panelOperatorRole =
                                            ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant)
                                            ? "Applicant"
                                            : "Reviewer";
                                        angular.merge($scope.visibleButton,
                                            {
                                                applicantCancelAsm: ($scope.checkIsApplicant &&
                                                    $scope.checkUserRole.asmApplicant),
                                                rejectByReviewer: $scope.checkStatusTitle.RequiresUpdate &&
                                                    ($scope.checkIsReviewer && $scope.checkUserRole.asmReviewer),
                                                submitForEndorser: $scope.checkStatusTitle.RequiresUpdate &&
                                                    ($scope.checkIsReviewer && $scope.checkUserRole.asmReviewer),
                                                rejectReview: $scope.checkStatusTitle.PendingReview &&
                                                    ($scope.checkIsReviewer && $scope.checkUserRole.asmReviewer),
                                                review: $scope.checkStatusTitle.PendingReview &&
                                                    ($scope.checkIsReviewer && $scope.checkUserRole.asmReviewer),
                                                adminCancelAsm: $scope.checkUserRole.asmAdmin
                                            });
                                        break;
                                    }
                                case constants.ASM.statusKey.pendingEndorse:
                                    {
                                        $rootScope.$app.title = "ASM Pending Endorsement ";
                                        $scope.status = "Endorsement";
                                        $scope.statusTitle = "Pending Endorse";
                                        $scope.checkStatusTitle.PendingEndorse = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true,
                                                Review: true
                                            });
                                        $scope.isPic = ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant) ||
                                            ($scope.checkIsEndorser && $scope.checkUserRole.asmEndorser);
                                        $scope.panelOperatorRole =
                                            ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant)
                                            ? "Applicant"
                                            : "Endorser";
                                        angular.merge($scope.visibleButton,
                                            {
                                                applicantCancelAsm: ($scope.checkIsApplicant &&
                                                    $scope.checkUserRole.asmApplicant),
                                                endorse: $scope.checkIsEndorser && $scope.checkUserRole.asmEndorser,
                                                rejectEndorse: $scope.checkIsEndorser && $scope.checkUserRole.asmEndorser,
                                                adminCancelAsm: $scope.checkUserRole.asmAdmin
                                            });
                                        break;
                                    }
                                case constants.ASM.statusKey.pendingApproval:
                                    {
                                        $rootScope.$app.title = "ASM Pending Approval ";
                                        $scope.status = "Approval";
                                        $scope.statusTitle = "Pending Approval";
                                        $scope.checkStatusTitle.PendingApproval = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true,
                                                Review: true,
                                                Endorsement: true
                                            });
                                        $scope.isPic = ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant) ||
                                            ($scope.checkIsApprover && $scope.checkUserRole.asmApprover);
                                        $scope.panelOperatorRole =
                                            ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant)
                                            ? "Applicant"
                                            : "Approver";
                                        angular.merge($scope.visibleButton,
                                            {
                                                applicantCancelAsm: ($scope.checkIsApplicant &&
                                                    $scope.checkUserRole.asmApplicant),
                                                approve: $scope.checkIsApprover && $scope.checkUserRole.asmApprover,
                                                rejectApprove: $scope.checkIsApprover && $scope.checkUserRole.asmApprover,
                                                adminCancelAsm: $scope.checkUserRole.asmAdmin
                                            });
                                        break;
                                    }
                                case constants.ASM.statusKey.pendingShelving:
                                    {
                                        $rootScope.$app.title = "ASM Pending Shelving ";
                                        $scope.status = "Shelving";
                                        $scope.statusTitle = "Pending Shelving";
                                        $scope.checkStatusTitle.PendingShelving = true;
                                        $scope.visibleButton.hideCancelShelving = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true,
                                                Review: true,
                                                Endorsement: true,
                                                Approval: true
                                            });
                                        // check whether user is Shelver or Applicant       
                                        $scope.isPic = ($scope.model.isShelver && $scope.checkUserRole.asmShelver) ||
                                            ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant);
                                        $scope.panelOperatorRole =
                                            ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant)
                                            ? "Applicant"
                                            : "Shelver";
                                        angular.merge($scope.visibleButton,
                                            {
                                                shelve: $scope.model.isShelver ||
                                                ($scope.userProfile.userProfileId ==
                                                    $scope.model.asmDetail.applicantProfileId),
                                                close: $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant
                                            });
                                        break;
                                    }

                                    //case constants.ASM.statusKey.pendingReShelving:
                                    //    {
                                    //        $rootScope.$app.title = "Pending Re-Shelving ";
                                    //        $scope.status = "Pending Re-Shelving";
                                    //        angular.merge($scope.checkStatus, {
                                    //            PendingReShelving: true
                                    //        });
                                    //        $scope.statusTitle = "Pending Re-Shelving";
                                    //        $scope.checkStatusTitle.PendingReShelving = true;
                                    //        $scope.visibleButton.hideCancelShelving = true;
                                    //        angular.merge($scope.showSection, {
                                    //            Application: true,
                                    //            Review: true,
                                    //            Endorsement: true,
                                    //            Approval: true,
                                    //            Shelving: true,
                                    //            Live: true
                                    //        });
                                    //        if ($scope.userProfile.userProfileId == $scope.model.applicant.userProfileId) {
                                    //            $scope.checkIsApplicant = true;
                                    //        }
                                    //        if ($scope.userProfile.userProfileId == $scope.model.reviewer.userProfileId) {
                                    //            $scope.checkIsReviewer = true;
                                    //        }
                                    //        if ($scope.userProfile.userProfileId == $scope.model.endorser.userProfileId) {
                                    //            $scope.checkIsEndorser = true;
                                    //        }
                                    //        if ($scope.userProfile.userProfileId == $scope.model.approver.userProfileId) {
                                    //            $scope.checkIsApprover = true;
                                    //        }
                                    //        if ($scope.model.isShelver) {
                                    //            $scope.checkIsShelver = true;
                                    //        }
                                    //        // check whether user is Shelver or Applicant                                 
                                    //        $scope.isPic = $scope.model.isShelver || ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant);
                                    //        break;
                                    //    }

                                case constants.ASM.statusKey.live:
                                    {
                                        $rootScope.$app.title = "ASM Live ";
                                        $scope.status =
                                            (response.data.asmDetail.isPendingReShelving == false &&
                                                response.data.asmDetail.isPendingReApproval == false)
                                            ? "NoReShelvingOrReApproval"
                                            : "Live";
                                        $scope.statusTitle = "Live";
                                        $scope.checkStatusTitle.Live = true;
                                        $scope.visibleButton.hideCancelShelving = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true,
                                                Review: true,
                                                Endorsement: true,
                                                Approval: true,
                                                Live: true
                                            });
                                        $scope.isPic = $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant;
                                        $scope.panelOperatorRole = "Applicant";
                                        angular.merge($scope.visibleButton,
                                            {
                                                close: $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant
                                            });
                                        break;
                                    }
                                case constants.ASM.statusKey.pendingMoc:
                                    {
                                        $rootScope.$app.title = "ASM Pending MOC ";
                                        $scope.status = "MOC";
                                        $scope.statusTitle = "Pending MOC";
                                        $scope.checkStatusTitle.PendingMoc = true;
                                        $scope.visibleButton.hideCancelShelving = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true,
                                                Review: true,
                                                Endorsement: true,
                                                Approval: true,
                                                Live: true
                                            });
                                        $scope.isPic = $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant;
                                        $scope.panelOperatorRole = "Applicant";
                                        angular.merge($scope.visibleButton,
                                            {
                                                close: $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant,
                                                requestMoc: $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant,

                                            });
                                        break;
                                    }
                                case constants.ASM.statusKey.pendingMocApproval:
                                    {
                                        $rootScope.$app.title = "ASM Pending MOC Approval ";
                                        $scope.status = "MOC Approval";
                                        $scope.statusTitle = "Pending MOC Approval";
                                        $scope.checkStatusTitle.PendingMocApproval = true;
                                        $scope.visibleButton.hideCancelShelving = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true,
                                                Review: true,
                                                Endorsement: true,
                                                Approval: true,
                                                Live: true,
                                                MocApplication: true
                                            });
                                        $scope.isPic = ($scope.checkIsMocApprover && $scope.checkUserRole.asmMocApprover) ||
                                            ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant);
                                        $scope.panelOperatorRole =
                                            ($scope.checkIsApplicant && $scope.checkUserRole.asmApplicant)
                                            ? "Applicant"
                                            : "MocApprover";
                                        angular.merge($scope.visibleButton,
                                            {
                                                rejectMoc: $scope.checkIsMocApprover && $scope.checkUserRole.asmMocApprover,
                                                approveMoc: $scope.checkIsMocApprover && $scope.checkUserRole.asmMocApprover,
                                                adminCancelMoc: $scope.checkUserRole.asmAdmin,
                                                applicantCancelMoc: ($scope.checkIsApplicant &&
                                                    $scope.checkUserRole.asmApplicant)
                                            });
                                        break;
                                    }
                                case constants.ASM.statusKey.requireMocUpdate:
                                    {
                                        $scope.status = "MOC";
                                        $rootScope.$app.title = "MOC Requires Update ";
                                        $scope.statusTitle = "MOC Requires Update";
                                        $scope.checkStatusTitle.MOCRequireUpdate = true;
                                        $scope.visibleButton.hideCancelShelving = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true,
                                                Review: true,
                                                Endorsement: true,
                                                Approval: true,
                                                Live: true,
                                                MocApplicationUpdate: true
                                            });
                                        $scope.isPic = $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant;
                                        $scope.panelOperatorRole = "Applicant";
                                        angular.merge($scope.visibleButton,
                                            {
                                                updateMoc: $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant,
                                                adminCancelMoc: $scope.checkUserRole.asmAdmin,
                                                applicantCancelMoc: ($scope.checkIsApplicant &&
                                                    $scope.checkUserRole.asmApplicant)
                                            });
                                        break;
                                    }
                                case constants.ASM.statusKey.moc:
                                    {
                                        $rootScope.$app.title = "ASM MOC";
                                        $scope.status = "finish";
                                        $scope.statusTitle = "ASM MOC";
                                        $scope.checkStatusTitle.ASMMoc = true;
                                        $scope.visibleButton.hideCancelShelving = true;
                                        angular.merge($scope.showSection,
                                            {
                                                Application: true,
                                                Review: true,
                                                Endorsement: true,
                                                Approval: true,
                                                Live: true,
                                                MocApplication: true,
                                                MocApproval: true
                                            });
                                        $scope.isPic = $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant;
                                        $scope.panelOperatorRole = "Applicant";
                                        angular.merge($scope.visibleButton,
                                            {
                                                close: $scope.checkIsApplicant && $scope.checkUserRole.asmApplicant,
                                            });
                                        break;
                                    }
                                case constants.ASM.statusKey.closed:
                                    {
                                        $rootScope.$app.title = "Closed";
                                        if (response.data.mocApprover == null && response.data.shelver == null) {
                                            $scope.status = "ApprovalClose";
                                            $scope.statusTitle = "Closed";
                                            $scope.checkStatusTitle.Closed = true;
                                            $scope.visibleButton.hideCancelShelving = true;
                                            $scope.isPic = false;
                                            angular.merge($scope.showSection,
                                                {
                                                    Application: true,
                                                    Review: true,
                                                    Endorsement: true,
                                                    Approval: true,
                                                    Close: true
                                                });
                                        }
                                        else if (response.data.mocApprover == null && response.data.shelver != null) {
                                            $scope.status = "NoReShelvingOrReApproval";
                                            $scope.statusTitle = "Closed";
                                            $scope.checkStatusTitle.Closed = true;
                                            $scope.visibleButton.hideCancelShelving = true;
                                            $scope.isPic = false;
                                            angular.merge($scope.showSection,
                                                {
                                                    Application: true,
                                                    Review: true,
                                                    Endorsement: true,
                                                    Approval: true,
                                                    Live: true,
                                                    Close: true
                                                });
                                        }
                                            //else if (response.data.mocApprover.userName != null &&
                                            //    response.data.asmDetail.mocApproveDate == null) {
                                            //    $scope.status = "NoReShelvingOrReApproval";
                                            //    $scope.statusTitle = "Closed";
                                            //    $scope.checkStatusTitle.Closed = true;
                                            //    $scope.visibleButton.hideCancelShelving = true;
                                            //    $scope.isPic = false;
                                            //    angular.merge($scope.showSection,
                                            //        {
                                            //            Application: true,
                                            //            Review: true,
                                            //            Endorsement: true,
                                            //            Approval: true,
                                            //            Live: true,
                                            //            MocApplication: true
                                            //        });
                                            //}
                                        else {
                                            $scope.status = "finish";
                                            $scope.statusTitle = "Closed";
                                            $scope.checkStatusTitle.Closed = true;
                                            $scope.visibleButton.hideCancelShelving = true;
                                            $scope.isPic = false;
                                            angular.merge($scope.showSection,
                                                {
                                                    Application: true,
                                                    Review: true,
                                                    Endorsement: true,
                                                    Approval: true,
                                                    Live: true,
                                                    MocApplication: true,
                                                    MocApproval: true,
                                                    Close: true
                                                });
                                        }

                                        break;
                                    }
                                default:
                                    break;
                            }
                        } else {
                            var option = {
                                id: "dialogInfo",
                                title: "This Alarm is canceled.",
                                lableClose: "Back to list",
                                content: response.message,
                                width: 500
                            };
                            utils.dialog.showDialog(option, function () {
                                $state.go(constants.state.asmlist);
                            });
                        }

                    } else {
                        var option = {
                            id: "dialogInfo",
                            title: "Data Not Found",
                            lableClose: "Back to list",
                            content: response.message,
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.asmlist);
                        });
                    }
                }, function (err) {
                    $rootScope.isLoading = false;
                    utils.error.showErrorGet(err);
                });

            }

            getAsmDetail();

            //#region Bind endorser
            $scope.endorseDatasource = {
                serverFiltering: true,
                transport: {
                    read: function (options) {
                        asmWorkflowServices.getEndorsers($scope.endorserSearchText).then(function (response) {
                            if (response.data != null) {
                                options.success(response.data);
                            } else {
                                options.success([]);
                            }
                        }, function (error) {
                            options.error([]);
                            utils.error.showErrorGet(error);
                        });
                    }
                }
            };

            $scope.endorserSearchText = "";

            $scope.endorserOptions = {
                autoBind: false,
                height: 300,
                filter: "contains",
                filtering: function (e) {
                    $scope.endorserSearchText = e.filter == null ? "" : e.filter.value;
                },
                //optionLabel: "Select Endorser",
                dataSource: $scope.endorseDatasource,
                dataTextField: "userName",
                dataValueField: "userProfileId",
                valueTemplate: function (dataItem) {
                    if (!dataItem.hasOwnProperty('image')) {
                        if ($scope.reviewModel.endorser == "") {
                            dataItem.image = '';
                        } else {
                            dataItem.image = $scope.reviewModel.endorser.image;
                        }
                    }
                    return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                },
                template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
            };
            //#endregion

            //#region Bind approver
            $scope.approverDatasource = {
                serverFiltering: true,
                transport: {
                    read: function (options) {
                        asmWorkflowServices.getApprovers($scope.approverSearchText).then(function (response) {
                            if (response.data != null) {
                                options.success(response.data);
                            } else {
                                options.success([]);
                            }
                        }, function (error) {
                            options.error([]);
                            utils.error.showErrorGet(error);
                        });
                    }
                }
            };
            $scope.copyAlarm = function () {
                $state.go(constants.state.asmCopy, { alarmId: $stateParams.alarmId });
            }

            $scope.asmPrint = function () {
                window.open('/print/asm/' + $stateParams.alarmId, '_blank');
            };


            $scope.statusLog = function () {
                $state.go(constants.state.asmStatusLog, { alarmId: $stateParams.alarmId });
            }

            $scope.approverSearchText = "";

            $scope.approverOptions = {
                autoBind: false,
                height: 300,
                filter: "contains",
                filtering: function (e) {
                    $scope.approverSearchText = e.filter == null ? "" : e.filter.value;
                },
                dataSource: $scope.approverDatasource,
                dataTextField: "userName",
                dataValueField: "userProfileId",
                valueTemplate: function (dataItem) {
                    if (!dataItem.hasOwnProperty('image')) {
                        if ($scope.reviewModel.endorser != "") {
                            dataItem.image = $scope.reviewModel.approver.image;
                        } else {
                            dataItem.image = '';
                        }
                    }
                    return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                },
                template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
            };
            //#endregion

            //#region Review form

            $scope.reviewModel = {
                comment: "",
                occurence: "",
                sapNo: "",
                faultCondition: "",
                consequences: "",
                endorser: "",
                approver: "",
                action: "",
                isRequiredUpdate: ""
            };


            $scope.review = function () {
                // show loading
                $rootScope.isLoading = true;

                try {
                    if ($scope.userProfile.userProfileId == $scope.model.reviewer.userProfileId) {
                        $scope.reviewModel.isRequiredUpdate = $scope.model.asmDetail.isRequiredUpdate;
                        if ($scope.reviewModel.action == 'reject') {
                            $scope.reviewModel.consequences = "";
                            $scope.reviewModel.occurence = "";
                            $scope.reviewModel.sapNo = "";
                            $scope.reviewModel.faultCondition = "";
                            $scope.reviewModel.consequences = "";
                            $scope.reviewModel.endorser = null;
                            $scope.reviewModel.approver = null;
                        } else {
                            $scope.reviewModel.endorser = $scope.reviewModel.endorser.userProfileId;
                            $scope.reviewModel.approver = $scope.reviewModel.approver.userProfileId;
                        }

                        asmWorkflowServices.reviewAsm($stateParams.alarmId, $scope.reviewModel).then(function (response) {
                            $rootScope.isLoading = false;
                            if (response.data !== null || response.data !== undefined) {
                                switch ($scope.reviewModel.action) {
                                    case 'approve':
                                        $scope.dialogOption.title = "Shelving Reviewed";
                                        $scope.dialogOption.content = "This Shelving is reviewed and <strong>pending endorsement</strong>";
                                        utils.dialog.showDialog($scope.dialogOption, function () {
                                            $state.go(constants.state.asmlist);
                                        });
                                        break;
                                    case 'reject':
                                        $scope.dialogOption.title = "Shelving Rejected";
                                        $scope.dialogOption.content = "This Shelving is not reviewed and <strong>requires update</strong> from the applicant";
                                        utils.dialog.showDialog($scope.dialogOption, function () {
                                            $state.go(constants.state.asmlist);
                                        });
                                        break;
                                    case 'update':
                                        $scope.dialogOption.title = "Shelving Review Updated";
                                        $scope.dialogOption.content = "This Shelving Review is saved";
                                        utils.dialog.showDialog($scope.dialogOption, function () {
                                            $state.go(constants.state.asmlist);
                                        });
                                        break;
                                }
                            } else {
                                //TODO
                            }
                        }, function (error) {
                            $rootScope.isLoading = false;
                            switch ($scope.reviewModel.action) {
                                case 'approve':
                                    $scope.dialogOption.title = "Shelving Review Failed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                                case 'reject':
                                    $scope.dialogOption.title = "Shelving Not Reviewed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                                case 'update':
                                    $scope.dialogOption.title = "Shelving Save Failed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                            }
                        });
                    } else {
                        $rootScope.isLoading = false;

                        $scope.dialogOption.title = "Access Denied";
                        $scope.dialogOption.content = "You don't have any permission to do this action.";
                        utils.dialog.showDialog($scope.dialogOption);
                    }
                } catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
            };

            $scope.reviewActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: "APPROVE",
                    action: function () {
                        $scope.reviewModel.comment = $scope.approveComment;
                        $scope.reviewModel.action = 'approve';
                        if ($scope.validators.approveReview.validate()) {
                            $scope.review();
                            return true;
                        }
                        // Returning false will prevent the closing of the dialog
                        return false;
                    },
                    primary: true
                }];

            $scope.updateReviewActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'UPDATE',
                    action: function () {
                        $scope.reviewModel.action = 'update';
                        if ($scope.validators.updateRequireReview.validate()) {
                            $scope.review();
                            return true;
                        }
                        // Returning false will prevent the closing of the dialog
                        return false;
                    },
                    primary: true
                }
            ];

            $scope.rejectReviewActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'REJECT',
                    action: function () {
                        $scope.reviewModel.comment = $scope.rejectComment;
                        $scope.reviewModel.action = 'reject';
                        if ($scope.validators.rejectReview.validate()) {
                            $scope.review();
                            return true;
                        }
                        // Returning false will prevent the closing of the dialog
                        return false;
                    },
                    primary: true
                }
            ];

            $scope.submitForEndorsementActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'SUBMIT',
                    action: function () {
                        $scope.reviewModel.action = 'approve';
                        if ($scope.validators.submitUpdateRevew.validate()) {
                            $scope.review();
                            return true;
                        }
                        // Returning false will prevent the closing of the dialog
                        return false;
                    },
                    primary: true
                }];
            //#endregion

            //#region Endorse form

            $scope.endorseModel = {
                comment: "",
                precautionsByEndorser: "",
                action: ""
            };

            $scope.endorse = function () {
                // show loading
                $rootScope.isLoading = true;

                try {
                    if ($scope.userProfile.userProfileId == $scope.model.endorser.userProfileId) {
                        asmWorkflowServices.endorseAsm($stateParams.alarmId, $scope.endorseModel).then(function (response) {
                            $rootScope.isLoading = false;
                            switch ($scope.endorseModel.action) {
                                case 'approve':
                                    $scope.dialogOption.title = "Shelving Endorsed";
                                    $scope.dialogOption.content = "This Shelving is endorsed and <strong>pending approval</strong>";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                    break;
                                case 'reject':
                                    $scope.dialogOption.title = "Shelving Rejected";
                                    $scope.dialogOption.content = "This Shelving is not endorsed and <strong>requires update</strong> from the reviewer";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                    break;
                            }
                        }, function (error) {
                            $rootScope.isLoading = false;
                            switch ($scope.endorseModel.action) {
                                case 'approve':
                                    $scope.dialogOption.title = "Shelving Endorsed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                                case 'reject':
                                    $scope.dialogOption.title = "Shelving Not Endorsed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                            }
                        });
                    } else {
                        $rootScope.isLoading = false;

                        $scope.dialogOption.title = "Access Denied";
                        $scope.dialogOption.content = "You don't have any permission to do this action.";
                        utils.dialog.showDialog($scope.dialogOption);
                    }
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
            };

            $scope.endorseActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'ENDORSE',
                    action: function () {
                        $scope.endorseModel.comment = $scope.approveComment;
                        $scope.endorseModel.action = 'approve';
                        if ($scope.validators.approveEndorse.validate()) {
                            $scope.endorse();
                            return true;
                        }
                        return false;
                    },
                    primary: true
                }
            ];

            $scope.rejectEndorseActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'REJECT',
                    action: function () {
                        $scope.endorseModel.comment = $scope.rejectComment;
                        $scope.endorseModel.action = 'reject';
                        if ($scope.validators.rejectEndorse.validate()) {
                            $scope.endorse();
                            return true;
                        }
                        return false;
                    },
                    primary: true
                }
            ];

            //#endregion

            //#region Approve form

            $scope.approveModel = {
                comment: "",
                precautionsByApprover: "",
                action: "",
                isReApprove: false
            };
            $scope.approveComment = "";
            $scope.approve = function () {
                // show loading
                $rootScope.isLoading = true;

                try {
                    if ($scope.userProfile.userProfileId == $scope.model.approver.userProfileId) {
                        asmWorkflowServices.approveAsm($stateParams.alarmId, $scope.approveModel).then(function (response) {
                            $rootScope.isLoading = false;
                            switch ($scope.approveModel.action) {
                                case 'approve':
                                    $scope.dialogOption.title = "Shelving Approved";
                                    $scope.dialogOption.content = "This Shelving is approved and <strong>pending shelving</strong>.";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                    break;
                                case 'reject':
                                    $scope.dialogOption.title = "Shelving Rejected";
                                    $scope.dialogOption.content = "This Shelving is not approved and <strong>requires update</strong> from the reviewer";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                    break;
                            }
                        }, function (error) {
                            $rootScope.isLoading = false;
                            switch ($scope.approveModel.action) {
                                case 'approve':
                                    $scope.dialogOption.title = "Shelving Approve Failed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                                case 'reject':
                                    $scope.dialogOption.title = "Shelving Reject Failed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                            }
                        });
                    } else {
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "Access Denied";
                        $scope.dialogOption.content = "You don't have any permission to do this action.";
                        utils.dialog.showDialog($scope.dialogOption);
                    }
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
            };

            $scope.approveActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'APPROVE',
                    action: function () {
                        $scope.approveModel.comment = $scope.approveComment;
                        $scope.approveModel.action = 'approve';
                        if ($scope.validators.approve.validate()) {
                            $scope.approve();
                            return true;
                        }
                        // Returning false will prevent the closing of the dialog
                        return false;
                    },
                    primary: true
                }
            ];

            $scope.rejectApproveActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'REJECT',
                    action: function () {
                        $scope.approveModel.comment = $scope.rejectComment;
                        $scope.approveModel.action = 'reject';
                        if ($scope.validators.rejectApprove.validate()) {
                            $scope.approve();
                            return true;
                        }
                        return false;
                    },
                    primary: true
                }
            ];

            //#endregion

            //#region Transfer Roles
            $scope.pendingReview = false;
            $scope.pendingEndorse = false;
            $scope.pendingApprove = false;

            $scope.applicantIsTransfered = false;
            $scope.reviewerIsTransfered = false;
            $scope.endorserIsTransfered = false;
            $scope.approverIsTransfered = false;

            $scope.applicantToTransfer = {
            };

            $scope.applicantSearchText2 = "";

            $scope.applicantsOptions = {
                autoBind: false,
                optionLabel: "Select Applicant",
                filter: "contains",
                filtering: function (e) {
                    $scope.applicantSearchText2 = e.filter == null ? "" : e.filter.value;
                },
                dataSource: $scope.applicantDataSource,
                dataTextField: "userName",
                dataValueField: "userProfileId",
                valueTemplate: function (dataItem) {
                    if (!dataItem.hasOwnProperty('image')) {
                        dataItem.image = $scope.applicantToTransfer.image;
                    }
                    return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                },
                template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
            };


            $scope.applicantDataSource = {
                serverFiltering: true,
                transport: {
                    read: function (options) {
                        asmWorkflowServices.getApplicantsForTransferInSameAreas($stateParams.alarmId, $scope.applicantSearchText2).then(function (response) {
                            if (response.data != null) {
                                options.success(response.data);
                            } else {
                                options.success([]);
                            }
                        }, function (err) {
                            options.error([]);
                            utils.error.showErrorGet(err);
                        });
                    }
                }
            };

            $scope.showTransferRolesKendoDiaglog = function () {
                $scope.applicantToTransfer = $scope.model.applicant;
                $scope.reviewerToTransfer = $scope.model.reviewer;
                $scope.endorserToTransfer = $scope.model.endorser;
                $scope.approverToTransfer = $scope.model.approver;
                $("#asmTransferRoles").data("kendoDialog").open();
            };

            $scope.transferResultActions = [{
                text: 'CLOSE',
                action: function () {
                    $state.go(constants.state.asmlist);
                }
            }];

            $scope.transferRolesModel = {
            };

            $scope.adminComment = "";

            $scope.asmTransferRoles = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'CONFIRM',
                    action: function () {
                        if ($scope.validators.asmTransfer.validate()) {
                            $rootScope.isLoading = true;
                            $scope.transferRolesModel = {
                                applicantProfileId: ($scope.applicantToTransfer.userProfileId === null || $scope.applicantToTransfer.userProfileId === undefined || $scope.applicantToTransfer.userProfileId === "" || $scope.applicantToTransfer.userProfileId === undefined) ? null : $scope.applicantToTransfer.userProfileId,
                                reviewerProfileId: ($scope.pendingReview && $scope.reviewerToTransfer.userProfileId !== $scope.model.reviewer.userProfileId && $scope.reviewerToTransfer.userProfileId !== "") ? $scope.reviewerToTransfer.userProfileId : null,
                                endorserProfileId: ($scope.pendingEndorse && $scope.endorserToTransfer.userProfileId !== $scope.model.endorser.userProfileId && $scope.endorserToTransfer.userProfileId !== "") ? $scope.endorserToTransfer.userProfileId : null,
                                approverProfileId: ($scope.pendingApprove && $scope.approverToTransfer.userProfileId !== $scope.model.approver.userProfileId && $scope.approverToTransfer.userProfileId !== "") ? $scope.approverToTransfer.userProfileId : null,
                                comment: $scope.adminComment
                            };
                            if (($scope.transferRolesModel.applicantProfileId === null || $scope.transferRolesModel.applicantProfileId === undefined) && ($scope.transferRolesModel.reviewerProfileId === null || $scope.transferRolesModel.reviewerProfileId === undefined) && ($scope.transferRolesModel.endorserProfileId === null || $scope.transferRolesModel.endorserProfileId === undefined) && ($scope.transferRolesModel.approverProfileId === null || $scope.transferRolesModel.approverProfileId === undefined)) {
                                $rootScope.isLoading = false;
                                return true;
                            }

                            asmWorkflowServices.transferRoles($stateParams.alarmId, $scope.transferRolesModel).then(function (response) {
                                if ($scope.transferRolesModel.applicantProfileId != null && $scope.transferRolesModel.applicantProfileId != $scope.model.applicant.userProfileId) {
                                    $scope.applicantIsTransfered = true;
                                }
                                if ($scope.transferRolesModel.reviewerProfileId != null && $scope.transferRolesModel.reviewerProfileId != $scope.model.reviewer.userProfileId) {
                                    $scope.reviewerIsTransfered = true;
                                }
                                if ($scope.transferRolesModel.endorserProfileId != null && $scope.transferRolesModel.endorserProfileId != $scope.model.endorser.userProfileId) {
                                    $scope.endorserIsTransfered = true;
                                }
                                if ($scope.transferRolesModel.approverProfileId != null && $scope.transferRolesModel.approverProfileId != $scope.model.approver.userProfileId) {
                                    $scope.approverIsTransfered = true;
                                }
                                $rootScope.isLoading = false;
                                if ($scope.applicantIsTransfered || $scope.reviewerIsTransfered || $scope.endorserIsTransfered || $scope.approverIsTransfered) {
                                    $("#transferResultForm").data("kendoDialog").open();
                                } else {
                                    return true;
                                }
                            }, function (err) {
                                $rootScope.isLoading = false;
                                $scope.dialogOption.title = "ASM Roles transferred failed.";
                                $scope.dialogOption.content = err.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            });

                            return true;
                        }
                        return false;
                    },
                    primary: true
                }
            ];

            $scope.transferResultActions = [{
                text: 'CLOSE',
                action: function () {
                    $state.go(constants.state.asmlist);
                }
            }];
            //#endregion

            //#region Transfer ASM
            $scope.transferAsmModel = {
                newApplicantId: "",
                comment: ""
            };

            $scope.transferAsmAction = [{
                text: 'CANCEL'
            },
            {
                text: 'TRANSFER',
                action: function () {
                    // show loading
                    $rootScope.isLoading = true;

                    try {
                        if ($scope.userProfile.userProfileId == $scope.model.applicant.userProfileId) {
                            asmWorkflowServices.transferAsm($stateParams.asmId, $scope.transferAsmModel).then(function (response) {
                                $rootScope.isLoading = false;
                                $scope.dialogOption.title = "ASM Transferred";
                                $scope.dialogOption.content = "This ASM is now transferred to <strong>" + response.data + "</strong>. A notification has been sent to alert the new applicant.";
                                utils.dialog.showDialog($scope.dialogOption, function () {
                                    $state.go(constants.state.asmlist);
                                });
                            }, function (error) {
                                $scope.dialogOption.title = "ASM Transfer Failed";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            });
                        } else {
                            $rootScope.isLoading = false;
                            $scope.dialogOption.title = "Access Denied";
                            $scope.dialogOption.content = "You don't have any permission to do this action.";
                            utils.dialog.showDialog($scope.dialogOption);
                        }
                        // Returning false will prevent the closing of the dialog
                        return true;
                    } catch (err) {
                        utils.error.showErrorGet(err);
                        $rootScope.isLoading = false;
                    }
                },
                primary: true
            }];
            //#endregion
            // Pop up internal kendo
            $scope.confirmDialog = function (title, content) {
                return $("<div></div>").kendoConfirm({
                    title: title,
                    content: content
                }).data("kendoConfirm").open().result;
            };

            $scope.dialogOption = {
                id: "dialogInfo",
                title: "",
                lableClose: "CLOSE",
                content: "",
                width: 300
            };

            //#region Submit MOC
            $scope.submitMOCModel = {
                allowByPassViaMOC: true,
                mocNo: "",
                mocMeetingDate: "",
                mocApprovedBy: ""
            };
            //initializing preData
            $scope.selectedMocApprover = "";
            $scope.mocApproverSearchText = "";

            // get MOC approver
            $scope.mocApproverDataSource = {
                serverFiltering: true,
                transport: {
                    read: function (options) {
                        asmWorkflowServices.getMocApprovers($scope.mocApproverSearchText).then(function (response) {
                            if (response.data !== null && response.data !== undefined) {
                                options.success(response.data);
                            } else {
                                options.success([]);
                            }
                        }, function (err) {
                            options.error([]);
                            utils.error.showErrorGet(err);
                        });
                    }
                }
            };

            $scope.mocApproversOptions = {
                autoBind: false,
                optionLabel: "Select MOC Approver",
                filter: "contains",
                filtering: function (e) {
                    $scope.mocApproverSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                },
                dataSource: $scope.mocApproverDataSource,
                dataTextField: "userName",
                dataValueField: "userProfileId",
                valueTemplate: function (dataItem) {
                    if (!dataItem.hasOwnProperty('image')) {
                        dataItem.image = $scope.selectedMocApprover.image;
                    }
                    return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                },
                template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
            };
            // submit MOC
            $scope.mocSubmitAction = [
                { text: 'CANCEL' },
                {
                    text: 'SUBMIT',
                    action: function () {

                        if (!isProcessTriggerClick) {
                            return false;
                        }
                        isProcessTriggerClick = false;
                        var isValid = $scope.validators.submitMOC.validate();
                        if (!isValid) {
                            isProcessTriggerClick = true;
                            return false;
                        }

                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.submitMOCModel.mocMeetingDate = $.format.toBrowserTimeZone($scope.submitMOCModel.mocMeetingDate, constants.format.date.ddMMMyyyyhhmma);
                        asmWorkflowServices.submitMOC($stateParams.alarmId, $scope.submitMOCModel).then(function (response) {
                            $rootScope.isLoading = false;
                            var option = {
                                id: "dialogInfo",
                                title: "MOC Submitted",
                                lableClose: "CLOSE",
                                content: "This MOC is submitted and pending MOC approval",
                                width: 500
                            };
                            utils.dialog.showDialog(option, function () {
                                $state.go(constants.state.asmlist);
                            });

                        }, function (err) {
                            $rootScope.isLoading = false;
                            var option = {
                                id: "dialogInfo",
                                title: "MOC is submitted failed",
                                lableClose: "CLOSE",
                                content: err.message,
                                width: 500
                            };
                            utils.dialog.showDialog(option);

                        });
                        return true;
                    },
                    primary: true
                }
            ];

            $scope.showSubmitMOCKendoDialog = function () {
                utils.clearValid();
                // $scope.submitMOCKendoDialog.center();
                $scope.submitMOCKendoDialog.open();
                //$scope.changeSwithText();
            };
            //#endregion

            //#region Cancel MOC
            $scope.cancelMOC = function (e) {
                //prevent multi click
                $scope.inProgress = true;
                e.preventDefault();
                e.stopImmediatePropagation();

                try {
                    if ((($scope.checkUserRole.asmApplicant && $scope.userProfile.userProfileId == $scope.model.applicant.userProfileId)) && ($scope.checkStatusTitle.PendingMocApproval || $scope.checkStatusTitle.MOCRequireUpdate)) {

                        $scope.confirmDialog("MOC Cancel", "Are you sure you want to cancel this MOC?").then(function () {
                            // show loading
                            cancelMoc: true;
                            $rootScope.isLoading = true;

                            asmWorkflowServices.cancelMOC($stateParams.alarmId).then(function (response) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;

                                $scope.dialogOption.title = "MOC Canceled";
                                $scope.dialogOption.content = "MOC form has been canceled successfully";
                                utils.dialog.showDialog($scope.dialogOption, function () {
                                    $state.go(constants.state.asmlist);
                                });
                            }, function (error) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;
                                $scope.dialogOption.title = "MOC Cancel Failed";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            });
                        }, function () {
                            $scope.inProgress = false;
                        });
                    } else {
                        $scope.inProgress = false;
                        $rootScope.isLoading = false;

                        $scope.dialogOption.title = "Access Denied";
                        $scope.dialogOption.content = "You don't have any permission to do this action.";
                        utils.dialog.showDialog($scope.dialogOption);
                    }
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                }

                $scope.inProgress = false;
            };
            //#endregion

            //#region Cancel alarm shelving
            $scope.cancelAsm = function (e) {
                //prevent multi click
                $scope.inProgress = true;
                e.preventDefault();
                e.stopImmediatePropagation();

                try {
                    if ((($scope.checkUserRole.asmApplicant && userProfile.userProfileId == model.applicant.userProfileId) || $scope.checkUserRole.asmAdmin) && ((checkStatusTitle.PendingReview || checkStatusTitle.PendingEndorse || checkStatusTitle.PendingApproval || checkStatusTitle.RequiresUpdate || checkStatusTitle.Application))) {
                        $scope.confirmDialog("Alarm Shelving Cancel", "Are you sure you want to cancel this Alarm Shelving?").then(function () {
                            // show loading
                            cancelAsm: true;
                            $rootScope.isLoading = true;

                            asmWorkflowServices.cancelAsm($stateParams.alarmId).then(function (response) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;

                                $scope.dialogOption.title = "Alarm Shelving Canceled";
                                $scope.dialogOption.content = "Alarm Shelving has been canceled successfully";
                                utils.dialog.showDialog($scope.dialogOption, function () {
                                    $state.go(constants.state.asmlist);
                                });
                            }, function (error) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;
                                $scope.dialogOption.title = "Alarm Shelving Cancel Failed";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            });
                        }, function () {
                            $scope.inProgress = false;
                        });
                    } else {
                        $scope.inProgress = false;
                        $rootScope.isLoading = false;

                        $scope.dialogOption.title = "Access Denied";
                        $scope.dialogOption.content = "You don't have any permission to do this action.";
                        utils.dialog.showDialog($scope.dialogOption);
                    }
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                }

                $scope.inProgress = false;
            };
            //#endregion

            //#region Approve MOC Action
            $scope.approveMocModel = {
                remarks: "",
                action: "",
                IsApproved: false
            };
            $scope.mocApproveComment = "";
            $scope.mocApprove = function () {
                // show loading
                $rootScope.isLoading = true;
                try {
                    if ($scope.userProfile.userProfileId == $scope.model.mocApprover.userProfileId) {
                        asmWorkflowServices.approveMoc($stateParams.alarmId, $scope.approveMocModel).then(function (response) {
                            $rootScope.isLoading = false;
                            switch ($scope.approveMocModel.action) {
                                case 'approve':
                                    $scope.dialogOption.title = "MOC Approved";
                                    $scope.dialogOption.content = "This MOC is approved.";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                    break;
                                case 'reject':
                                    $scope.dialogOption.title = "MOC Not Approved";
                                    $scope.dialogOption.content = "This MOC is not approved and <strong>requires update</strong> from the applicant";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                    break;
                            }
                        }, function (error) {
                            $rootScope.isLoading = false;
                            switch ($scope.approveMocModel.action) {
                                case 'approve':
                                    $scope.dialogOption.title = "ASM Approve Failed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                                case 'reject':
                                    $scope.dialogOption.title = "ASM Reject Failed";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);
                                    break;
                            }
                        });
                    } else {
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "Access Denied";
                        $scope.dialogOption.content = "You don't have any permission to do this action.";
                        utils.dialog.showDialog($scope.dialogOption);
                    }
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
            };

            $scope.mocApproveActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'APPROVE',
                    action: function () {
                        if ($scope.validators.mocApprove.validate()) {
                            $scope.approveMocModel.remarks = $scope.mocApproveComment;
                            $scope.approveMocModel.action = 'approve';
                            $scope.approveMocModel.isApproved = true;
                            $scope.mocApprove();
                            return true;
                        }
                        // Returning false will prevent the closing of the dialog
                        return false;
                    },
                    primary: true
                }
            ];

            $scope.mocRejectComment = "";
            $scope.mocRejectActions = [
                { text: 'CANCEL' },
                {
                    text: 'REJECT',
                    action: function () {

                        if (!isProcessTriggerClick) {
                            return false;
                        }
                        isProcessTriggerClick = false;

                        if (!$scope.validators.mocReject.validate()) {
                            isProcessTriggerClick = true;
                            return false;
                        }
                        if ($scope.validators.mocReject.validate()) {
                            $scope.approveMocModel.remarks = $scope.mocRejectComment;
                            $scope.approveMocModel.isApproved = false;
                            $scope.approveMocModel.action = 'reject';
                            $rootScope.isLoading = true;
                            isProcessTriggerClick = true;
                            $scope.mocApprove();
                            return true;

                        }
                        return false;
                    },
                    primary: true
                }
            ];

            $scope.updateMOC = function (e) {
                if (!isProcessTriggerClick) {
                    return false;
                }
                isProcessTriggerClick = false;

                e.preventDefault();
                e.stopPropagation();


                $scope.mocConfirmDialog("MOC Updated", "Please confirm that you have updated the MOC and ready to re-submit for MOC approval.").then(function () {
                    $scope.submitMOCModel.allowByPassViaMOC = $scope.model.asmDetail.allowByPassViaMOC;
                    $scope.submitMOCModel.mocNo = $scope.model.asmDetail.mocNO;
                    $scope.submitMOCModel.mocMeetingDate = $scope.model.asmDetail.mocMeetingDate;
                    $scope.submitMOCModel.mocApprovedBy = $scope.model.mocApprover.userProfileId;
                    $rootScope.isLoading = true;
                    isProcessTriggerClick = true;
                    asmWorkflowServices.requireUpdateMOC($stateParams.alarmId, $scope.submitMOCModel).then(function (response) {
                        $rootScope.isLoading = false;
                        var option = {
                            id: "dialogInfo",
                            title: "MOC Submitted",
                            lableClose: "CLOSE",
                            content: "This MOC is submitted and pending MOC approval.",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.asmlist);
                        });

                    }, function (err) {
                        $rootScope.isLoading = false;
                        var option = {
                            id: "dialogInfo",
                            title: "MOC Updated failed",
                            lableClose: "CLOSE",
                            content: err.message,
                            width: 500
                        };
                        utils.dialog.showDialog(option);
                    });
                    return true;
                }, function () {
                    // Chooses cancel, do nothing
                    isProcessTriggerClick = true;
                    return true;
                });
            };
            //#endregion

            //#region Cancel ASM

            $scope.cancelAsm = function (e) {
                //prevent multi click
                $scope.inProgress = true;
                e.preventDefault();
                e.stopImmediatePropagation();

                try {
                    if ($scope.userProfile.userProfileId === $scope.model.applicant.userProfileId || $scope.checkUserRole.asmAdmin) {
                        $scope.confirmDialog("ASM Cancel", "Are you sure you want to cancel this ASM?").then(function () {
                            // show loading
                            $rootScope.isLoading = true;
                            asmWorkflowServices.cancelAsm($stateParams.alarmId).then(function (response) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;

                                $scope.dialogOption.title = "ASM Canceled";
                                $scope.dialogOption.content = "ASM form has been canceled successfully";
                                utils.dialog.showDialog($scope.dialogOption, function () {
                                    $state.go(constants.state.asmlist);
                                });
                            }, function (error) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;
                                $scope.dialogOption.title = "ASM Cancel Failed";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            });
                        }, function () {
                            $scope.inProgress = false;
                        });
                    } else {
                        $scope.inProgress = false;
                        $rootScope.isLoading = false;

                        $scope.dialogOption.title = "Access Denied";
                        $scope.dialogOption.content = "You don't have any permission to do this action.";
                        utils.dialog.showDialog($scope.dialogOption);
                    }
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                }

                $scope.inProgress = false;
            };

            //#endregion


            //#region Shelve form

            $scope.shelveActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'SHELVE',
                    action: function () {
                        // show loading
                        $rootScope.isLoading = true;

                        try {
                            asmServices.asmShelving($stateParams.alarmId, { isReShelving: false }).then(function (response) {
                                $rootScope.isLoading = false;
                                $scope.dialogOption.title = "Alarm Shelved";
                                $scope.dialogOption.content = "This alarm is shelved and <strong>live</strong>.";
                                utils.dialog.showDialog($scope.dialogOption, function () {
                                    $rootScope.goToMyPendingAction = true;
                                    $state.go(constants.state.asmlist);
                                });
                            }, function (error) {
                                $rootScope.isLoading = false;

                                $scope.dialogOption.title = "Alarm Shelve Failed.";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            });

                            return true;
                        }
                        catch (err) {
                            utils.error.showErrorGet(err);
                            $rootScope.isLoading = false;
                        }
                    },
                    primary: true
                }
            ];

            //#endregion

            // Get close reason

            var GetAlarmCloseReason = function () {
                //$scope.GetAlarmClosureReason = null;
                asmServices.getAlarmClosureReason().then(function (response) {
                    $scope.ClosureReason = response.data;
                    $scope.closeReason = response.data[0].lookupId; //set default reason for closing
                    $('#closeAlarmDialog').data("kendoDialog").open();
                }, function (error) {
                    utils.error.showErrorGet(error);
                });
            }

            $scope.closeAlarm = function (event) {
                $scope.inProgress = true;
                event.preventDefault();
                event.stopImmediatePropagation();
                try {
                    GetAlarmCloseReason()
                } catch (error) {
                    utils.error.showErrorGet(error);
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                }
            }

            //#region Close Shelving
            $scope.closeAlarmActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'CLOSE',
                    action: function () {
                        // show loading
                        $rootScope.isLoading = true;

                        try {
                            if ($scope.validators.close.validate()) {
                                asmServices.asmClose($stateParams.alarmId, { ClosureReasonId: $scope.closeReason }).then(function (response) {
                                    $rootScope.isLoading = false;
                                    $scope.dialogOption.title = "Alarm Closed";
                                    $scope.dialogOption.content = "Successfully close.";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });

                                }, function (error) {
                                    $rootScope.isLoading = false;
                                    $scope.dialogOption.title = "Alarm Close Failed.";
                                    $scope.dialogOption.content = error.message;
                                    utils.dialog.showDialog($scope.dialogOption);                                    
                                });
                                return true;
                            } else {
                                $rootScope.isLoading = false;
                            }
                            return false;
                        }
                        catch (err) {
                            utils.error.showErrorGet(err);
                            $rootScope.isLoading = false;
                        }
                    },
                    primary: true
                }
            ];

            //#endregion close

            // Open/Close Custom Drop down (Vertical Dot)
            $(".dropdown_toggle").click(function (e) {
                $(this).parent().toggleClass("dd_open");
                e.stopPropagation();
            });

            // Close drop down on click outside div
            $(document).on("click", function (e) {
                if ($(e.target).is(".dropdown_menu") === false) {
                    $(".dd_block").removeClass("dd_open");
                }
            });

            $scope.showUpdateMOCKendoDialog = function () {
                utils.clearValid();
                $scope.updateMOCKendoDialog.center();
                $scope.updateMOCKendoDialog.open();
                //$scope.changeSwithText();
            };

            $scope.mocConfirmDialog = function (title, content) {
                return $("<div></div>").kendoConfirm({
                    title: title,
                    content: content,
                    actions: [{ text: "SUBMIT", primary: true },
                    { text: "CANCEL" }]
                }).data("kendoConfirm").open().result;
            };

            //#region for asm_Live grid
            $scope.reShelvingScheduleOptions = {
                dataSource: {
                    transport: {
                        read: function (options) {
                            asmWorkflowServices.getAsmReShelvingSchedule(
                                {
                                    alarmId: $stateParams.alarmId,
                                    skip: (options.data.page - 1) * options.data.pageSize,
                                    take: options.data.take
                                }).then(function (response) {
                                    if (response.data != null) {
                                        options.success(response.data);
                                    } else {
                                        options.success([]);
                                    }
                                }, function (error) {
                                    options.error([]);
                                    utils.error.showErrorGet(error);
                                });
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                shift: {
                                    type: "string"
                                },
                                shiftTime: {
                                    type: "string"
                                },
                                shelvedBy: {
                                    type: "string"
                                },
                                shelvedTime: {
                                    type: "date", format: "dd MMM yyyy"
                                }
                            }
                        },
                        total: function (response) {
                            return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
                        }
                    },
                    pageSize: 10,
                    serverPaging: true,
                    serverFiltering: false,
                    serverSorting: false
                },
                scrollable: false,
                sortable: false,
                pageable: {
                    pageSizes: true,
                    buttonCount: 5
                },
                columns: [{
                    field: "shift",
                    title: "Shift",
                    width: "60px"
                }, {
                    field: "shiftTime",
                    title: "Date & Time",
                    attributes: {
                        "class": "cell_default"
                    }
                }, {
                    field: "shelvedBy", title: "Shelved By",
                    template: function (dataItem) {
                        if (dataItem.isShelving == null && dataItem.isNewestShift) {
                            if ($scope.model.asmDetail.statusKey !== "30") {
                                return "<strong class='pending_info pending-reacknowledge'>Pending Re-shelve</strong>";
                            } else {
                                return "";
                            }
                        } else if (dataItem.isShelving == null && !dataItem.isNewestShift) {
                            return "None";
                        } else {
                            return "<a href data-ng-click='goToProfile(\"" + dataItem.shelversId + "\")'><strong>" + dataItem.shelvingBy + "</strong></a>";
                        }
                    }
                }, {
                    field: "shelvedTime", title: "Time Shelved",
                    template: function (dataItem) {
                        if (dataItem.isShelving == null && dataItem.isNewestShift) {
                            $scope.newestShift = dataItem.shiftTime;
                            $scope.newestShiftNumber = dataItem.shift;
                            if ($scope.userProfile.userProfileId == $scope.model.asmDetail.applicantProfileId || $scope.model.isShelver) {
                                if ($scope.model.asmDetail.statusKey !== "30") {
                                    return "<button class='btn-sd btn-sm btn-purple k-button' data-ng-click='reShelvingDialog.open()'>Re-shelve</button>";
                                } else {
                                    return "";
                                }
                            } else {
                                return "";
                            }
                        } else if (dataItem.isShelving == null && !dataItem.isNewestShift) {
                            return "";
                        } else {
                            return kendo.toString(kendo.parseDate(dataItem.shelvingTime), "dd MMM yyyy at hh:mm tt");
                        }
                    }
                }],
                noRecords: true,
                messages: {
                    noRecords: "There is no data on current page"
                }
            };

            $scope.reApprovalOptions = {
                dataSource: {
                    transport: {
                        read: function (options) {
                            asmWorkflowServices.getAsmApprovalExtension(
                                {
                                    alarmId: $stateParams.alarmId,
                                    skip: (options.data.page - 1) * options.data.pageSize,
                                    take: options.data.take
                                }).then(function (response) {
                                    if (response.data != null) {
                                        options.success(response.data);
                                    } else {
                                        options.success([]);
                                    }
                                }, function (error) {
                                    options.error([]);
                                    utils.error.showErrorGet(error);
                                });
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                weekNo: {
                                    type: "string"
                                },
                                approvedBy: {
                                    type: "string"
                                },
                                approvedTime: {
                                    type: "date"
                                }
                            }
                        },
                        total: function (response) {
                            return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
                        }
                    },
                    pageSize: 10,
                    serverPaging: true,
                    serverFiltering: false,
                    serverSorting: false
                },
                scrollable: false,
                sortable: false,
                pageable: {
                    pageSizes: true,
                    buttonCount: 5
                },
                columns: [{
                    field: "weekNo",
                    title: "Week",
                    width: "60px"
                }, {
                    field: "approvedBy", title: "Approved by",
                    template: function (dataItem) {
                        if (dataItem.approvedTime == null && dataItem.isNewest) {
                            if ($scope.model.asmDetail.statusKey !== '30') {
                                return "<strong class='pending_info pending-reapproval'>Pending Re-approval</strong>";
                            } else {
                                return "";
                            }
                        }
                        else {
                            return "<strong><a href data-ng-click='goToProfile(\"" + dataItem.approvedId + "\")'>" + dataItem.approvedBy + "</a></strong>";
                        }
                    }
                }, {
                    field: "approvedTime", title: "Time Approved",
                    template: function (dataItem) {
                        if (dataItem.approvedTime == null && dataItem.isNewest) {
                            if ($scope.userProfile.userProfileId == $scope.model.approver.userProfileId) {
                                if ($scope.model.asmDetail.statusKey !== '30') {
                                    return "<button class='btn-sd btn-sm btn-purple k-button right' data-ng-click='reApproveDialog.open()'>Re-approve</button>";
                                } else {
                                    return "";
                                }
                            }
                            return "";
                        } else if (dataItem.approvedTime == null && !dataItem.isNewest) {
                            return "";
                        } else {
                            return kendo.toString(kendo.parseDate(dataItem.approvedTime), "dd MMM yyyy at hh:mm tt");
                        }
                    }
                }],
                noRecords: true,
                messages: {
                    noRecords: "There is no data on current page"
                }
            };
            //#endregion

            //#region Re-Approve

            $scope.reApprovalComment = "";

            $scope.reApproveActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'RE-APPROVE',
                    action: function () {
                        $scope.reApprovalClick();
                        return true;
                    },
                    primary: true
                }];

            $scope.reApprovalClick = function () {
                // show loading
                $rootScope.isLoading = true;

                try {
                    if ($scope.userProfile.userProfileId == $scope.model.approver.userProfileId) {
                        asmWorkflowServices.reApproveAsm($stateParams.alarmId).then(function (response) {
                            $rootScope.isLoading = false;
                            $scope.dialogOption.title = "Alarm Re-Approve";
                            $scope.dialogOption.content = "This alarm is re-approved.";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $rootScope.goToMyPendingAction = true;
                                $state.go(constants.state.asmlist);
                            });
                        }, function (error) {
                            $rootScope.isLoading = false;
                            $scope.dialogOption.title = "Alarm Re-Approve Failed";
                            $scope.dialogOption.content = "This alarm is approve failed.";
                            utils.dialog.showDialog($scope.dialogOption);
                        });
                    } else {
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "Access Denied";
                        $scope.dialogOption.content = "You don't have any permission to do this action.";
                        utils.dialog.showDialog($scope.dialogOption);
                    }
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
            };

            //#endregion

            //#region Re-Shelve form

            $scope.reShelveActions = [
                {
                    text: 'CANCEL'
                },
                {
                    text: 'RE-SHELVE',
                    action: function () {
                        // show loading
                        $rootScope.isLoading = true;

                        try {
                            asmWorkflowServices.reShelveAsm($stateParams.alarmId).then(function (response) {
                                $rootScope.isLoading = false;
                                $scope.dialogOption.title = "Alarm Re-Shelved";
                                $scope.dialogOption.content = "This alarm is re-shelved and <strong>live</strong>.";
                                utils.dialog.showDialog($scope.dialogOption, function () {
                                    $rootScope.goToMyPendingAction = true;
                                    $state.go(constants.state.asmlist);
                                });
                            }, function (error) {
                                $rootScope.isLoading = false;

                                $scope.dialogOption.title = "Alarm Re-Shelve Failed.";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);
                            });

                            return true;
                        }
                        catch (err) {
                            utils.error.showErrorGet(err);
                            $rootScope.isLoading = false;
                        }
                    },
                    primary: true
                }
            ];

            //#endregion

            //#region asm update require

            // Model
            $scope.updatemodel = {
                radio: null,
                areaId: null,
                unitId: null,
                tagNo: null,
                otherTagNo: null,
                equipmentNo: null,
                alarmClass: null,
                type: null,
                otherType: null,
                description: null,
                reviewerId: null,
                parentAlarm: null,
                isSubmitAction: null
            };

            //Common field value
            $scope.selectedArea = { areaId: "" };
            $scope.selectedAlarmClass = { alarmClassId: "" };
            $scope.selectedUnitNo = { unitId: "" };
            $scope.selectedTagNo = { tagId: "" };
            $scope.selectedType = { selectedTypeId: "" };
            $scope.selectedReviewer = { reviewerId: "" };

            //#region Business function for asm update

            // Get reviewer data
            var getReviewer = function (options, keyWord) {
                asmNewServices.getAsmReviewers(keyWord).then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }

            // Get Area data
            var getArea = function (options) {
                asmNewServices.getAreas().then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }

            // Get UnitNo. data
            var getUnitNoByAreaId = function (options, keyWord) {
                asmNewServices.getUnitByArea(keyWord).then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }

            // Get TagNo. data
            var getTagNoByUnitId = function (options, keyWord) {
                asmNewServices.getTagNoByUnit(keyWord).then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }

            // Get Alarm Type data
            var getType = function (options) {
                asmNewServices.getAlarmTypes().then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }

            // On selected Area changed
            $scope.onAreaChange = function () {
                if ($("#asmArea").val() !== "") {
                    $scope.unitDataSource = {
                        transport: {
                            read: function (options) {
                                getUnitNoByAreaId(options, $("#asmArea").val());
                            }
                        },
                        schema: {
                            model: {
                                fields: {
                                    lookupUnitId: { type: "string" },
                                    description: { type: "string" }
                                }
                            }
                        }
                    };
                    $scope.tagNoDataSource = null;
                } else {
                    $scope.unitDataSource = null;
                    $scope.tagNoDataSource = null;
                }
                //$scope.selectedArea = $("#asmArea").val();
            };

            // On selected Unit changed
            $scope.onUnitChange = function () {
                if ($("#UnitNo").val() !== "") {
                    $scope.tagNoDataSource = {
                        transport: {
                            read: function (options) {
                                getTagNoByUnitId(options, $("#UnitNo").val());
                            }
                        },
                        schema: {
                            model: {
                                fields: {
                                    lookupTagId: { type: "string" },
                                    description: { type: "string" }
                                }
                            },
                            data: function (response) {
                                response.push({ lookupTagId: "0", description: "Others" });
                                return response;
                            }
                        }
                    };
                } else {
                    $scope.tagNoDataSource = null;
                }

            };

            // Bind detail data to form
            var bindAsmDetail = function (response) {
                // Bind area data source
                $scope.areasDataSource = {
                    transport: {
                        read: function (options) {
                            getArea(options);
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupAreaId: { type: "string" },
                                description: { type: "string" }
                            }
                        }
                    }
                };

                // Bind unit data source
                $scope.unitDataSource = {
                    transport: {
                        read: function (options) {
                            getUnitNoByAreaId(options, response.data.asmDetail.areaId);
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupUnitId: { type: "string" },
                                description: { type: "string" }
                            }
                        }
                    }
                };

                // Bind tagNo data source
                $scope.tagNoDataSource = {
                    transport: {
                        read: function (options) {
                            getTagNoByUnitId(options, response.data.asmDetail.unitId);
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupTagId: { type: "string" },
                                description: { type: "string" }
                            }
                        },
                        data: function (response) {
                            response.push({ lookupTagId: "0", description: "Others" });
                            return response;
                        }
                    }
                };

                // Bind data to Alarm Classes radio button
                $scope.AlarmClassesDataSource = null;
                asmNewServices.getAlarmClasses().then(function (response) {
                    $scope.AlarmClassesDataSource = response.data;
                }, function (error) {
                    utils.error.showErrorGet(error);
                });

                // Bind data to alarm type
                $scope.alarmTypesDataSource = {
                    transport: {
                        read: function (options) {
                            getType(options);
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupId: { type: "string" },
                                description: { type: "string" }
                            }
                        },
                        data: function (response) {
                            response.push({ lookupId: "0", description: "Others" });
                            return response;
                        }
                    }
                };

                // bind data to drop_down list reviewer
                $scope.reviewerSearchText = "";
                $scope.reviewerOptions = {
                    autoBind: false,
                    optionLabel: "Select Reviewer",
                    height: 300,
                    filter: "contains",
                    filtering: function (e) {
                        $scope.reviewerSearchText = e.filter == null ? "" : e.filter.value;
                    },
                    dataSource: {
                        serverFiltering: true,
                        transport: {
                            read: function (options) {
                                getReviewer(options, $scope.reviewerSearchText);
                            }
                        }
                    },
                    index: 0,
                    dataTextField: "userName",
                    dataValueField: "userProfileId",
                    valueTemplate: function (dataItem) {
                        if (!dataItem.hasOwnProperty('image')) {
                            dataItem.image = $scope.selectedReviewer.reviewerId.image;
                        }
                        return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                    },
                    template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                    '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                };

                try {
                    $scope.selectedArea.areaId = response.data.asmDetail.areaId;
                    $scope.selectedAlarmClass.alarmClassId = response.data.asmDetail.alarmClassId;
                    $scope.selectedUnitNo.unitId = response.data.asmDetail.unitId;
                    $scope.selectedTagNo.tagId = response.data.asmDetail.tagId == null ? "0" : response.data.asmDetail.tagId;
                    $scope.updatemodel.otherTagNo = response.data.asmDetail.tagId !== null ? "" : response.data.asmDetail.tagNo;
                    $scope.selectedType.selectedTypeId = response.data.asmDetail.typeId == null ? "0" : response.data.asmDetail.typeId;
                    $scope.selectedReviewer.reviewerId = response.data.reviewer == null ? "" : response.data.reviewer.userProfileId;
                    $scope.updatemodel.radio = response.data.asmDetail.radio;
                    $scope.updatemodel.mobileNo = $scope.userProfile.mobileNo;
                    $scope.updatemodel.equipmentNo = response.data.asmDetail.equipmentNo;
                    $scope.updatemodel.description = response.data.asmDetail.description;
                    $scope.updatemodel.otherType = response.data.asmDetail.typeId !== null ? "" : response.data.asmDetail.type;
                } catch (eerror) {
                    utils.error.showErrorGet(error);
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                }
            }

            //#endregion

            // Validate form data
            var isValidFormData = function (isSubmit) {
                var isValid;
                if (isSubmit) {
                    // Custom validations
                    isValid = $(".asm-form").kendoValidator({
                        rules: {
                            otherTagNo: function (input) {
                                if (input.is("[name=tagNo]")) {
                                    var retVal = true;
                                    if ($scope.selectedTagNo.tagId === '' || $scope.selectedTagNo.tagId == null) {
                                        return false;
                                    } else if ($scope.selectedTagNo.tagId === '0') {
                                        retVal = $scope.updatemodel.otherTagNo != null & $scope.updatemodel.otherTagNo != "";
                                    }
                                    if (retVal) {
                                        $("#TagNo").removeClass("k-invalid");
                                    } else {
                                        $("#TagNo").addClass("k-invalid");
                                        $("#otherTagNo").addClass("k-invalid");
                                    }
                                    return retVal;
                                }
                                return true;
                            },
                            otherType: function (input) {
                                if (input.is("[name=TypeofAlarm]")) {
                                    var retVal = true;
                                    if ($scope.selectedType.selectedTypeId === '' || $scope.selectedType.selectedTypeId == null) {
                                        return false;
                                    } else if ($scope.selectedType.selectedTypeId === '0') {
                                        retVal = $scope.updatemodel.otherType != null & $scope.updatemodel.otherType != "";
                                    }
                                    if (retVal) {
                                        $("#Type").removeClass("k-invalid");
                                    } else {
                                        $("#Type").addClass("k-invalid");
                                        $("#otherType").addClass("k-invalid");
                                    }
                                    return retVal;
                                }
                                return true;
                            }
                        },
                        messages: {
                            otherTagNo: "Tag No. is required",
                            otherType: "Type is required"
                        }
                    }).data("kendoValidator").validate();
                } else {
                    isValid = $(".asm-form").kendoValidator({
                        rules: {
                            required: serviceHelper.requiredRule,
                            otherTagNo: function (input) {
                                if (input.is("[name=tagNo]")) {
                                    var retVal = true;
                                    if ($scope.selectedTagNo.tagId === '' || $scope.selectedTagNo.tagId == null) {
                                        return false;
                                    } else if ($scope.selectedTagNo.tagId === '0') {
                                        retVal = $scope.updatemodel.otherTagNo != null & $scope.updatemodel.otherTagNo != "";
                                    }
                                    if (retVal) {
                                        $("#TagNo").removeClass("k-invalid");
                                    } else {
                                        $("#TagNo").addClass("k-invalid");
                                        $("#otherTagNo").addClass("k-invalid");
                                    }
                                    return retVal;
                                }
                                return true;
                            }
                        },
                        messages: {
                            otherTagNo: "Tag No. is required"
                        }
                    }).data("kendoValidator").validate();
                }

                return isValid;
            }


            // save data for asm_form
            // prevent multi click
            $scope.inProgress = false;

            var saveData = function (event, actionType) {
                //prevent multi click
                $scope.inProgress = true;
                event.preventDefault();
                event.stopImmediatePropagation();

                // show loading
                $rootScope.isLoading = true;

                try {
                    if (isValidFormData(actionType)) {
                        // Get submitted data
                        $scope.updatemodel.isSubmitAction = actionType;
                        $scope.updatemodel.areaId = $scope.selectedArea.areaId;
                        //$scope.updatemodel.userProfileId = $scope.userProfile.userProfileId;
                        $scope.updatemodel.unitId = $scope.selectedUnitNo.unitId;
                        $scope.updatemodel.tagNo = $scope.selectedTagNo.tagId === '0' ? '' : $scope.selectedTagNo.tagId;
                        $scope.updatemodel.alarmClass = $scope.selectedAlarmClass.alarmClassId;
                        $scope.updatemodel.type = $scope.selectedType.selectedTypeId === '0' ? '' : $scope.selectedType.selectedTypeId;
                        //$scope.model.parentAlarm = $stateParams.alarmId == undefined ? null : $stateParams.alarmId;
                        $scope.updatemodel.reviewerId = $scope.selectedReviewer.reviewerId == null ? null : $scope.selectedReviewer.reviewerId;

                        // Send  data to server
                        if (actionType) {
                            asmNewServices.asmUpdatesRequires($stateParams.alarmId, $scope.updatemodel).then(function (response) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;
                                if (response.data == true) {
                                    $scope.userProfile.mobileNo = $scope.updatemodel.mobileNo;
                                    $rootScope.$app.userProfile.mobileNo = $scope.updatemodel.mobileNo;
                                    $scope.model.asmDetail.mobileNo = $scope.updatemodel.mobileNo;
                                    $scope.dialogOption.title = "Submit for Review";
                                    $scope.dialogOption.content = "This ASM is submitted and <strong>pending review</strong>";
                                    utils.dialog.showDialog($scope.dialogOption, function () {
                                        $state.go(constants.state.asmlist);
                                    });
                                }
                            }, function (error) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;

                                $scope.dialogOption.title = "Submit for Review";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);

                            });
                        } else {
                            asmNewServices.editAsm($stateParams.alarmId, $scope.updatemodel).then(function () {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;
                                $scope.userProfile.mobileNo = $scope.updatemodel.mobileNo;
                                $rootScope.$app.userProfile.mobileNo = $scope.updatemodel.mobileNo;
                                $scope.model.asmDetail.mobileNo = $scope.updatemodel.mobileNo;

                                $scope.dialogOption.title = "Update ASM";
                                $scope.dialogOption.content = "This ASM is saved";
                                utils.dialog.showDialog($scope.dialogOption, function () {
                                    $state.go(constants.state.asmlist);
                                });
                            }, function (error) {
                                $scope.inProgress = false;
                                $rootScope.isLoading = false;
                                $scope.dialogOption.title = "Update ASM";
                                $scope.dialogOption.content = error.message;
                                utils.dialog.showDialog($scope.dialogOption);

                            });
                        }
                    } else {
                        $scope.inProgress = false;
                        $rootScope.isLoading = false;
                    }
                } catch (error) {
                    utils.error.showErrorGet(error);
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                }
            };

            // update asm
            $scope.updateRequire = function (event, actionType) {
                saveData(event, actionType);
            }

            //submit asm for review
            $scope.submitForReview = function (event, actionType) {
                saveData(event, actionType);
            }

            //#endregion


        }]);
app.controller('asmDashBoardController', ['$rootScope', '$scope', '$state', 'constants', 'accessModule', 'asmDashBoardService', function ($rootScope, $scope, $state, constants, accessModule, asmDashBoardService) {
    $rootScope.$app.title = constants.titlePage.AsmDashBoard;

    $scope.hideActionCreateNewSce = false;  

    var currentUser = $rootScope.$app.userProfile;

    $scope.asmApplicant = checkUserHasRoleKey(currentUser.rolesKeyString, constants.role.roleKeys.asmApplicant);
    $scope.showEditEemuaButton = currentUser.isAsmAdmin;

    //fix
    $scope.dashboard = {
        asmRequiredUpdate: 0,
        asmPendingReview: 0,
        asmPendingEndorsement: 0,
        asmPendingApproval: 0,
        asmPendingShelving: 0,
        liveASM: 0,
        liveCritical: 0,
        liveNonCritical: 0,
        livePendingReShelving: 0,
        livePendingReApproval: 0,
        livePendingMOC: 0
    };

    //fix
    $scope.asmDashBoardFilter = {
        areasList: []
    };

    $scope.subscribedAreas = [];

    $scope.myPendingAsm = 0;

    $scope.myPendingRa = 0;

    $scope.totalArea = 0;

    $scope.pendingAsmDataSource = null;

    $scope.pendingRaDataSource = null;

    $scope.setDashBoardData = function (response) {
        $scope.dashboard.asmRequiredUpdate = response.data.asmRequiredUpdate;
        $scope.dashboard.asmPendingReview = response.data.asmPendingReview;
        $scope.dashboard.asmPendingEndorsement = response.data.asmPendingEndorsement;
        $scope.dashboard.asmPendingApproval = response.data.asmPendingApproval;
        $scope.dashboard.asmPendingShelving = response.data.asmPendingShelving;
        $scope.dashboard.liveASM = response.data.liveAsmShelved;
        $scope.dashboard.liveCritical = response.data.liveAsmCritical;
        $scope.dashboard.liveNonCritical = response.data.liveAsmNonCritical;
        $scope.dashboard.livePendingReShelving = response.data.liveAsmPendingReShelving;
        $scope.dashboard.livePendingReApproval = response.data.livePendingReApproval;
        $scope.dashboard.livePendingMOC = response.data.livePendingMoc;
        $("#asmLivePieChart").kendoChart({
            chartArea: {
                width: 165,
                height: 139
            },
            legend: {
                visible: true,
                position: "bottom"
            },
            seriesDefaults: {
                labels: {
                    visible: true,
                    position: "outsideEnd",
                    align: "column",
                    distance: 15,
                    background: "transparent",
                    template: "#= category #: #= value#"
                }
            },
            series: [
                {
                    type: "donut",
                    data: [
                        {
                            category: "Critical",
                            value: $scope.dashboard.liveCritical,
                            color: "#83B5E6",
                        },
                        {
                            category: "Non-Critical",
                            value: $scope.dashboard.liveNonCritical,
                            color: "#CBD34C",
                        }
                    ]
                }],
            tooltip: {
                visible: true,
                format: "{0}"
            }
        });
    };

    $scope.loadAreas = function () {
        $rootScope.isLoading = true;
        asmDashBoardService.getSubscribedAreas().then(function (response) {
            $rootScope.isLoading = false;
            if (response.data !== null && response.data !== undefined) {
                for (i = 0; i < response.data.length; i++) {
                    var area = {
                        areaId: response.data[i].areaId,
                        areaName: response.data[i].areaName,
                        isDefault: response.data[i].isDefault,
                        isChecked: true
                    };
                    $scope.subscribedAreas.push(area);
                }
                $scope.loadData();
            }
        }, function (err) {
            $rootScope.isLoading = false;
            utils.error.showErrorGet(err);
        });
    };

    var onLoad = function () {
        $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
        if (!accessModule.checkAccessModule(constants.module.asm, constants.allowAccess.allowRead) || !$scope.asmApplicant) {
            $scope.hideActionCreateNewAsm = true;
        }
        else {
            $scope.hideActionCreateNewAsm = false;
        }

        $scope.loadAreas();
        $("#multipleAreasMenu").kendoMenu({
            openOnClick: true
        });
    };
    onLoad();

    $scope.selectedChange = function () {
        $scope.loadData();
    };

    $scope.charChartTitle = "";

    $scope.currentYear = new Date().getFullYear();

    $scope.loadData = function () {
        //done
        $rootScope.isLoading = true;
        var selectedIds = [];
        var selectedAreasName = [];
        for (i = 0; i < $scope.subscribedAreas.length; i++) {
            if ($scope.subscribedAreas[i].isChecked) {
                selectedIds.push($scope.subscribedAreas[i].areaId);
                selectedAreasName.push($scope.subscribedAreas[i].areaName);
            }
        }
        var selectedAreas = selectedIds.join;
        // Gets Asm pending actions => done
        asmDashBoardService.getAsmPendingInDashboard({ areas: selectedAreas, take: "5" }).then(function (response) {
            $scope.pendingAsmDataSource = response.data;
            if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                $scope.myPendingAsm = response.data[0].total;
            } else {
                $scope.myPendingAsm = 0;
            }
        }, function (error) {
            utils.error.showErrorGet(error);
        });


        //fix => done
        $scope.asmDashBoardFilter.areasList = selectedIds;

        //fix
        asmDashBoardService.getAsmDashBoard($scope.asmDashBoardFilter).then(function (response) {
            $rootScope.isLoading = false;
            $scope.setDashBoardData(response);
        }, function (error) {
            $rootScope.isLoading = false;
            utils.error.showErrorGet(error);
        });
        //$scope.charChartTitle = "EEMUA Standards ";
        //$scope.charChartTitle = $scope.charChartTitle + $scope.currentYear;
        $scope.charChartTitle = "Month";
        var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var colTitle = [];
        var barData = {
            psr_1_Data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            psr_2_Data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            offsite_Data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            complex_Data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

        };

        //update bar by barData
        $scope.updateCharData = function (data) {
            if (data !== null && data !== undefined && data.length > 0) {

                var monthAttr = "";

                for (var i = 0; i < monthNames.length; i++) {
                    monthAttr = monthNames[i].toLowerCase();
                    barData.psr_1_Data[i] = data[0][monthAttr];
                    barData.psr_2_Data[i] = data[1][monthAttr];
                    barData.offsite_Data[i] = data[2][monthAttr];
                    barData.complex_Data[i] = data[3][monthAttr];
                    if (i < data.length) {
                        if (data[i].hasOwnProperty('type')) {
                            colTitle[i] = data[i].type;
                        }
                    }
                }
            }

            $("#chart").kendoChart({
                title: {
                    text: $scope.charChartTitle,
                    position: "bottom",
                    color: "#3d3935",
                    font: "14px/20px 'museo_sans',sans-serif",
                    padding: {
                        top: 15
                    }
                },
                legend: {
                    position: "bottom"
                },
                seriesDefaults: {
                    type: "column"
                },
                series: [{
                    name: colTitle[0],
                    data: barData.psr_1_Data,
                    color: "#B9C7D4"
                }, {
                    name: colTitle[1],
                    data: barData.psr_2_Data,
                    color: "#4CCED3"
                }, {
                    name: colTitle[2],
                    data: barData.offsite_Data,
                    color: "#615E9B"
                }, {
                    name: colTitle[3],
                    data: barData.complex_Data,
                    color: "#F5D028"
                }],
                valueAxis: {
                    title: {
                        text: "Numbers of Alarm /Console /Hour",
                        font: "14px/20px 'museo_sans',sans-serif"
                    },
                    labels: {
                        format: "{0}"
                    },
                    line: {
                        visible: false
                    },
                    axisCrossingValue: 0
                },
                categoryAxis: {
                    //title: {
                    //    text: "Month",
                    //    font: "14px/20px 'museo_sans',sans-serif",
                    //    margin: {
                    //        right:65
                    //    },
                    //    padding: { top: 10 }
                    //},
                    categories: monthNames,
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        padding: { top: 13 }
                    }
                },
                tooltip: {
                    visible: true,
                    format: "{0}%",
                    template: "#= series.name #: #= value #"
                }
            });
            $("#chart").css("position", "initial");
        }

        asmDashBoardService.getEEMUAData($scope.currentYear).then(function (response) {
            if (response.data !== null && response.data !== undefined && response.data.length > 0) {

                $scope.updateCharData(response.data);

            }
        });


    };

    $rootScope.filterByArea = [];

    $rootScope.filterByStatus = '';

    $rootScope.filterIsPendingReApprove = false;

    $rootScope.filterIsPendingReShelving = false;

    $rootScope.filterIsPendingMoc = false;

    $scope.filter = function (e) {
        e.preventDefault();
        var target = e.currentTarget;
        _.each($scope.subscribedAreas, function (m) {
            if (m.isChecked) {
                $rootScope.filterByArea.push(m.areaId);
            }
        });
        $rootScope.filterByStatus = $(target).data("status");
        if (($(target).data("pending-re-shelving") + '').toLowerCase() === "true") {
            $rootScope.filterIsPendingReShelving = $(target).data("pending-re-shelving");
        }
        if (($(target).data("pending-re-approve") + '').toLowerCase() === "true") {
            $rootScope.filterIsPendingReApprove = $(target).data("pending-re-approve");
        }
        if (($(target).data("pending-moc") + '').toLowerCase() === "true") {
            $rootScope.filterIsPendingMoc = $(target).data("pending-moc");
        }
        $state.go(constants.state.asmlist);

    };

    $scope.goToCreateAsm = function (e) {
        e.preventDefault();
        $state.go(constants.state.asmNewState);
    };

    $scope.openItemMenuAsmDashboard = function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        $("#ulContextMenuAsmEEMUAChart").slideToggle();
    };
    $scope.rawData = [];
    $scope.eemuaList = [];
    $scope.editEEMUA = function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();

        asmDashBoardService.getEEMUAData($scope.currentYear).then(function (response) {

            if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                $scope.eemuaList = response.data;

                //declare temp to store data
                $scope.rawData = angular.copy(response.data);
                var now = new Date();
                $scope.currentMonth = now.getMonth() + 1;
            }
        });

        $("#model-eemua").show();
        $("#ulContextMenuAsmEEMUAChart").hide();
    }

    $scope.saveEEMUA = function (event) {
        $scope.rawData = angular.copy($scope.eemuaList);
        // console.log($scope.eemuaList);

        //prevent multi click
        $scope.inProgress = true;
        event.preventDefault();
        event.stopImmediatePropagation();

        // show loading
        $rootScope.isLoading = true;
        try {
            asmDashBoardService.saveEEMUAData($scope.eemuaList, $scope.currentYear);

            //add updateCharData
            $scope.updateCharData($scope.rawData);

            $("#model-eemua").hide();
            $scope.inProgress = false;
            $rootScope.isLoading = false;
        } catch (error) {
            utils.error.showErrorGet(error);
            $scope.inProgress = false;
            $rootScope.isLoading = false;
        }
    }
    $scope.cancelEEMUA = function () {
        $scope.eemuaList = [];
        $scope.eemuaList = angular.copy($scope.rawData);
        $("#model-eemua").hide();
    }
}]);
app.controller('diDashBoardController', ['$rootScope', '$scope', '$state', 'constants', 'accessModule', 'diDashBoardService', function ($rootScope, $scope, $state, constants, accessModule, diDashBoardService) {
        $rootScope.$app.title = constants.titlePage.diDashBoard;

        $scope.sampleData = diDashBoardService.getSampleData();

    }]);
app.controller('landingController', ['$rootScope', '$window', '$scope', '$location', '$state', 'authService', 'appSettings', 'constants', function ($rootScope, $window, $scope, $location, $state, authService, appSettings, constants) {
    $rootScope.$app.title = "Landing";

    $state.go(constants.state.rotfDashboardOverview);
    $rootScope.bigModuleTitle = "Refinery Of The Future (ROTF)";
}]);
app.controller('rotfDashBoardController',
    ['$rootScope', '$window', '$state', '$stateParams', '$scope', '$sce', '$location', 'authService', 'appSettings',
        'constants', 'rotfServices',
        function ($rootScope, $window, $state, $stateParams, $scope, $sce, $location, authService, appSettings, constants, rotfServices) {
            
            $scope.NPATList = {};
            
            loadNPATList();


            $scope.isTabActived = function(name) {
                return $state.includes(name);
            }

            $scope.goTo = function(name)
            {
                switch (name) {
                case 'overview':
                    $state.go(constants.state.rotfDashboardOverview);
                    
                    break;
                case 'operation':
                    $state.go(constants.state.rotfDashboardOperation);

                    break;
                default:
                }
            }


            function loadNPATList() {
                rotfServices.getNPAT().then(function (response) {
                    $scope.NPATList = response.data;
                }, function (error) {
                    utils.error.showErrorGet(error);
                });
            }

            
        }
    ]);
app.controller('sceDashBoardController',
    ['$rootScope', '$scope', '$interval', '$state', '$cookies', 'constants', 'accessModule', 'sceDashBoardService', 'appSettings',
        function ($rootScope, $scope, $interval, $state, $cookies, constants, accessModule, sceDashBoardService, appSettings) {

    $rootScope.$app.title = constants.titlePage.SceDashBoard;
    $scope.isAdmin = $rootScope.$app.userProfile.isAsmAdmin;
    $scope.hideActionCreateNewSce = false;

    $scope.dashboard = {
        sceRequiredUpdate: 0,
        scePendingReview: 0,
        scePendingEndorsement: 0,
        scePendingApproval: 0,
        scePendingAcknowledgement: 0,
        raRequiredUpdate: 0,
        raPendingReview: 0,
        raPendingEndorsement: 0,
        raPendingApproval: 0,
        raPendingAcknowledgement: 0,
        liveSCE: 0,
        livePM: 0,
        liveRM: 0,
        liveOthers: 0,
        livePendingReAcknowlegement: 0,
        livePendingReApproval: 0,
        livePendingMOC: 0
    };

    $scope.sceDashBoardFilter = {
        areasList: []
    };

    $scope.subscribedAreas = [];

    $scope.myPendingSce = 0;

    $scope.myPendingRa = 0;

    $scope.totalArea = 0;

    $scope.pendingSceDataSource = null;

    $scope.pendingRaDataSource = null;

    $scope.setDashBoardData = function (response) {
        $scope.dashboard.sceRequiredUpdate = response.data.sceRequiredUpdate;
        $scope.dashboard.scePendingReview = response.data.scePendingReview;
        $scope.dashboard.scePendingEndorsement = response.data.scePendingEndorsement;
        $scope.dashboard.scePendingApproval = response.data.scePendingApproval;
        $scope.dashboard.scePendingAcknowledgement = response.data.scePendingAcknowledgement;
        $scope.dashboard.raRequiredUpdate = response.data.raRequiredUpdate;
        $scope.dashboard.raPendingReview = response.data.raPendingReview;
        $scope.dashboard.raPendingEndorsement = response.data.raPendingEndorsement;
        $scope.dashboard.raPendingApproval = response.data.raPendingApproval;
        $scope.dashboard.raPendingAcknowledgement = response.data.raPendingAcknowledgement;
        $scope.dashboard.liveSCE = response.data.liveSCE;
        $scope.dashboard.livePM = response.data.livePM;
        $scope.dashboard.liveRM = response.data.liveRM;
        $scope.dashboard.liveOthers = response.data.liveOthers;
        $scope.dashboard.livePendingReAcknowlegement = response.data.livePendingReAcknowlegement;
        $scope.dashboard.livePendingReApproval = response.data.livePendingReApproval;
        $scope.dashboard.livePendingMOC = response.data.livePendingMOC;
        $("#sceLivePieChart").kendoChart({
            chartArea: {
                width: 165,
                height: 139
            },
            legend: {
                visible: true,
                position: "bottom"
            },
            seriesDefaults: {
                labels: {
                    visible: true,
                    position: "outsideEnd",
                    align: "column",
                    distance: 9,
                    background: "transparent",
                    template: "#= category #: #= value#"
                }
            },
            series: [{
                type: "donut",
                data: [
                    {
                        category: "RM",
                        value: $scope.dashboard.liveRM,
                        color: "#83B5E6"
                    },
                    {
                        category: "PM",
                        value: $scope.dashboard.livePM,
                        color: "#CBD34C"
                    },
                    {
                        category: "Others",
                        value: $scope.dashboard.liveOthers,
                        color: "#A9F5BC"
                    }]
            }],
            tooltip: {
                visible: true,
                format: "{0}"
            }
        });
    };

    $scope.loadAreas = function () {
        $rootScope.isLoading = true;
        sceDashBoardService.getSubscribedAreas().then(function (response) {
            $rootScope.isLoading = false;
            if (response.data !== null && response.data !== undefined) {
                for (i = 0; i < response.data.length; i++) {
                    var area = {
                        areaId: response.data[i].areaId,
                        areaName: response.data[i].areaName,
                        isDefault: response.data[i].isDefault,
                        isChecked: true
                    };
                    $scope.subscribedAreas.push(area);
                }
                $scope.loadData();
            }
        }, function (err) {
            $rootScope.isLoading = false;
            utils.error.showErrorGet(err);
        });
    };

    var onLoad = function () {
        $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";

        if (!accessModule.checkAccessModule(constants.module.sce, constants.allowAccess.allowWrite)) {
            $scope.hideActionCreateNewSce = true;
        }
        else {
            $scope.hideActionCreateNewSce = false;
        }

        $scope.loadAreas();
        $("#multipleAreasMenu").kendoMenu({
            openOnClick: true
        });
    };
    onLoad();

    $scope.selectedChange = function () {
        $scope.loadData();
    };

    $scope.charChartTitle = "";

    $scope.currentYear = new Date().getFullYear();

    $scope.loadData = function () {
        $rootScope.isLoading = true;
        var selectedIds = [];
        var selectedAreasName = [];
        for (i = 0; i < $scope.subscribedAreas.length; i++) {
            if ($scope.subscribedAreas[i].isChecked) {
                selectedIds.push($scope.subscribedAreas[i].areaId);
                selectedAreasName.push($scope.subscribedAreas[i].areaName);
            }
        }
        var selectedAreas = selectedIds.join;
        // Gets Sce pending actions
        sceDashBoardService.getScePendingInDashboard({ areas: selectedAreas, take: "5" }).then(function (response) {
            $scope.pendingSceDataSource = response.data;
            if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                $scope.myPendingSce = response.data[0].total;
            } else {
                $scope.myPendingSce = 0;
            }
        }, function (error) {
            utils.error.showErrorGet(error);
        });

        // Gets ra pending actions
        sceDashBoardService.getRaPendingInDashboard({ areas: selectedAreas, take: "5" }).then(function (response) {
            $scope.pendingRaDataSource = response.data;
            if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                $scope.myPendingRa = response.data[0].total;
            } else {
                $scope.myPendingRa = 0;
            }
        }, function (error) {
            utils.error.showErrorGet(error);
        });
        $scope.sceDashBoardFilter.areasList = selectedIds;

        sceDashBoardService.getSCEDashBoard($scope.sceDashBoardFilter).then(function (response) {
            $rootScope.isLoading = false;
            $scope.setDashBoardData(response);
        }, function (error) {
            $rootScope.isLoading = false;
            utils.error.showErrorGet(error);
        });
        $scope.charChartTitle = "PPMSB ";
        $scope.charChartTitle = $scope.charChartTitle + $scope.currentYear + "(Areas ";

        for (i = 0; i < selectedAreasName.length; i++) {
            if (i !== selectedAreasName.length - 1) {
                $scope.charChartTitle = $scope.charChartTitle + selectedAreasName[i] + ", ";
            } else {
                $scope.charChartTitle = $scope.charChartTitle + selectedAreasName[i] + ")";
            }
        }
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var currentDate = new Date();

        $("#barChart").kendoChart({
            dataSource: {
                transport: {
                    read: function (options) {
                        sceDashBoardService.getSCELiveStatistic($scope.sceDashBoardFilter).then(function (response) {
                            if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                                options.success(response.data);
                            } else {
                                options.success([]);
                            }
                        }, function (err) {
                            options.error([]);
                            utils.error.showErrorGet(err);
                        });
                    }
                }
            },
            legend: {
                position: "bottom"
            },
            title: {
                text: $scope.charChartTitle,
                position: "bottom",
                color: "#3d3935",
                font: "14px/20px 'museo_sans',sans-serif"
            },
            seriesColors: ["#83B5E6", "#CBD34C", "#A9F5BC"],
            series: [
                {
                    field: "rm",
                    name: "RM",
                    stack: true,
                    color: function (point) {
                        if (point.dataItem.month === monthNames[currentDate.getMonth()]) {
                            return "#83B5E6";
                        } else {
                            return "#898989";
                        }
                    }
                },
                {
                    field: "pm",
                    name: "PM",
                    stack: true,
                    color: function (point) {
                        if (point.dataItem.month === monthNames[currentDate.getMonth()]) {
                            return "#CBD34C";
                        } else {
                            return "#CBCBCB";
                        }
                    }
                },
                {
                    field: "others",
                    name: "Others",
                    stack: true,
                    color: function (point) {
                        if (point.dataItem.month === monthNames[currentDate.getMonth()]) {
                            return "#A9F5BC";
                        } else {
                            return "#E6E6E6";
                        }
                    }
                }
            ],
            categoryAxis: {
                field: "month",
                majorGridLines: {
                    visible: false
                }
            },
            tooltip: {
                visible: true,
                template: "#= series.name #: #= value #"
            }
        });
    };

    $rootScope.filterByArea = [];

    $rootScope.filterByStatus = '';

    $rootScope.filterIsPendingReApprove = false;

    $rootScope.filterIsPendingReAcknowledge = false;

    $rootScope.filterIsPendingMoc = false;

    $scope.filter = function (e) {
        e.preventDefault();
        var target = e.currentTarget;
        _.each($scope.subscribedAreas, function (m) {
            if (m.isChecked) {
                $rootScope.filterByArea.push(m.areaId);
            }
        });
        var module = $(target).data("module");
        $rootScope.filterByStatus = $(target).data("status");
        if (($(target).data("pending-re-acknowledge") + '').toLowerCase() === "true") {
            $rootScope.filterIsPendingReAcknowledge = $(target).data("pending-re-acknowledge");
        }
        if (($(target).data("pending-re-approve") + '').toLowerCase() === "true") {
            $rootScope.filterIsPendingReApprove = $(target).data("pending-re-approve");
        }
        if (($(target).data("pending-moc") + '').toLowerCase() === "true") {
            $rootScope.filterIsPendingMoc = $(target).data("pending-moc");
        }

        switch (module) {
            case "sce":
                $state.go(constants.state.scelist);
                break;
            case "ra":
                $state.go(constants.state.raList);
                break;
        }
    };

    $scope.goToCreateSce = function (e) {
        e.preventDefault();
        $state.go(constants.state.scenew);
    };
}]);
app.controller('fileController', ['$rootScope', '$scope', '$state', '$window', '$stateParams', 'constants', 'fileService', function ($rootScope, $scope, $state, $window, $stateParams, constants, fileService) {

    $rootScope.$app.title = "Loading file ...";

    var onLoad = function (stateName) {
        switch (stateName) {
            case constants.state.sceViewFile:
                $rootScope.isLoading = true;

                fileService.checkExistFile($stateParams.fileId).then(function (response) {
                    $rootScope.isLoading = false;
                    var token = $window.localStorage.getItem(constants.localStorage.userSecret);
                    $window.location.href = constants.viewFile.fileSce.format($stateParams.sceId, $stateParams.fileId, token);
                }, function (error) {
                    $scope.messageError = error.message;
                    $rootScope.isLoading = false;
                });
                break;
        }

    };

    onLoad($state.current.name);

}]);
app.controller('messageAdminController', ['$rootScope', '$scope', '$state', '$stateParams', '$element', '$sce', '$timeout', 'constants', 'messageService', function ($rootScope, $scope, $state, $stateParams, $element, $sce, $timeout, constants, messageService) {

    $rootScope.$app.title = constants.titlePage.adminMessage;
    $scope.userProfile = $rootScope.$app.userProfile;

    $scope.showNameMe = "Me";

    $scope.countSelect = 0;

    $scope.hideContent = true;

    $scope.noItem = false;

    $scope.hideMessageWrapper = true;

    $scope.hideEditMessage = true;

    $scope.model = {
        areaId: '',
        moduleName: '',
        moduleId: '',
        message: '',
        messageSearch: ''
    };

    $scope.listOfArea = [];

    $scope.listOfAreaExpand = {};

    $scope.listMessage = [];

    $scope.messageBox = {
        areaName: "",
        timeLine: ""
    };

    $scope.search = function (keyEvent) {
        if (keyEvent.which === 13)
            $scope.searchClick();
    };

    $scope.searchClick = function () {
        var data = {
            moduleId: $scope.model.moduleId,
            areaId: $scope.model.areaId,
            messageId: '',
            keyWord: $scope.model.messageSearch
        };
        $rootScope.isLoading = true;
        messageService.getListMessageAdmin(data).then(function (response) {
            $scope.listMessage = [];
            var index = 1;
            _.each(response.data, function (item) {
                $scope.listMessage.push({
                    messageId: item.messageId,
                    image: item.image,
                    userName: item.userName,
                    description: $sce.trustAsHtml(utils.urlify(item.description)),
                    createdDateTime: item.createdDateTime,
                    time: new Date(item.createdDateTime).getTime(),
                    class: index % 2 === 0 ? "even" : "odd"
                });
                index++;
            });

            if ($scope.listMessage.length > 0) {
                $scope.messageBox.timeLine = "Last message " + $scope.getTimeLine($scope.listMessage[0].createdDateTime);
                var sorted = _.chain($scope.listMessage).sortBy('time').value();
                $scope.listMessage = sorted;
            }
            $scope.scrollBottom();
            $rootScope.isLoading = false;
        }, function (err) {
            $rootScope.isLoading = false;
        });
    };

    var onload = function () {
        $rootScope.isLoading = true;
        messageService.getListOfArea().then(function (response) {
            if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                $scope.hideContent = false;
                var index = 1;
                _.each(response.data, function (item) {
                    if (index === 1) {
                        $scope.hideEditMessage = false;
                        item.class = "active";
                        item.areaView[0].class = "active";
                        if (item.areaView !== null && item.areaView !== undefined && item.areaView.length > 0) {
                            var data = {
                                moduleId: item.moduleId,
                                moduleName: $scope.moduleName,
                                areaId: item.areaView[0].areaId,
                                messageId: '',
                                keyWord: ''
                            };

                            $rootScope.isLoading = true;
                            messageService.getListMessageAdmin(data).then(function (response) {
                                $scope.hideMessageWrapper = false;
                                $scope.listMessage = [];
                                var index = 1;
                                _.each(response.data, function (item) {
                                    $scope.listMessage.push({
                                        messageId: item.messageId,
                                        image: item.image,
                                        userName: item.userName,
                                        description: $sce.trustAsHtml(utils.urlify(item.description)),
                                        createdDateTime: item.createdDateTime,
                                        time: new Date(item.createdDateTime).getTime(),
                                        class: index % 2 === 0 ? "even" : "odd"
                                    });
                                    index++;
                                });

                                if ($scope.listMessage.length > 0) {
                                    $scope.model.moduleId = item.moduleId;
                                    $scope.model.moduleName = item.moduleName;
                                    $scope.model.areaId = item.areaView[0].areaId;
                                    $scope.messageBox.areaName = item.areaView[0].areaName;
                                    $scope.messageBox.timeLine = "Last message " + $scope.getTimeLine(item.areaView[0].createdDateTime);

                                    var sorted = _.chain($scope.listMessage).sortBy('time').value();
                                    $scope.listMessage = sorted;
                                }
                                $scope.scrollBottom();
                                $rootScope.isLoading = false;
                            }, function (err) {
                                $rootScope.isLoading = false;
                            });
                        }
                    }

                    if (item.areaView !== null && item.areaView !== undefined && item.areaView.length > 0) {
                        _.each(item.areaView, function (area) {
                            area.message = $sce.trustAsHtml(utils.urlify(area.message));
                        });
                    }

                    $scope.listOfArea.push(item);
                    index++;
                });
            }
            else {
                $scope.hideContent = true;
                $scope.noItem = true;
            }
            $rootScope.isLoading = false;
        }, function (err) {
            utils.error.showErrorGet(err);
            $rootScope.isLoading = false;
            $scope.hideContent = true;
            $scope.noItem = true;
        });
    };
    onload();

    $scope.selectArea = function (e, moduleItem, areaId) {
        e.preventDefault();

        $scope.countSelect = 0;
        $scope.hideEditMessage = false;
        $scope.model.moduleId = moduleItem.moduleId;
        $scope.model.areaId = areaId;
        $scope.model.moduleName = moduleItem.areaName;
        $scope.model.message = '';

        _.each($scope.listOfArea, function (item) {

            if (item.moduleId === moduleItem.moduleId) {
                item.class = "active";
                _.each(item.areaView, function (area) {
                    if (area.areaId === areaId) {
                        area.class = "active";
                        $scope.messageBox.areaName = area.areaName;
                        $scope.messageBox.timeLine = "Last message " + $scope.getTimeLine(area.createdDateTime);
                    }
                    else {
                        area.class = "";
                    }
                });
            }
            else {
                item.class = "";
                _.each(item.areaView, function (area) {
                    area.class = "";
                });
            }
        });

        var data = {
            moduleId: moduleItem.moduleId,
            moduleName: moduleItem.areaName,
            areaId: areaId,
            messageId: '',
            keyWord: $scope.model.messageSearch
        };
        $rootScope.isLoading = true;
        messageService.getListMessageAdmin(data).then(function (response) {
            $scope.listMessage = [];
            var index = 1;
            _.each(response.data, function (item) {
                $scope.listMessage.push({
                    messageId: item.messageId,
                    image: item.image,
                    userName: item.userName,
                    description: $sce.trustAsHtml(utils.urlify(item.description)),
                    createdDateTime: item.createdDateTime,
                    time: new Date(item.createdDateTime).getTime(),
                    class: index % 2 === 0 ? "even" : "odd"
                });
                index++;
            });

            if ($scope.listMessage.length > 0) {
                var sorted = _.chain($scope.listMessage).sortBy('time').value();
                $scope.listMessage = sorted;
                $scope.messageBox.timeLine = "Last message " + $scope.getTimeLine($scope.listMessage[$scope.listMessage.length - 1].createdDateTime);
            }
            $scope.scrollBottom();
            $rootScope.isLoading = false;
        }, function (err) {
            $rootScope.isLoading = false;
        });
    };

    $scope.sendMessage = function () {
        var data = {
            moduleName: $scope.model.moduleName,
            areaId: $scope.model.areaId,
            description: $scope.model.message            
        };
        $rootScope.isLoading = true;
        messageService.sendMessage(data).then(function (response) {
            var date = new Date();
            $scope.listMessage.push({
                messageId: response.data,
                image: $scope.userProfile.image,
                userName: $scope.showNameMe,
                description: $sce.trustAsHtml(utils.urlify($scope.model.message)),
                createdDateTime: date,
                class: ($scope.listMessage.length + 1) % 2 === 0 ? 'even' : 'odd'
            });
            _.each($scope.listOfArea, function (item) {
                if (item.moduleId === $scope.model.moduleId) {
                    _.each(item.areaView, function (area) {
                        if (area.areaId === $scope.model.areaId) {
                            area.userName = $scope.showNameMe;
                            area.message = $sce.trustAsHtml(utils.urlify($scope.model.message));
                            area.createdDateTime = date;
                        }
                    });
                }
            });

            $scope.messageBox.timeLine = "Last message just now";

            $scope.model.message = '';
            $scope.scrollBottom();
            $rootScope.isLoading = false;
        }, function (err) {
            $rootScope.isLoading = false;
            utils.error.showErrorGet(err);
            var option = {
                id: "dialogError",
                title: "Send Message",
                lableClose: "CLOSE",
                content: err.message,
                width: 300
            };
            utils.dialog.showDialog(option);
        });
    };

    $scope.editMessage = function (e) {
        e.preventDefault();
        $scope.hideEditMessage = true;
    };

    $scope.cancelDelete = function (e) {
        e.preventDefault();
        $scope.hideEditMessage = false;

        _.each($scope.listMessage, function (message) {
            message.checked = false;
        });
    };

    $scope.changeCheckBox = function () {
        $scope.countSelect = 0;
        _.each($scope.listMessage, function (message) {
            if (message.checked === true) {
                $scope.countSelect++;
            }
        });
    };

    $scope.deleteMessage = function (e) {
        e.preventDefault();
        var option = {};
        if ($scope.countSelect < 1) {
            option = {
                id: "dialogError",
                title: "Delete message",
                lableClose: "CLOSE",
                content: "You have not selected any record.",
                width: 300
            };
            utils.dialog.showDialog(option);
        }
        else {

            option = {
                id: "dialogInfor",
                title: "Delete " + $scope.countSelect + " message",
                lableClose: "CANCEL",
                lableOk: "DELETE",
                content: "Delete message selected. Proceed?",
                width: 380
            };
            utils.dialog.showConfirm(option, function () {

                var arrayMessageId = [];
                _.each($scope.listMessage, function (message) {
                    if (message.checked === true) {
                        arrayMessageId.push(message.messageId);
                    }
                });

                $rootScope.isLoading = true;
                messageService.deleteMessages(arrayMessageId).then(function (response) {
                    $rootScope.isLoading = false;
                    var option = {
                        id: "dialogError",
                        title: "Delete message",
                        lableClose: "CLOSE",
                        content: "Delete messages successful.",
                        width: 300
                    };

                    utils.dialog.showDialog(option, function () {
                        $scope.hideEditMessage = false;
                        $rootScope.isLoading = true;
                        var data = {
                            moduleId: $scope.model.moduleId,
                            areaId: $scope.model.areaId,
                            messageId: '',
                            keyWord: $scope.model.messageSearch
                        };
                        messageService.getListMessageAdmin(data).then(function (response) {
                            $scope.listMessage = [];
                            var index = 1;
                            _.each(response.data, function (item) {
                                $scope.listMessage.push({
                                    messageId: item.messageId,
                                    image: item.image,
                                    userName: item.userName,
                                    description: $sce.trustAsHtml(utils.urlify(item.description)),
                                    createdDateTime: item.createdDateTime,
                                    time: new Date(item.createdDateTime).getTime(),
                                    class: index % 2 === 0 ? "even" : "odd"
                                });
                                index++;
                            });

                            if ($scope.listMessage.length > 0) {
                                var sorted = _.chain($scope.listMessage).sortBy('time').value();
                                $scope.listMessage = sorted;
                                $scope.messageBox.timeLine = "Last message " + $scope.getTimeLine($scope.listMessage[$scope.listMessage.length - 1].createdDateTime);
                            }
                            $scope.scrollBottom();
                            $rootScope.isLoading = false;
                        }, function (err) {
                            $rootScope.isLoading = false;
                        });
                    });
                }, function (err) {
                    utils.error.showErrorGet(err);
                    var option = {
                        id: "dialogError",
                        title: "Delete message",
                        lableClose: "CLOSE",
                        content: err.message,
                        width: 300
                    };
                    utils.dialog.showDialog(option);
                    $rootScope.isLoading = false;
                });

            });
        }
    };

    $scope.triggerEventScroll = true;

    $scope.scrollBottom = function () {
        $scope.triggerEventScroll = false;
        $timeout(function () {
            var scroll = $($element).find("[data-control='scroll']");
            if ($(scroll).length > 0) {
                var height = scroll[0].scrollHeight - $(scroll).height();
                $(scroll).stop().animate({ scrollTop: height }, "slow", function () {
                    $timeout(function () {
                        $scope.triggerEventScroll = true;
                    }, 10);
                });
            }
        }, 100);
    };

    $scope.getTimeLine = function (datetime) {
        return utils.timeLine(datetime);
    };

    var scroll = $($element).find("[data-control='scroll']");

    if ($(scroll).length > 0) {
        angular.element(scroll).bind("scroll", function () {
            var data = {};
            if ($scope.triggerEventScroll === true) {
                if (this.scrollTop === 0) {
                    $scope.triggerEventScroll = false;
                    data = {
                        moduleId: $scope.model.moduleId,
                        areaId: $scope.model.areaId,
                        messageId: $scope.listMessage.length > 0 ? $scope.listMessage[0].messageId : '',
                        scroll: "up",
                        keyWord: $scope.model.messageSearch
                    };
                    messageService.getListMessageAdmin(data).then(function (response) {
                        var index = 1;
                        _.each(response.data, function (item) {
                            $scope.listMessage.push({
                                messageId: item.messageId,
                                image: item.image,
                                userName: item.userName,
                                description: $sce.trustAsHtml(utils.urlify(item.description)),
                                createdDateTime: item.createdDateTime,
                                time: new Date(item.createdDateTime).getTime(),
                                class: index % 2 === 0 ? "even" : "odd"
                            });
                            index++;
                        });

                        if ($scope.listMessage.length > 0) {
                            var sorted = _.chain($scope.listMessage).sortBy('time').value();
                            $scope.listMessage = sorted;
                            $scope.messageBox.timeLine = "Last message " + $scope.getTimeLine($scope.listMessage[$scope.listMessage.length - 1].createdDateTime);

                            _.each($scope.listOfArea, function (item) {

                                _.each(item.areaView, function (area) {
                                    if (area.areaId === $scope.model.areaId && area.moduleId === $scope.model.moduleId) {
                                        var itemMessageLast = $scope.listMessage[$scope.listMessage.length - 1];
                                        area.userName = itemMessageLast.userName;
                                        area.createdDateTime = itemMessageLast.createdDateTime;
                                        area.message = itemMessageLast.createdDateTime;
                                    }
                                });

                            });
                        }
                        $scope.triggerEventScroll = true;

                    }, function (err) {
                        utils.error.showErrorGet(err);
                    });
                }
                if (this.scrollTop + this.offsetHeight >= this.scrollHeight) {
                    $scope.triggerEventScroll = false;
                    data = {
                        moduleId: $scope.model.moduleId,
                        areaId: $scope.model.areaId,
                        messageId: $scope.listMessage.length > 0 ? $scope.listMessage[$scope.listMessage.length - 1].messageId : '',
                        scroll: "down",
                        keyWord: $scope.model.messageSearch
                    };

                    messageService.getListMessageAdmin(data).then(function (response) {
                        var index = 1;
                        _.each(response.data, function (item) {
                            $scope.listMessage.push({
                                messageId: item.messageId,
                                image: item.image,
                                userName: item.userName,
                                description: $sce.trustAsHtml(utils.urlify(item.description)),
                                createdDateTime: item.createdDateTime,
                                time: new Date(item.createdDateTime).getTime(),
                                class: index % 2 === 0 ? "even" : "odd"
                            });
                            index++;
                        });

                        if ($scope.listMessage.length > 0) {
                            var sorted = _.chain($scope.listMessage).sortBy('time').value();
                            $scope.listMessage = sorted;
                            $scope.messageBox.timeLine = "Last message " + $scope.getTimeLine($scope.listMessage[$scope.listMessage.length - 1].createdDateTime);

                            _.each($scope.listOfArea, function (item) {

                                _.each(item.areaView, function (area) {
                                    if (area.areaId === $scope.model.areaId && area.moduleId === $scope.model.moduleId) {
                                        var itemMessageLast = $scope.listMessage[$scope.listMessage.length - 1];
                                        area.userName = itemMessageLast.userName;
                                        area.createdDateTime = itemMessageLast.createdDateTime;
                                        area.message = itemMessageLast.createdDateTime;
                                    }
                                });

                            });
                        }
                        $scope.scrollBottom();

                    }, function (err) {
                        utils.error.showErrorGet(err);
                    });
                }
            }
        });
    }

}]);
app.controller('messageBoxController', ['$rootScope', '$scope', '$element', '$state', '$stateParams', '$timeout', '$sce', 'constants', 'areaService', 'messageService', function ($rootScope, $scope, $element, $state, $stateParams, $timeout, $sce, constants, areaService, messageService) {

    $scope.userProfile = $rootScope.$app.userProfile;

    $scope.moduleName = $($element).attr("data-module");

    $scope.showNameMe = "Me";

    $scope.model = {
        areaId: '',
        moduleName: $scope.moduleName,
        message: ''
    };

    $scope.listMessage = [];

    $scope.areaOption = {
        dataTextField: 'description',
        dataValueField: 'lookupAreaId',
        dataSource: {
            transport: {
                read: function (options) {
                    var arrayLookupArea = [{ lookupAreaId: "", description: "All" }];
                    areaService.getAreaByUserSubscription($scope.userProfile.userProfileId).then(function (response) {

                        _.each(response.data, function (item) {
                            arrayLookupArea.push({ lookupAreaId: item.lookupAreaId, description: item.description });
                        });

                        options.success(arrayLookupArea);

                    }, function (err) {
                        options.success(arrayLookupArea);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        }
    };

    $scope.onAreaChange = function () {
        $scope.triggerEventScroll = false;
        $scope.listMessage = [];
        var data = {
            moduleName: $scope.model.moduleName,
            areaId: $scope.model.areaId,
            messageId: ''
        };
        $scope.isProcess = true;
        messageService.getListMessageDashBoard(data).then(function (response) {
            var index = 1;
            _.each(response.data, function (item) {
                $scope.listMessage.push({
                    messageId: item.messageId,
                    image: item.image,
                    userName: item.userName,
                    description: $sce.trustAsHtml(utils.urlify(item.description)),
                    createdDateTime: item.createdDateTime,
                    time: new Date(item.createdDateTime).getTime(),
                    class: index % 2 === 0 ? 'even' : 'odd'
                });
                index++;
            });

            if ($scope.listMessage.length > 0) {
                var sorted = _.chain($scope.listMessage).sortBy('time').value();
                $scope.listMessage = sorted;
            }
            $scope.scrollBottom();
            $scope.isProcess = false;
        }, function (err) {
            $scope.isProcess = false;
        });
    };

    $scope.isProcess = false;

    var onload = function () {

        var data = {
            moduleName: $scope.model.moduleName,
            areaId: '',
            messageId: ''
        };
        $scope.isProcess = true;
        messageService.getListMessageDashBoard(data).then(function (response) {
            var index = 1;
            _.each(response.data, function (item) {
                $scope.listMessage.push({
                    messageId: item.messageId,
                    image: item.image,
                    userName: item.userName,
                    description: $sce.trustAsHtml(utils.urlify(item.description)),
                    createdDateTime: item.createdDateTime,
                    time: new Date(item.createdDateTime).getTime(),
                    class: index % 2 === 0 ? "even" : "odd"
                });
                index++;
            });

            if ($scope.listMessage.length > 0) {
                var sorted = _.chain($scope.listMessage).sortBy('time').value();
                $scope.listMessage = sorted;
            }
            $scope.scrollBottom();
            $scope.isProcess = false;
        }, function (err) {
            $scope.isProcess = false;
        });
    };
    onload();

    $scope.sendMessage = function () {
        var data = {
            moduleName: $scope.model.moduleName,
            areaId: $scope.model.areaId,
            description: $scope.model.message
        };
        $scope.isProcess = true;
        messageService.sendMessage(data).then(function (response) {
            $scope.listMessage.push({
                messageId: response.data,
                image: $scope.userProfile.image,
                userName: $scope.showNameMe,
                description: $sce.trustAsHtml(utils.urlify($scope.model.message)),
                createdDateTime: new Date(),
                class: ($scope.listMessage.length + 1) % 2 === 0 ? 'even' : 'odd'
            });
            $scope.model.message = '';
            $scope.scrollBottom();
            $scope.isProcess = false;
        }, function (err) {
            $scope.isProcess = false;
            utils.error.showErrorGet(err);
            var option = {
                id: "dialogError",
                title: "Send Message",
                lableClose: "CLOSE",
                content: err.message,
                width: 300
            };
            utils.dialog.showDialog(option);
        });
    };

    $scope.getTimeLine = function (datetime) {
        return utils.timeLine(datetime);
    };

    $scope.triggerEventScroll = true;

    $scope.scrollBottom = function () {
        $scope.triggerEventScroll = false;
        $timeout(function () {
            var scroll = $($element).find("[data-control='scroll']");
            if ($(scroll).length > 0) {
                var height = scroll[0].scrollHeight - $(scroll).height();
                $(scroll).stop().animate({ scrollTop: height }, "slow", function () {
                    $timeout(function () {
                        $scope.triggerEventScroll = true;
                    }, 10);
                });
            }
        }, 100);
    };

    var scroll = $($element).find("[data-control='scroll']");

    if ($(scroll).length > 0) {
        angular.element(scroll).bind("scroll", function () {
            var data = {};
            if ($scope.triggerEventScroll === true) {
                if (this.scrollTop === 0) {
                    $scope.triggerEventScroll = false;
                    data = {
                        moduleName: $scope.model.moduleName,
                        areaId: $scope.model.areaId,
                        messageId: $scope.listMessage.length > 0 ? $scope.listMessage[0].messageId : '',
                        scroll: "up"
                    };
                    $scope.isProcess = true;
                    messageService.getListMessageDashBoard(data).then(function (response) {
                        var index = 1;
                        _.each(response.data, function (item) {
                            $scope.listMessage.push({
                                messageId: item.messageId,
                                image: item.image,
                                userName: item.userName,
                                description: $sce.trustAsHtml(utils.urlify(item.description)),
                                createdDateTime: item.createdDateTime,
                                time: new Date(item.createdDateTime).getTime(),
                                class: index % 2 === 0 ? "even" : "odd"
                            });
                            index++;
                        });

                        if ($scope.listMessage.length > 0) {
                            var sorted = _.chain($scope.listMessage).sortBy('time').value();
                            $scope.listMessage = sorted;
                        }
                        $scope.triggerEventScroll = true;
                        $scope.isProcess = false;
                    }, function (err) {
                        $scope.isProcess = false;
                        utils.error.showErrorGet(err);
                    });
                }
                if (this.scrollTop + this.offsetHeight >= this.scrollHeight) {
                    $scope.triggerEventScroll = false;
                    data = {
                        moduleName: $scope.model.moduleName,
                        areaId: $scope.model.areaId,
                        messageId: $scope.listMessage.length > 0 ? $scope.listMessage[$scope.listMessage.length - 1].messageId : '',
                        scroll: "down"
                    };
                    $scope.isProcess = true;
                    messageService.getListMessageDashBoard(data).then(function (response) {
                        var index = 1;
                        _.each(response.data, function (item) {
                            $scope.listMessage.push({
                                messageId: item.messageId,
                                image: item.image,
                                userName: item.userName,
                                description: $sce.trustAsHtml(utils.urlify(item.description)),
                                createdDateTime: item.createdDateTime,
                                time: new Date(item.createdDateTime).getTime(),
                                class: index % 2 === 0 ? "even" : "odd"
                            });
                            index++;
                        });

                        if ($scope.listMessage.length > 0) {
                            var sorted = _.chain($scope.listMessage).sortBy('time').value();
                            $scope.listMessage = sorted;
                        }
                        $scope.scrollBottom();
                        $scope.isProcess = false;
                    }, function (err) {
                        $scope.isProcess = false;
                        utils.error.showErrorGet(err);
                    });
                }
            }
        });
    }
}]);
app.controller('notificationBoxController',
    ['$rootScope', '$scope', '$window', '$state', '$stateParams', '$timeout', '$sce', 'constants', 'areaService', 'notificationService',
    function ($rootScope, $scope, $window, $state, $stateParams, $timeout, $sce, constants, areaService, notificationService) {
        $scope.listNotification = [];
        $rootScope.countUnreadNotification = 0;
        $rootScope.hasUnread = 'hide-item';
        var isProcessTriggerClick = true;

        $scope.getTimeLine = function (datetime) {
            return utils.timeLine(datetime);
        };

        $scope.getTopNotification = function () {
            if (!isProcessTriggerClick)
                return false;
            isProcessTriggerClick = false;
            $scope.isProcess = true;
            $scope.listNotification = [];
            notificationService.getTopNotification().then(function (response) {
                _.each(response.data, function (item) {
                    $scope.listNotification.push({
                        notificationId: item.notificationId,
                        messages: item.messages,
                        createdDateTime: $scope.getTimeLine(item.createdDateTime),
                        isRead: item.isRead,
                        hasAction: item.hasAction,
                        url: item.url
                    });
                });
                $scope.isProcess = false;
                isProcessTriggerClick = true;
            }, function (err) {
                $scope.isProcess = false;
                isProcessTriggerClick = true;
                $scope.listNotification = [];
            });
        };

        notificationService.countUnreadNotification().then(function (response) {
            $rootScope.countUnreadNotification = response.data;
            if (response.data > 0)
                $rootScope.hasUnread = '';
        }, function (err) {
            $rootScope.countUnreadNotification = 0;
            $rootScope.hasUnread = 'hide-item';
        });

        $scope.goPageNotifications = function () {
            $state.go(constants.state.notificationList);
        };

        // Start action
        $scope.markAsAllReadNotification = function () {
            notificationService.markAsAllReadNotification().then(function (response) {
                if (response.data) {
                    $rootScope.countUnreadNotification = 0;
                    $rootScope.hasUnread = 'hide-item';
                }
                return response.data;
            }, function (err) {
                //
            });
        };

        $scope.markAsReadNotification = function (notificationId, url) {
            notificationService.markAsReadNotification(notificationId).then(function (respone) {
                if (respone.data != -1) {
                    var temp = url.split("/");
                    if (temp[0].indexOf("sce") == 0) {
                        $rootScope.countUnreadNotification -= (respone.data == 1 ? 1 : 0);
                        $state.go(constants.state.scedetail, { sceId: temp[1] });
                        $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                    } else if (temp[0].indexOf("ra") == 0) {
                        $rootScope.countUnreadNotification -= (respone.data == 1 ? 1 : 0);
                        $state.go(constants.state.raDetail, { sceId: temp[1], raId: temp[2] });
                        $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                    } else if (temp[0].indexOf("asm") == 0) {
                        $rootScope.countUnreadNotification -= (respone.data == 1 ? 1 : 0);
                        $state.go(constants.state.asmDetail, { alarmId: temp[1] });
                        $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
                    } else {
                        $scope.noticeDialog('Notice', constants.messages.error);
                    }
                    if ($rootScope.countUnreadNotification == 0) {
                        $rootScope.hasUnread = 'hide-item';
                    }
                } else {
                    $scope.noticeDialog('Notice', respone.message);
                }
            }, function (err) {
                $scope.noticeDialog('Notice', constants.messages.error);
            });
        };
        // End action
        $scope.noticeDialog = function (title, content) {
            return $("<div></div>").kendoDialog({
                title: title,
                content: content
            }).data("kendoDialog").open();
        };
    }]);
app.controller('notificationListController',
    ['$rootScope', '$scope', '$window', '$state', '$stateParams', '$timeout', 'constants', 'notificationService',
    function ($rootScope, $scope, $window, $state, $stateParams, $timeout, constants, notificationService) {

        $scope.getTimeLine = function (datetime) {
            return utils.timeLine(datetime);
        };

        $scope.mainGridOptions = {
            dataSource: $scope.allDataSource,
            scrollable: false,
            pageable: {
                pageSizes: true,
                buttonCount: 5
            },
            columns: [{
                field: "notificationId",
                title: "",
                width: "100%",
                template: function (dataItem) {
                    var temp = "<div class=\"notification-group-items\">" +
                        "<div class=\"" + (dataItem.isRead == false ? "notification-unread" : "notification-read") + " " + (dataItem.hasAction == true ? "notification-require-action" : "notification-unrequire-action") + "\">" +
                            "<div>" +
                                "<a class=\"notification-title\" href=\"" + dataItem.url + "\" data-ng-click=\"markAsReadNotification('" + dataItem.notificationId + "', '" + dataItem.url + "');\"><span>" + dataItem.messages + "</span></a>" +
                                "<span class=\"notification-date\">" + $scope.getTimeLine(dataItem.createdDateTime) + "</span>" +
                            "</div>" +
                        "</div>" +
                    "</div>";
                    return temp;
                }
            }, {
                hidden: true,
                field: "groupField",
                title: "",
                groupHeaderTemplate: function (dataItem) {
                    var temp = "<div class=\"notification-group-title\">" +
                            "<span>" + dataItem.value.replace(/\d_/i, "") + "</span>" +
                        "</div>";
                    return temp;
                }
            }],
            noRecords: true,
            messages: {
                noRecords: "There is no data on current page"
            },
            selectable: "row",
            change: function (e) {
                e.preventDefault();
                var dataItem = this.dataItem(this.select());
                markAsReadNotification(dataItem.notificationId, dataItem.url);
            }
        };

        $scope.allDataSource = new kendo.data.DataSource({
            transport: {
                read: function (options) {
                    $rootScope.isLoading = true;
                    notificationService.getListNotification({
                        skip: (options.data.page - 1) * options.data.pageSize,
                        take: options.data.take
                    }).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                        $rootScope.isLoading = false;
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                        $rootScope.isLoading = false;
                    });
                }
            },
            schema: {
                model: {
                    fields: {
                        notificationId: { type: "string" },
                        groupField: { type: "string" }
                    }
                },
                total: function (response) {
                    return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
                }
            },
            pageSize: 20,
            serverPaging: true,
            group: {
                field: "groupField",
                dir: "asc"
            }
        });

        // Start action
        $scope.markAsAllReadNotification = function () {
            notificationService.markAsAllReadNotification().then(function (response) {
                if (response.data) {
                    $rootScope.countUnreadNotification = 0;
                    $rootScope.hasUnread = 'hide-item';
                }
                return response.data;
            }, function (err) {
                //
            });
        };

        var markAsReadNotification = function (notificationId, url) {
            notificationService.markAsReadNotification(notificationId).then(function (respone) {
                if (respone.data != -1) {
                    var temp = url.split("/");
                    if (temp[0].indexOf("sce") == 0) {
                        $rootScope.countUnreadNotification -= (respone.data == 1 ? 1 : 0);
                        $state.go(constants.state.scedetail, { sceId: temp[1] });
                    } else if (temp[0].indexOf("ra") == 0) {
                        $rootScope.countUnreadNotification -= (respone.data == 1 ? 1 : 0);
                        $state.go(constants.state.raDetail, { sceId: temp[1], raId: temp[2] });
                    } else if (temp[0].indexOf("asm") == 0) {
                        $rootScope.countUnreadNotification -= (respone.data == 1 ? 1 : 0);
                        $state.go(constants.state.asmDetail, { alarmId: temp[1] });
                    } else {
                        $scope.noticeDialog('Notice', constants.messages.error);
                    }
                    if ($rootScope.countUnreadNotification == 0) {
                        $rootScope.hasUnread = 'hide-item';
                    }
                } else {
                    $scope.noticeDialog('Notice', respone.message);
                }
            }, function (err) {
                $scope.noticeDialog('Notice', constants.messages.error);
            });
        };
        // End action
        $scope.noticeDialog = function (title, content) {
            return $("<div></div>").kendoDialog({
                title: title,
                content: content
            }).data("kendoDialog").open();
        };
    }]);
app.controller('rotfDashboardOperationController',
    [
        '$rootScope', '$window', '$state', '$stateParams', '$scope', '$location', 'authService', 'appSettings',
        'constants', 'rotfServices',
        function ($rootScope, $window, $state, $stateParams, $scope, $location, authService, appSettings, constants, rotfServices) {


        }
    ]);
app.controller('rotfDashboardOverviewController',
    ['$rootScope', '$window', '$state', '$stateParams', '$scope', '$location', 'authService', 'appSettings',
        'constants', 'rotfServices',
        function($rootScope, $window, $state, $stateParams, $scope, $location, authService, appSettings, constants, rotfServices) {

            $scope.areasList = {};
            $scope.OEEList = {};
            
            loadOEEList();
            loadAreasList();

            $scope.onDrop = function (srcList, srcIndex, targetList, targetIndex) {
                // Copy the item from source to target.
                targetList.splice(targetIndex, 0, srcList[srcIndex]);
                // Remove the item from the source, possibly correcting the index first.
                // We must do this immediately, otherwise ng-repeat complains about duplicates.
                if (srcList === targetList && targetIndex <= srcIndex) srcIndex++;
                srcList.splice(srcIndex, 1);
                // By returning true from dnd-drop we signalize we already inserted the item.
                return true;
            };

            $scope.onSelected = function (list, index) {
                var item = list[index];
                console.log('Selected on item:' + item);

                // PUT logic go to operation page by area id here.
            }

            function loadOEEList() {
                rotfServices.getOEE().then(function (response) {
                    $scope.OEEList = response.data;
                }, function (error) {
                    utils.error.showErrorGet(error);
                });
            }

            function loadAreasList() {
                $scope.areasList =
                    [
                        {
                            areaName: '1A',
                            trophy: 2, // 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 48, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'CRU-2',
                                    value: { throughput: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'ISOM',
                                    value: { throughput: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'DHT',
                                    value: { throughput: 153.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '1B',
                            trophy: 1, // 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 154, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'CRU-1',
                                    value: { throughput: 157.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '2A',
                            trophy: 0, // 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 0, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'CDU-2',
                                    value: { throughput: 157.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '2B',
                            trophy: 0, // 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 0, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'CRU-2',
                                    value: { throughput: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'ISOM',
                                    value: { throughput: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'DHT',
                                    value: { throughput: 153.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '3A',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 3, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'HCK',
                                    value: { throughput: 153.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '3B',
                            trophy: 3, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 14, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'DCU',
                                    value: { throughput: 157.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '4AB',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 20, // 
                            listOfUnits: [
                                {
                                    type: 'percentage', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'B2S',
                                    value: 60
                                },
                                {
                                    type: 'number', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'BERTH',
                                    value: 6
                                },
                                {
                                    type: 'percentage', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'Blender',
                                    value: 90
                                }
                            ]
                        },
                        {
                            areaName: '4C',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 12, // 
                            listOfUnits: [
                                {
                                    type: 'number', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'RIB-1',
                                    value: 18.5
                                },
                                {
                                    type: 'on_off', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'T6647',
                                    value: 'ON'
                                },
                                {
                                    type: 'on_off', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'T6649',
                                    value: 'OFF'
                                },
                            ]
                        },
                        {
                            areaName: '5AC',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 42, // 
                            listOfUnits: [
                                {
                                    type: 'TPD', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'STEAM',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'MDW', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'BERTH',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'pressure', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'NG',
                                    value: { actual: 157.14, target: 156 }
                                }
                            ]
                        },
                        {
                            areaName: '5B',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 12, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'SRU-1',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD
                                    name: 'SRU-2',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'pressure', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'NG',
                                    value: { actual: 157.14, target: 156 }
                                }
                            ]
                        },
                        {
                            areaName: '6',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 42, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW, TPD
                                    name: 'VDU-1',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW, MDW
                                    name: 'POWER',
                                    value: { actual: 157.14, target: 156 }
                                }
                            ]
                        },
                    ];


            }
        }]);
app.controller('rotfOverviewController',
    ['$rootScope', '$window', '$state', '$stateParams', '$scope', '$sce', '$location', 'authService', 'appSettings',
        'constants', 'rotfServices',
        function($rootScope, $window, $state, $stateParams, $scope, $sce, $location, authService, appSettings, constants, rotfServices) {

            $scope.areasList = {};
            $scope.OEEList = {};
            $scope.NPATList = {};
            
            loadNPATList();
            loadOEEList();
            loadAreasList();

            $scope.onDrop = function (srcList, srcIndex, targetList, targetIndex) {
                // Copy the item from source to target.
                targetList.splice(targetIndex, 0, srcList[srcIndex]);
                // Remove the item from the source, possibly correcting the index first.
                // We must do this immediately, otherwise ng-repeat complains about duplicates.
                if (srcList == targetList && targetIndex <= srcIndex) srcIndex++;
                srcList.splice(srcIndex, 1);
                // By returning true from dnd-drop we signalize we already inserted the item.
                return true;
            };

            $scope.onSelected = function (list, index) {
                var item = list[index];
                console.log('Selected on item:' + item);

                // PUT logic go to operation page by area id here.
            }

            function loadNPATList() {
                rotfServices.getNPAT().then(function (response) {
                    $scope.NPATList = response.data;
                }, function (error) {
                    utils.error.showErrorGet(error);
                });
            }

            function loadOEEList() {
                rotfServices.getOEE().then(function (response) {
                    $scope.OEEList = response.data;
                }, function (error) {
                    utils.error.showErrorGet(error);
                });
            }

            function loadAreasList() {
                $scope.areasList =
                    [
                        {
                            areaName: '1A',
                            trophy: 2, // 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 48, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'CRU-2',
                                    value: { throughput: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'ISOM',
                                    value: { throughput: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'DHT',
                                    value: { throughput: 153.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '1B',
                            trophy: 1, // 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 154, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'CRU-1',
                                    value: { throughput: 157.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '2A',
                            trophy: 0, // 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 0, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'CDU-2',
                                    value: { throughput: 157.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '2B',
                            trophy: 0, // 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 0, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'CRU-2',
                                    value: { throughput: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'ISOM',
                                    value: { throughput: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'DHT',
                                    value: { throughput: 153.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '3A',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 3, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'HCK',
                                    value: { throughput: 153.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '3B',
                            trophy: 3, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 14, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'DCU',
                                    value: { throughput: 157.14, target: 156 }
                                }
                            ]
                        },
                        // area
                        {
                            areaName: '4AB',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 20, // 
                            listOfUnits: [
                                {
                                    type: 'percentage', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'B2S',
                                    value: 60
                                },
                                {
                                    type: 'number', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'BERTH',
                                    value: 6
                                },
                                {
                                    type: 'percentage', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'Blender',
                                    value: 90
                                }
                            ]
                        },
                        {
                            areaName: '4C',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 12, // 
                            listOfUnits: [
                                {
                                    type: 'number', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'RIB-1',
                                    value: 18.5
                                },
                                {
                                    type: 'on_off', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'T6647',
                                    value: 'ON'
                                },
                                {
                                    type: 'on_off', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'T6649',
                                    value: 'OFF'
                                },
                            ]
                        },
                        {
                            areaName: '5AC',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 42, // 
                            listOfUnits: [
                                {
                                    type: 'TPD', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'STEAM',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'MDW', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'BERTH',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'pressure', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'NG',
                                    value: { actual: 157.14, target: 156 }
                                }
                            ]
                        },
                        {
                            areaName: '5B',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 12, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'SRU-1',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD
                                    name: 'SRU-2',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'pressure', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW
                                    name: 'NG',
                                    value: { actual: 157.14, target: 156 }
                                }
                            ]
                        },
                        {
                            areaName: '6',
                            trophy: 0, // 0: none, 1: gold, 2: silver, 3: Bronze
                            numOfGoodDayStreak: 42, // 
                            listOfUnits: [
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW, TPD
                                    name: 'VDU-1',
                                    value: { actual: 157.14, target: 156 }
                                },
                                {
                                    type: 'throughput_taget', // throughput_taget, pressure, on_off, percentage, number, TPD, MDW, MDW
                                    name: 'POWER',
                                    value: { actual: 157.14, target: 156 }
                                }
                            ]
                        },
                    ];


            }
        }]);

app.controller('sceController', ['$rootScope', '$window', '$state', '$stateParams', '$scope', '$sce', '$location', 'authService', 'appSettings', 'constants', 'sceServices', 'raServices',
function ($rootScope, $window, $state, $stateParams, $scope, $sce, $location, authService, appSettings, constants, sceServices, raServices) {
    //#region common

    // Get current logged-in user profile
    $scope.userProfile = $rootScope.$app.userProfile;
    $scope.isAdmin = $scope.userProfile.isAdmin;
    $scope.hasApplicantRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",1,") >= 0;
    $scope.showReApprover = false;


    // Model
    $scope.model = {
        sceNo: "",
        areaId: "",
        radio: "",
        unit: "",
        tagNo: "",
        otherTagNo: "",
        equipmentNo: "",
        othersTypesOfByPass: "",
        categoryId: "",
        estimationDurationForByPass: "",
        safetyIntegrityLvlId: "",
        dateRequired: "",
        expectedDateToNormalize: "",
        reasonForConductingByPass: "",
        othersMethodOfByPass: "",
        precautionsByApplicant: "",
        typeId: "",
        methodId: "",
        reviewerId: "",
        action: "",
        parentSceId: "",
        reviewer: "",
        mobileNo: $scope.userProfile.mobileNo == null ? '' : $scope.userProfile.mobileNo
    };

    $scope.initilizingFiles = null;

    $scope.raInfo = "";

    $scope.showNewRa = false;
    $scope.showCopyRa = false;

    // Bind SCE prerequisite data
    var bindPreData = function () {
        // Bind data to area combo box
        $scope.areasDataSource = {
            transport: {
                read: function (options) {
                    sceServices.getPreData('areas').then(function (response) {
                        if (response.data != null) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                }
            }
        };

        $scope.onAreaChange = function () {
            if ($("#sceArea").val() != "") {
                $scope.unitDataSource = {
                    transport: {
                        read: function (options) {
                            var isUnitActive = true;
                            if ($state.current.name != constants.state.scenew) {
                                isUnitActive = null;
                            }
                            sceServices.getUnitByArea($("#sceArea").val(), isUnitActive).then(function (response) {
                                if (response.data != null) {
                                    options.success(response.data);
                                } else {
                                    options.success([]);
                                }
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                            });
                        }
                    }
                };
                $scope.tagNoDataSource = null;
            } else {
                $scope.unitDataSource = null;
                $scope.tagNoDataSource = null;
            }
        };

        $scope.onUnitChange = function () {
            if ($("#UnitNo").val() != "") {
                $scope.tagNoDataSource = {
                    transport: {
                        read: function (options) {
                            var isTagActive = true;
                            if ($state.current.name != constants.state.scenew) {
                                isUnitActive = null;
                            }
                            sceServices.getTagNoByUnit($("#UnitNo").val(), isTagActive).then(function (response) {
                                if (response.data != null) {
                                    options.success(response.data);
                                } else {
                                    options.success([]);
                                }
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                            });
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupTagId: { type: "string" },
                                description: { type: "string" }
                            }
                        },
                        data: function (response) {
                            response.push({ lookupTagId: "0", description: "Others" });
                            return response;
                        }
                    }
                };
            } else {
                $scope.tagNoDataSource = null;
            }
        };

        $scope.onTagNoChange = function () {
            if ($scope.selectedTagNo != null && $scope.selectedTagNo != "" && $scope.selectedTagNo != "0") {
                sceServices.getSilIdByTagId($scope.selectedTagNo).then(
                    function (response) {
                        if (response.data != null && response.data != "") {
                            $scope.selectedSILType = response.data;
                        }
                    }, function (err) {
                        options.err([]);
                        utils.err.showErrorGet(err);
                    });
            }
        };

        // Sort the data base on length of description field
        function compare(a, b) {
            if (a.description.length < b.description.length)
                return -1;
            if (a.description.length > b.description.length)
                return 1;
            return 0;
        }

        // Bind data to category radio button
        $scope.categoryDataSource = null;
        sceServices.getPreData('categories').then(function (response) {
            $scope.categoryDataSource = response.data.sort(compare).reverse();
        }, function (error) {
            utils.error.showErrorGet(error);
        });

        // Bind data to parent bypass type
        $scope.bypassTypesDataSource = {
            transport: {
                read: function (options) {
                    sceServices.getPreData('parenttypes').then(function (response) {
                        if (response.data != null) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                }
            },
            schema: {
                model: {
                    fields: {
                        lookupTypeSceBypassId: { type: "string" },
                        description: { type: "string" }
                    }
                },
                data: function (response) {
                    response.push({ lookupTypeSceBypassId: "0", description: "Others" });
                    return response;
                }
            }
        };

        // Bind data type of bypass
        $scope.selectedParentType = "";
        $scope.onSelectedChange = function () {
            var childDropDown = $("#childType").data("kendoDropDownList");
            if ($scope.selectedParentType != "0" && $scope.selectedParentType != "") {
                $scope.bypassChildTypesDataSource = {
                    transport: {
                        read: function (options) {
                            sceServices.getPreData('childtypes', $scope.selectedParentType).then(function (response) {
                                if (response.data != null) {
                                    options.success(response.data);
                                } else {
                                    options.success([]);
                                }
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                            });
                        }
                    },
                    sort: { field: "description", dir: "asc" }
                };
                childDropDown.options.optionLabel = "Select " + $("#parentType option:selected").text().toLowerCase() + " type";
                childDropDown.refresh();
                childDropDown.select(0);
                childDropDown.enable(true);
                $("#childType-list .k-list-optionlabel").text("Select " + $("#parentType option:selected").text().toLowerCase() + " type");
            } else {
                $("#otherType").val("");
                childDropDown.value("");
                childDropDown.enable(false);
                $scope.selectedType = '0';
            }
        };

        // Bind data to SIL combo box
        $scope.silDataSource = {
            transport: {
                read: function (options) {
                    sceServices.getPreData('sils').then(function (response) {
                        if (response.data != null) {
                            options.success(response.data.sort(compare));
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                }
            }
        };

        // bind data to drop down list MethodOfBypass
        $scope.methodsDataSource = {
            transport: {
                read: function (options) {
                    sceServices.getPreData('methods').then(function (response) {
                        if (response.data != null) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                }
            },
            schema: {
                model: {
                    fields: {
                        lookupMethodOfByPassId: { type: "string" },
                        description: { type: "string" }
                    }
                },
                data: function (response) {
                    response.push({ lookupMethodOfByPassId: "0", description: "Others" });
                    return response;
                }
            }
        };

        $scope.onSelectedMethodChange = function () {
            $("#otherMethod").val("");
        };

        // bind data to drop down list reviewer
        $scope.reviewerSearchText = "";
        $scope.reviewerOptions = {
            autoBind: false,
            optionLabel: "Select Reviewer",
            height: 300,
            filter: "contains",
            filtering: function (e) {
                $scope.reviewerSearchText = e.filter == null ? "" : e.filter.value;
            },
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: function (options) {
                        sceServices.getPreData('reviewers', null, $scope.reviewerSearchText).then(function (response) {
                            if (response.data != null) {
                                options.success(response.data);
                            } else {
                                options.success([]);
                            }
                        }, function (error) {
                            options.error([]);
                            utils.error.showErrorGet(error);
                        });
                    }
                }
            },
            dataTextField: "userName",
            dataValueField: "userProfileId",
            valueTemplate: function (dataItem) {
                if (!dataItem.hasOwnProperty('image')) {
                    dataItem.image = $scope.selectedReviewer.image;
                }
                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
            },
            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
        };

        // Common field value
        $scope.selectedArea = "";
        $scope.selectedCategory = "";
        $scope.selectedType = "";
        $scope.selectedSILType = "";
        $scope.selectedMethod = "";
        $scope.selectedReviewer = {};
        $scope.selectedUnitNo = "";
        $scope.selectedTagNo = "";
    };

    $scope.panelOperatorRole = "";

    // Gets SCE copy
    var getSceCopied = function () {
        try {
            sceServices.getSceCopied($stateParams.sceId).then(function (response) {
                // mapping response data to model
                $scope.model.areaId = response.data.areaId;
                $scope.model.radio = response.data.radio;
                $scope.model.unit = response.data.unitId;
                $scope.model.tagNo = response.data.tagId;
                $scope.model.otherTagNo = response.data.otherTagNo;
                $scope.model.equipmentNo = response.data.equipmentNo;
                $scope.model.othersTypesOfByPass = response.data.othersTypesOfByPass;
                $scope.model.categoryId = response.data.categoryId;
                $scope.model.estimationDurationForByPass = response.data.estimationDurationForByPass;
                $scope.model.safetyIntegrityLvlId = response.data.safetyIntegrityLvlId;
                $scope.model.dateRequired = response.data.dateRequired;
                $scope.model.expectedDateToNormalize = response.data.expectedDateToNormalize;
                $scope.model.reasonForConductingByPass = response.data.reasonForConductingByPass;
                $scope.model.othersMethodOfByPass = response.data.othersMethodOfByPass;
                $scope.model.precautionsByApplicant = response.data.precautionsByApplicant;
                $scope.model.typeId = response.data.typeOfByPassId;
                $scope.model.methodId = response.data.methodOfByPassId;
                $scope.model.reviewerId = response.data.reviewerId;
                $scope.model.parentSceId = response.data.parentSceId;
                $scope.model.reviewer = response.data.reviewer;

                $scope.selectedArea = $scope.model.areaId;
                $scope.selectedCategory = $scope.model.categoryId;
                $scope.selectedUnitNo = $scope.model.unit;

                $scope.unitDataSource = {
                    transport: {
                        read: function (options) {
                            sceServices.getUnitByArea($scope.model.areaId).then(function (response) {
                                if (response.data != null) {
                                    options.success(response.data);
                                } else {
                                    options.success([]);
                                }
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                            });
                        }
                    }
                };
                $scope.tagNoDataSource = {
                    transport: {
                        read: function (options) {
                            sceServices.getTagNoByUnit($scope.model.unit).then(function (response) {
                                if (response.data != null) {
                                    options.success(response.data);
                                } else {
                                    options.success([]);
                                }
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                            });
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                lookupTagId: { type: "string" },
                                description: { type: "string" }
                            }
                        },
                        data: function (response) {
                            response.push({ lookupTagId: "0", description: "Others" });
                            return response;
                        }
                    }
                };

                if ($scope.model.tagNo == null && $scope.model.otherTagNo != null) {
                    $scope.selectedTagNo = '0';
                }
                else if ($scope.model.tagNo != null || $scope.model.tagNo != '') {
                    $scope.selectedTagNo = $scope.model.tagNo;
                }

                if ($scope.model.typeId == null && $scope.model.othersTypesOfByPass != null) {
                    $scope.selectedParentType = '0';
                }
                else if ($scope.model.typeId != null && $scope.model.typeId != '') {
                    $scope.selectedParentType = response.data.parentTypeOfByPassId;
                    $("#childType").data("kendoDropDownList").enable(true);
                    $scope.bypassChildTypesDataSource = {
                        transport: {
                            read: function (options) {
                                sceServices.getPreData('childtypes', response.data.parentTypeOfByPassId).then(function (response) {
                                    if (response.data != null) {
                                        options.success(response.data);
                                    } else {
                                        options.success([]);
                                    }
                                }, function (error) {
                                    options.error([]);
                                    if (error != null && error.status == false) {
                                        console.log(error.message);
                                    } else {
                                        console.log(error);
                                    }
                                });
                            }
                        },
                        sort: { field: "description", dir: "asc" }
                    };
                    $scope.selectedType = $scope.model.typeId;
                }

                $scope.selectedSILType = $scope.model.safetyIntegrityLvlId;

                if ($scope.model.methodId == null && $scope.model.othersMethodOfByPass != null) {
                    $scope.selectedMethod = '0';
                }
                else if ($scope.model.methodId != null && $scope.model.methodId != '') {
                    $scope.selectedMethod = $scope.model.methodId;
                }
                $scope.selectedReviewer = $scope.model.reviewer;

                $rootScope.isLoading = false;
            }, function (error) {
                $rootScope.isLoading = false;
                utils.error.showErrorGet(error);
            });
        } catch (err) {
            utils.error.showErrorGet(err);
            $rootScope.isLoading = false;
        }
    }

    // Get SCE detail
    $scope.visibleReApprovalButton = false;

    var getSceDetailCommon = function () {
        try {
            sceServices.getSceDetail($stateParams.sceId).then(function (response) {
                $scope.sceDetail = response.data;
                $scope.sceDetail.mobileNo = $scope.userProfile.mobileNo == null ? '' : $scope.userProfile.mobileNo;
                switch ($state.current.name) {
                    case constants.state.sceupdaterequire:
                        if ($scope.sceDetail.statusKey != "9") {
                            $state.go(constants.state.accessdenied);
                        }
                        if ($scope.userProfile.userProfileId === $scope.sceDetail.applicant.userProfileId) {
                            $scope.isPic = true;
                        }
                        break;
                    case constants.state.sceedit:
                        if ($scope.sceDetail.statusKey != "1") {
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                    case constants.state.reviewupdaterequire:
                        if ($scope.sceDetail.statusKey != "2" || !$scope.sceDetail.isRequireUpdate) {
                            $state.go(constants.state.accessdenied);
                        }
                        if ($scope.userProfile.userProfileId === $scope.sceDetail.applicant.userProfileId || $scope.userProfile.userProfileId === $scope.sceDetail.reviewer.userProfileId) {
                            $scope.isPic = true;
                        }
                        break;
                    case constants.state.scereview:
                        if ($scope.sceDetail.statusKey != "2") {
                            $state.go(constants.state.accessdenied);
                        }
                        if ($scope.userProfile.userProfileId === $scope.sceDetail.applicant.userProfileId || $scope.userProfile.userProfileId === $scope.sceDetail.reviewer.userProfileId) {
                            $scope.isPic = true;
                        }
                        break;
                    case constants.state.sceendorse:
                        if ($scope.sceDetail.statusKey != "3") {
                            $state.go(constants.state.accessdenied);
                        }
                        if ($scope.userProfile.userProfileId === $scope.sceDetail.applicant.userProfileId || $scope.userProfile.userProfileId === $scope.sceDetail.endorser.userProfileId) {
                            $scope.isPic = true;
                        }
                        break;
                    case constants.state.sceapprove:
                        if ($scope.sceDetail.statusKey != "4") {
                            $state.go(constants.state.accessdenied);
                        }
                        if ($scope.userProfile.userProfileId === $scope.sceDetail.applicant.userProfileId || $scope.userProfile.userProfileId === $scope.sceDetail.approver.userProfileId) {
                            $scope.isPic = true;
                        }
                        break;
                    case constants.state.sceacknowledge:
                        if ($scope.sceDetail.statusKey != "5") {
                            $state.go(constants.state.accessdenied);
                        }
                        if ($scope.userProfile.userProfileId === $scope.sceDetail.applicant.userProfileId || $scope.sceDetail.currentUserRole == "5") {
                            $scope.isPic = true;
                        }
                        break;
                    case constants.state.scelive:
                        if ($scope.sceDetail.statusKey != "7") {
                            $state.go(constants.state.accessdenied);
                        }
                        if ($scope.userProfile.userProfileId === $scope.sceDetail.applicant.userProfileId || $scope.sceDetail.currentUserRole == "5") {
                            $scope.isPic = true;
                        }
                        if ($scope.sceDetail.reApprover != null)
                            $scope.showReApprover = true;
                       
                        if ($scope.sceDetail.reApprover === null) {
                            $scope.visibleReApprovalButton = ($scope.userProfile.userProfileId == $scope.sceDetail.approver.userProfileId) ? true : false;
                            $scope.isPic = ($scope.userProfile.userProfileId == $scope.sceDetail.approver.userProfileId) ? true : false;;
                        } else {
                            $scope.visibleReApprovalButton = ($scope.userProfile.userProfileId == $scope.sceDetail.reApprover.userProfileId) ? true : false;
                            $scope.isPic = ($scope.userProfile.userProfileId == $scope.sceDetail.reApprover.userProfileId) ? true : false;;
                        }
                        break;
                    case constants.state.scenormalized:
                        if ($scope.sceDetail.statusKey != "10") {
                            $state.go(constants.state.accessdenied);
                        }
                        break;
                }

                $scope.isApplicant = $scope.userProfile.userProfileId == $scope.sceDetail.applicant.userProfileId;
                if (parseInt($scope.sceDetail.statusKey) < 10) {
                    if ($scope.isApplicant) {
                        if ($scope.sceDetail.raId == null && $scope.sceDetail.raNo == null) {
                            if (!$scope.hasApplicantRole) {
                                $scope.raInfo = "Pending Request";
                                $scope.showNewRa = true;
                                $scope.showCopyRa = false;
                            } else {

                                if ($scope.sceDetail.parentSceId !== null && $scope.sceDetail.parentSceId !== undefined) {
                                    // is copy ra;
                                    $scope.raInfo = '<a href="/ranew/' + $stateParams.sceId + '" class="k-link">Request New RA</a>';
                                    $scope.showNewRa = false;
                                    $scope.showCopyRa = true;
                                }
                                else {
                                    $scope.raInfo = '<a href="/ranew/' + $stateParams.sceId + '" class="k-button btn-sm btn-sd btn-purple">Request RA</a>';
                                    $scope.showNewRa = true;
                                    $scope.showCopyRa = false;
                                }
                            }
                        } else if ($scope.sceDetail.raId != null && $scope.sceDetail.raNo == null) {
                            $scope.showNewRa = true;
                            $scope.showCopyRa = false;
                            $scope.raInfo = '<a href="/radetail/' + $stateParams.sceId + '/' + $scope.sceDetail.raId + '" class="k-button btn-sm btn-sd btn-purple">RA Draft</a>';
                        } else {
                            $scope.showNewRa = true;
                            $scope.showCopyRa = false;
                            $scope.raInfo = '<a href="/radetail/' + $stateParams.sceId + '/' + $scope.sceDetail.raId + '">' + $scope.sceDetail.raNo + '</a>';
                        }
                    } else {
                        $scope.showNewRa = true;
                        $scope.showCopyRa = false;
                        if ($scope.sceDetail.raId == null || $scope.sceDetail.raNo == null) {
                            $scope.raInfo = "Pending Request";
                        } else {
                            $scope.raInfo = '<a href="/radetail/' + $stateParams.sceId + '/' + $scope.sceDetail.raId + '">' + $scope.sceDetail.raNo + '</a>';
                        }
                    }
                }
                $scope.raInfo = $sce.trustAsHtml($scope.raInfo);

                if ($("#ptwGrid").length) {
                    if (!$scope.isApplicant || $scope.sceDetail.statusKey == "10") {
                        $("#ptwGrid").data("kendoGrid").setOptions({
                            toolbar: null
                        });
                    }
                }
                switch ($scope.sceDetail.statusKey) {
                    case "1":
                        $scope.isHidden = !($scope.userProfile.userProfileId == $scope.sceDetail.applicant.userProfileId && $scope.sceDetail.statusKey == "1");
                        break;
                    case "2":
                        $scope.pendingReview = true;

                        $scope.isHidden = !($scope.userProfile.userProfileId == $scope.sceDetail.reviewer.userProfileId && $scope.sceDetail.statusKey == "2");
                        break;
                    case "3":
                        $scope.pendingEndorse = true;
                        $scope.isHidden = !($scope.userProfile.userProfileId == $scope.sceDetail.endorser.userProfileId && $scope.sceDetail.statusKey == "3");
                        break;
                    case "4":
                        $scope.pendingApprove = true;
                        $scope.isHidden = !($scope.userProfile.userProfileId == $scope.sceDetail.approver.userProfileId && $scope.sceDetail.statusKey == "4");
                        break;
                    case "5":
                        $scope.isHidden = !($scope.sceDetail.currentUserRole == '5' && $scope.sceDetail.statusKey == "5");
                        break;
                    case "7":
                        $scope.isHidden = true;
                        break;
                    case "9":
                        $scope.isHidden = !($scope.userProfile.userProfileId == $scope.sceDetail.applicant.userProfileId && $scope.sceDetail.statusKey == "9");
                        break;
                }

                if ($scope.isPic) {
                    if ($scope.userProfile.userProfileId === $scope.sceDetail.applicant.userProfileId) {
                        $scope.panelOperatorRole = "Applicant";
                    }
                    if ($scope.userProfile.userProfileId === $scope.sceDetail.reviewer.userProfileId) {
                        $scope.panelOperatorRole = "Reviewer";
                    }
                    if ($scope.sceDetail.endorser != null && $scope.userProfile.userProfileId === $scope.sceDetail.endorser.userProfileId) {
                        $scope.panelOperatorRole = "Endorser";
                    }
                    if ($scope.sceDetail.approver != null && $scope.userProfile.userProfileId === $scope.sceDetail.approver.userProfileId) {
                        $scope.panelOperatorRole = "Approver";
                    }
                    if ($scope.sceDetail.currentUserRole == "5") {
                        $scope.panelOperatorRole = "Acknowledger";
                    }
                }

                if ($state.current.name == constants.state.sceedit || $state.current.name == constants.state.sceupdaterequire) {
                    $scope.selectedArea = $scope.sceDetail.areaId;
                    $scope.selectedCategory = $scope.sceDetail.categoryId;
                    $scope.selectedUnitNo = $scope.sceDetail.unitId;

                    $scope.unitDataSource = {
                        transport: {
                            read: function (options) {
                                sceServices.getUnitByArea($scope.sceDetail.areaId).then(function (response) {
                                    if (response.data != null) {
                                        options.success(response.data);
                                    } else {
                                        options.success([]);
                                    }
                                }, function (error) {
                                    options.error([]);
                                    utils.error.showErrorGet(error);
                                });
                            }
                        }
                    };
                    $scope.tagNoDataSource = {
                        transport: {
                            read: function (options) {
                                sceServices.getTagNoByUnit($scope.sceDetail.unitId).then(function (response) {
                                    if (response.data != null) {
                                        options.success(response.data);
                                    } else {
                                        options.success([]);
                                    }
                                }, function (error) {
                                    options.error([]);
                                    utils.error.showErrorGet(error);
                                });
                            }
                        },
                        schema: {
                            model: {
                                fields: {
                                    lookupTagId: { type: "string" },
                                    description: { type: "string" }
                                }
                            },
                            data: function (response) {
                                response.push({ lookupTagId: "0", description: "Others" });
                                return response;
                            }
                        }
                    };

                    if ($scope.sceDetail.sceNo != null && $scope.sceDetail.sceNo != "") {
                        $scope.unitDropDownList = $("#UnitNo").data("kendoDropDownList").enable(false);
                        $scope.unitDropDownList = $("#sceArea").data("kendoDropDownList").enable(false);
                    }

                    if ($scope.sceDetail.tagNoId == null && $scope.sceDetail.otherTagNo != null) {
                        $scope.selectedTagNo = '0';
                    }
                    else if ($scope.sceDetail.tagNoId != null || $scope.sceDetail.tagNoId != '') {
                        $scope.selectedTagNo = $scope.sceDetail.tagNoId;
                    }

                    if ($scope.sceDetail.typeId == null && $scope.sceDetail.othersTypesOfByPass != null) {
                        $scope.selectedParentType = '0';
                    }
                    else if ($scope.sceDetail.typeId != null && $scope.sceDetail.typeId != '') {
                        $scope.selectedParentType = $scope.sceDetail.parentTypeId;
                        $("#childType").data("kendoDropDownList").enable(true);
                        $scope.bypassChildTypesDataSource = {
                            transport: {
                                read: function (options) {
                                    sceServices.getPreData('childtypes', $scope.sceDetail.parentTypeId).then(function (response) {
                                        if (response.data != null) {
                                            options.success(response.data);
                                        } else {
                                            options.success([]);
                                        }
                                    }, function (error) {
                                        options.error([]);
                                        if (error != null && error.status == false) {
                                            console.log(error.message);
                                        } else {
                                            console.log(error);
                                        }
                                    });
                                }
                            },
                            sort: { field: "description", dir: "asc" }
                        };
                        $scope.selectedType = $scope.sceDetail.typeId;
                    }

                    $scope.selectedSILType = $scope.sceDetail.safetyIntegrityLvlId;

                    if ($scope.sceDetail.methodId == null && $scope.sceDetail.othersMethodOfByPass != null) {
                        $scope.selectedMethod = '0';
                    }
                    else if ($scope.sceDetail.methodId != null && $scope.sceDetail.methodId != '') {
                        $scope.selectedMethod = $scope.sceDetail.methodId;
                    }
                    $scope.selectedReviewer = $scope.sceDetail.reviewer;
                }
                if ($state.current.name == constants.state.reviewupdaterequire || $state.current.name == constants.state.scereview) {
                    $scope.reviewModel.consequences = $scope.sceDetail.consequences;
                    $scope.reviewModel.precautionsByOperations = $scope.sceDetail.precautionsByOperations;
                    $scope.reviewModel.isTempOperatingProcedureRequired = $scope.sceDetail.isTempOperatingProcedureRequired;
                    $scope.reviewModel.isSpecialSIRequired = $scope.sceDetail.isSpecialSIRequired;
                    $scope.reviewModel.isDetailRARequired = $scope.sceDetail.isDetailRARequired;
                    $scope.reviewModel.endorser = $scope.sceDetail.endorser;
                    $scope.reviewModel.approver = $scope.sceDetail.approver;
                }
               

                if ($state.current.name == constants.state.scelive || $state.current.name == constants.state.scenormalized) {
                    $scope.reApprovalOptions = {
                        dataSource: {
                            transport: {
                                read: function (options) {
                                    sceServices.getSceExtApproval(
                                    {
                                        sceId: $stateParams.sceId,
                                        skip: (options.data.page - 1) * options.data.pageSize,
                                        take: options.data.take
                                    }).then(function (response) {
                                        if (response.data != null) {
                                            options.success(response.data);
                                        } else {
                                            options.success([]);
                                        }
                                    }, function (error) {
                                        options.error([]);
                                        utils.error.showErrorGet(error);
                                    });
                                }
                            },
                            schema: {
                                model: {
                                    fields: {
                                        weekNo: {
                                            type: "string"
                                        },
                                        approvedBy: {
                                            type: "string"
                                        },
                                        approvedTime: {
                                            type: "date"
                                        }
                                    }
                                },
                                total: function (response) {
                                    return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
                                }
                            },
                            pageSize: 10,
                            serverPaging: true,
                            serverFiltering: false,
                            serverSorting: false
                        },
                        scrollable: false,
                        sortable: false,
                        pageable: {
                            pageSizes: true,
                            buttonCount: 5
                        },
                        columns: [{
                            field: "weekNo",
                            title: "Week",
                            width: "60px"
                        }, {
                            field: "approvedBy", title: "Approved by",
                            template: function (dataItem) {
                                if (dataItem.approvedTime == null && dataItem.isNewest) {
                                    return "<strong class='pending_info pending-reapproval'>Pending Re-approval</strong>";
                                }
                                else {
                                    return "<strong><a href data-ng-click='goToProfile(\"" + dataItem.approvedId + "\")'>" + dataItem.approvedBy + "</a></strong>";
                                }
                            }
                        }, {
                            field: "approvedTime", title: "Time Approved",
                            template: function (dataItem) {
                                if (dataItem.approvedTime == null && dataItem.isNewest) {
                                    if ($scope.visibleReApprovalButton) {
                                        return "<button class='btn-sd btn-sm btn-purple k-button right' data-ng-click='showTransferReApproverDialog()'>Re-approve</button>";
                                    }
                                    return "";
                                } else if (dataItem.approvedTime == null && !dataItem.isNewest) {
                                    return "";
                                } else {
                                    return kendo.toString(kendo.parseDate(dataItem.approvedTime), "dd MMM yyyy at hh:mm tt");
                                }
                            }
                        }],
                        noRecords: true,
                        messages: {
                            noRecords: "There is no data on current page"
                        }
                    };
                    $scope.reAcknowledgementOptions = {
                        dataSource: {
                            transport: {
                                read: function (options) {
                                    sceServices.getAcknowledgeSchedule(
                                    {
                                        sceId: $stateParams.sceId,
                                        skip: (options.data.page - 1) * options.data.pageSize,
                                        take: options.data.take
                                    }).then(function (response) {
                                        if (response.data != null) {
                                            options.success(response.data);
                                            _.each(response.data, function (item) {
                                                if (item.isNewestShift) {
                                                    $scope.newestShift = item.shiftTime;
                                                    $scope.newestShiftNumber = item.shift;
                                                }
                                            });
                                        } else {
                                            options.success([]);
                                        }
                                    }, function (error) {
                                        options.error([]);
                                        utils.error.showErrorGet(error);
                                    });
                                }
                            },
                            schema: {
                                model: {
                                    fields: {
                                        shift: {
                                            type: "string"
                                        },
                                        shiftTime: {
                                            type: "string"
                                        },
                                        acknowledgeBy: {
                                            type: "string"
                                        },
                                        acknowledgeTime: {
                                            type: "date", format: "dd MMM yyyy"
                                        }
                                    }
                                },
                                total: function (response) {
                                    return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
                                }
                            },
                            pageSize: 10,
                            serverPaging: true,
                            serverFiltering: false,
                            serverSorting: false
                        },
                        scrollable: false,
                        sortable: false,
                        pageable: {
                            pageSizes: true,
                            buttonCount: 5
                        },
                        columns: [{
                            field: "shift",
                            title: "Shift",
                            width: "60px"
                        }, {
                            field: "shiftTime",
                            title: "Date & Time",
                            attributes: {
                                "class": "cell_default"
                            }
                        }, {
                            field: "acknowledgeBy", title: "Acknowledged By",
                            template: function (dataItem) {
                                if (dataItem.isAcknowledged == null && dataItem.isNewestShift) {
                                    return "<strong class='pending_info pending-reacknowledge'>Pending Re-acknowledge</strong>";
                                } else if (dataItem.isAcknowledged == null && !dataItem.isNewestShift) {
                                    return "None";
                                } else {
                                    return "<a href data-ng-click='goToProfile(\"" + dataItem.acknowledgeId + "\")'><strong>" + dataItem.acknowledgeBy + "</strong></a>";
                                }
                            }
                        }, {
                            field: "acknowledgeTime", title: "Time Acknowledged",
                            template: function (dataItem) {
                                if (dataItem.isAcknowledged == null && dataItem.isNewestShift) {
                                    $scope.newestShift = dataItem.shiftTime;
                                    $scope.newestShiftNumber = dataItem.shift;
                                    if ($scope.sceDetail.currentUserRole == "5") {
                                        return "<button class='btn-sd btn-sm btn-purple k-button' data-ng-click='reAcknowledgementDialog.open()'>Re-acknowledge</button>";
                                    }
                                    return "";
                                } else if (dataItem.isAcknowledged == null && !dataItem.isNewestShift) {
                                    return "";
                                } else {
                                    return kendo.toString(kendo.parseDate(dataItem.acknowledgeTime), "dd MMM yyyy at hh:mm tt");
                                }
                            }
                        }],
                        noRecords: true,
                        messages: {
                            noRecords: "There is no data on current page"
                        }
                    };
                }
                $scope.applicantSearchText = "";
                // Bind new applicant to transfer for admin
                $scope.newApplicantOptions = {
                    autoBind: false,
                    optionLabel: "Select New Applicant",
                    filter: "contains",
                    filtering: function (e) {
                        $scope.applicantSearchText = e.filter == null ? "" : e.filter.value;
                    },
                    dataSource: {
                        serverFiltering: true,
                        transport: {
                            read: function (options) {
                                sceServices.getApplicantsForTransfer($scope.applicantSearchText).then(function (response) {
                                    if (response.data != null) {
                                        options.success(response.data);
                                    } else {
                                        options.success([]);
                                    }
                                }, function (error) {
                                    options.error([]);
                                    utils.error.showErrorGet(error);
                                });
                            }
                        }
                    },
                    dataTextField: "userName",
                    dataValueField: "userProfileId",
                    valueTemplate: function (dataItem) {
                        if (!dataItem.hasOwnProperty('image')) {
                            dataItem.image = $scope.applicantToTransfer.image;
                        }
                        return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                    },
                    template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                };

                $scope.applicantTransferSearchText = "";
                // Bind new applicant to transfer for applicant
                $scope.newApplicantTransferOptions = {
                    autoBind: false,
                    optionLabel: "Select New Applicant",
                    filter: "contains",
                    filtering: function (e) {
                        $scope.applicantTransferSearchText = e.filter == null ? "" : e.filter.value;
                    },
                    dataSource: {
                        serverFiltering: true,
                        transport: {
                            read: function (options) {
                                sceServices.getApplicantsForTransferInSameAreas($stateParams.sceId, $scope.applicantTransferSearchText).then(function (response) {
                                    if (response.data != null) {
                                        options.success(response.data);
                                    } else {
                                        options.success([]);
                                    }
                                }, function (error) {
                                    options.error([]);
                                    utils.error.showErrorGet(error);
                                });
                            }
                        }
                    },
                    dataTextField: "userName",
                    dataValueField: "userProfileId",
                    valueTemplate: function (dataItem) {
                        if (!dataItem.hasOwnProperty('image')) {
                            dataItem.image = $scope.applicantToTransfer.image;
                        }
                        return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                    },
                    template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                };

                // Get list file upload
                if ($state.current.name !== constants.state.scenew || $state.current.name !== constants.state.sceedit || $state.current.name !== constants.state.sceupdaterequire) {
                    sceServices.getUploadedFiles($stateParams.sceId).then(function (response) {
                        $scope.fileModel = response.data;
                    }, function (err) {
                        $rootScope.isLoading = false;
                        utils.error.showErrorGet(err);
                    });
                }

            }, function (error) {
                $rootScope.isLoading = false;
                utils.error.showErrorGet(error);
            });

            $rootScope.isLoading = false;

        }
        catch (err) {
            utils.error.showErrorGet(err);
            $rootScope.isLoading = false;
        }
    };

    $scope.copyExitstingRa = function () {

        $rootScope.isLoading = true;

        if ($('#menuRequestRa .k-animation-container').length > 0) {
            $('#menuRequestRa .k-animation-container').css('display', 'none');
        }

        raServices.checkRaCopy($stateParams.sceId).then(function (response) {
            debugger;
            $rootScope.isLoading = false;
            var option;
            if (response.data == false) {
                option = {
                    id: "dialogInfo",
                    title: "RA Copy Confirmation",
                    //lableOk: "COPY",
                    lableClose: "CLOSE",
                    content: response.message,
                    width: 500
                };
            } else {
                option = {
                    id: "dialogInfo",
                    title: "RA Copy Confirmation",
                    lableOk: "COPY",
                    lableClose: "CANCEL",
                    content: response.message,
                    width: 500
                };
            }

            utils.dialog.showConfirm(option, function () {
                $state.go(constants.state.raCopy, { sceId: $stateParams.sceId });
            });

        }, function (error) {

            $rootScope.isLoading = false;
        });
    }

    $scope.goToProfile = function (userId) {
        $state.go(constants.state.profile, { id: userId });
    };

    $scope.scePrint = function () {
        window.open('/print/sce/' + $stateParams.sceId, '_blank');
    };

    $scope.statusLog = function () {
        $state.go(constants.state.sceStatusLog, { sceId: $stateParams.sceId });
    }

    $scope.showNormalizeDialog = function () {
        if ($("#ptwGrid").data("kendoGrid").dataSource.data().length == 0 || $("#ptwGrid").data("kendoGrid").dataSource.data().length == 1 && $("#ptwGrid").data("kendoGrid").dataSource.data()[0].id == "") {
            $("#validatePTWDialog").data("kendoDialog").open();
        } else {
            $("#normalizeDialog").data("kendoDialog").open();
        }
    };

    // Open/Close Custom Drop down (Vertical Dot)
    $(".dropdown_toggle").click(function (e) {
        $(this).parent().toggleClass("dd_open");
        e.stopPropagation();
    });

    // Close drop down on click outside div
    $(document).on("click", function (e) {
        if ($(e.target).is(".dropdown_menu") === false) {
            $(".dd_block").removeClass("dd_open");
        }
    });

    // Request RA
    $scope.requestRa = function () {
        // do something
        $state.go(constants.state.raNew, { sceId: $stateParams.sceId });
    };

    $scope.sceCopyDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content,
            actions: [{ text: "COPY", primary: true },
                { text: "CANCEL" }]
        }).data("kendoConfirm").open().result;
    };

    $scope.copySCE = function () {
        $scope.sceCopyDialog("SCE Copy Confirmation", "Existing SCE No. <strong>" + $scope.sceDetail.sceNo + "</strong> information will be copied into new SCE request. Are you sure to proceed?").then(function () {
            $state.go(constants.state.scecopynew, { sceId: $stateParams.sceId });
        }, function () {
            // Chooses cancel, do nothing
        });
    }
    // prevent multi click
    $scope.inProgress = false;

    $scope.customValidationOptions = {
        rules: {
            otherTagNo: function (input) {
                if (input.is("[name=tagNo]")) {
                    var retVal = true;
                    if ($scope.selectedTagNo == '') {
                        return false;
                    } else if ($scope.selectedTagNo == '0') {
                        retVal = $scope.model.otherTagNo != '';
                    }
                    if (retVal) {
                        $("#TagNo").removeClass("k-invalid");
                    } else {
                        $("#TagNo").addClass("k-invalid");
                        $("#otherTagNo").addClass("k-invalid");
                    }
                    return retVal;
                }
                return true;
            }
        },
        messages: {
            otherTagNo: "Tag No. is required"
        }
    };

    $scope.updateForm_CustomValidationOptions = {
        rules: {
            otherTagNo: function (input) {
                if (input.is("[name=tagNo]")) {
                    var retVal = true;
                    if ($scope.selectedTagNo == '') {
                        return false;
                    } else if ($scope.selectedTagNo == '0') {
                        retVal = $scope.sceDetail.otherTagNo != '';
                    }
                    if (retVal) {
                        $("#TagNo").removeClass("k-invalid");
                    } else {
                        $("#TagNo").addClass("k-invalid");
                        $("#otherTagNo").addClass("k-invalid");
                    }
                    return retVal;
                }
                return true;
            }
        },
        messages: {
            otherTagNo: "Tag No. is required"
        }
    };

    $scope.dialogOption = {
        id: "dialogInfo",
        title: "",
        lableClose: "CLOSE",
        content: "",
        width: 300
    };
    //#endregion

    //#region Initializing

    // Initializing numeric text box options
    $scope.numberTextbox = {
        format: "#.##",
        decimals: 2,
        min: 0,
        max: 99999999.99
    };

    // Initializing date picker options
    $scope.dateTextbox = {
        format: "MM/dd/yyyy",
        min: new Date(1900, 0, 1),
        max: new Date(2099, 11, 31)
        //disableDates: ["sa", "su"]
    };

    // Initializing SCE detail model
    $scope.sceDetail = null;

    $rootScope.goToMyPendingAction = false;

    // Initializing category data source
    $scope.categoryDataSource = null;

    // Bind reviewer for transfer
    $scope.reviewerToTransfer = {};
    $scope.endorserToTransfer = {};
    $scope.approverToTransfer = {};
    $scope.reviewerForTransferSearchText = "";

    $scope.reviewerForTransferDataSource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                sceServices.getPreData('reviewers', null, $scope.reviewerForTransferSearchText).then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.reviewerForTransferOptions = {
        autoBind: false,
        filter: "contains",
        filtering: function (e) {
            $scope.reviewerForTransferSearchText = e.filter == null ? "" : e.filter.value;
        },
        optionLabel: "Select Reviewer",
        dataSource: $scope.reviewerForTransferDataSource,
        dataTextField: "userName",
        dataValueField: "userProfileId",
        valueTemplate: function (dataItem) {
            if (!dataItem.hasOwnProperty('image')) {
                dataItem.image = $scope.reviewerToTransfer.image;
            }
            return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
        },
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
    '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
    };
    // Bind endorser

    $scope.endorseDatasource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                sceServices.getPreData('endorsers', null, $scope.endorserSearchText).then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.endorserSearchText = "";

    $scope.endorserOptions = {
        autoBind: false,
        height: 300,
        filter: "contains",
        filtering: function (e) {
            $scope.endorserSearchText = e.filter == null ? "" : e.filter.value;
        },
        optionLabel: "Select Endorser",
        dataSource: $scope.endorseDatasource,
        dataTextField: "userName",
        dataValueField: "userProfileId",
        valueTemplate: function (dataItem) {
            if (!dataItem.hasOwnProperty('image')) {
                if ($scope.reviewModel.endorser == "") {
                    dataItem.image = $scope.endorserToTransfer.image;
                } else {
                    dataItem.image = $scope.reviewModel.endorser.image;
                }
            }
            return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
        },
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
    '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
    };

    // Bind approver
    $scope.approverDatasource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                sceServices.getPreData('approvers', null, $scope.approverSearchText).then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.approverSearchText = "";

    $scope.approverOptions = {
        autoBind: false,
        height: 300,
        optionLabel: "Select Approver",
        filter: "contains",
        filtering: function (e) {
            $scope.approverSearchText = e.filter == null ? "" : e.filter.value;
        },
        dataSource: $scope.approverDatasource,
        dataTextField: "userName",
        dataValueField: "userProfileId",
        valueTemplate: function (dataItem) {
            if (!dataItem.hasOwnProperty('image')) {
                if ($scope.reviewModel.endorser != "") {
                    dataItem.image = $scope.reviewModel.approver.image;
                } else {
                    dataItem.image = $scope.approverToTransfer.image;
                }
            }
            return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
        },
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
    '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
    };

    // Binding data to form
    var onLoad = function (routeName) {
        // check bigModule
        $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";

        // end check
        switch (routeName) {
            case constants.state.sceupdaterequire:
                $rootScope.$app.title = "SCE Required Update";
                $rootScope.isLoading = true;
                try {
                    bindPreData();
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.sceedit:
                $rootScope.$app.title = "SCE Edit";
                $rootScope.isLoading = true;
                try {
                    bindPreData();
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.scenew:
                $rootScope.$app.title = "SCE New";
                $rootScope.isLoading = true;
                try {
                    bindPreData();
                    $rootScope.isLoading = false;
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.scecopynew:
                $rootScope.$app.title = constants.titlePage.sceCopyNew;
                $rootScope.isLoading = true;
                try {
                    bindPreData();
                    getSceCopied();
                } catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.scedetail:
                $rootScope.isLoading = true;
                try {
                    if ($stateParams.sceId == null || $stateParams.sceId == "") {
                        $state.go(scelist);
                    }
                    sceServices.getSceDetail($stateParams.sceId).then(function (response) {
                        switch (response.data.statusKey) {
                            case "1":
                                $state.go(constants.state.sceedit, { sceId: $stateParams.sceId });
                                break;
                            case "2":
                                if (response.data.isRequireUpdate == null || response.data.isRequireUpdate == false) {
                                    $state.go(constants.state.scereview, { sceId: $stateParams.sceId });
                                } else {
                                    $state.go(constants.state.reviewupdaterequire, { sceId: $stateParams.sceId });
                                }
                                break;
                            case "3":
                                $state.go(constants.state.sceendorse, { sceId: $stateParams.sceId });
                                break;
                            case "4":
                                $state.go(constants.state.sceapprove, { sceId: $stateParams.sceId });
                                break;
                            case "5":
                                $state.go(constants.state.sceacknowledge, { sceId: $stateParams.sceId });
                                break;
                            case "7":
                                $state.go(constants.state.scelive, { sceId: $stateParams.sceId });
                                break;
                            case "9":
                                $state.go(constants.state.sceupdaterequire, { sceId: $stateParams.sceId });
                                break;
                            case "10":
                                $state.go(constants.state.scenormalized, { sceId: $stateParams.sceId });
                                break;
                        }
                        $rootScope.isLoading = false;
                    }, function (error) {
                        utils.error.showErrorGet(error);
                    });
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.reviewupdaterequire:
                $rootScope.$app.title = "SCE Review Update Require";
                try {
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.scereview:
                $rootScope.$app.title = "SCE Review";
                $rootScope.isLoading = true;
                try {
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.sceendorse:
                $rootScope.$app.title = "SCE Endorse";
                $rootScope.isLoading = true;
                try {
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.sceapprove:
                $rootScope.$app.title = "SCE Approve";
                $rootScope.isLoading = true;
                try {
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.sceacknowledge:
                $rootScope.$app.title = "SCE Acknowledge";
                $rootScope.isLoading = true;
                try {
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.scelive:
                $rootScope.$app.title = "SCE Live";
                $rootScope.isLoading = true;
                try {
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
            case constants.state.scenormalized:
                $rootScope.$app.title = "SCE Normalized";
                $rootScope.isLoading = true;
                try {
                    getSceDetailCommon();
                }
                catch (err) {
                    utils.error.showErrorGet(err);
                    $rootScope.isLoading = false;
                }
                break;
        }
    };
    onLoad($state.current.name);

    //#endregion

    //#region Add new SCE

    $scope.goToListPage = function (event) {
        event.preventDefault();
        $state.go("scelist");
    };

    $scope.saveData = function (event, actionType) {
        //prevent multi click
        $scope.inProgress = true;
        event.preventDefault();
        event.stopImmediatePropagation();

        // show loading
        $rootScope.isLoading = true;

        try {
            var isValid = false;
            if (actionType == "Submit") {
                // Custom validations
                isValid = $("#createSceForm").kendoValidator({
                    rules: {
                        bypasstype: function (input) {
                            if (input.is("[name=TypeofBypass]")) {
                                var retVal = $("#childType").val() != "" || $("#otherType").val() != "";
                                if (retVal) {
                                    $("#parentType").removeClass("k-invalid");
                                } else {
                                    $("#childType").addClass("k-invalid");
                                    $("#otherType").addClass("k-invalid");
                                }
                                return retVal;
                            }
                            return true;
                        },
                        bypassmethod: function (input) {
                            if (input.is("[name=MethodsofBypass]")) {
                                var retVal = true;
                                if ($("#methodBypass").val() == '') {
                                    return false;
                                } else if ($("#methodBypass").val() == '0') {
                                    retVal = $("#otherMethod").val() != '';
                                }
                                if (retVal) {
                                    $("#methodBypass").removeClass("k-invalid");
                                } else {
                                    $("#methodBypass").addClass("k-invalid");
                                    $("#otherMethod").addClass("k-invalid");
                                }
                                return retVal;
                            }
                            return true;
                        },
                        greaterdate: function (input) {
                            if (input.is("[greaterdate]") && input.val() != "") {
                                var date = kendo.parseDate(input.val(), 'MM/dd/yyyy'),
                                    otherDate = kendo.parseDate($("[name='" + input.data("commpareControl") + "']").val(), 'MM/dd/yyyy');
                                return otherDate == null || otherDate.getTime() <= date.getTime();
                            }

                            return true;
                        },
                        otherTagNo: function (input) {
                            if (input.is("[name=tagNo]")) {
                                var retVal = true;
                                if ($scope.selectedTagNo == '') {
                                    return false;
                                } else if ($scope.selectedTagNo == '0') {
                                    retVal = $scope.model.otherTagNo != '';
                                }
                                if (retVal) {
                                    $("#TagNo").removeClass("k-invalid");
                                } else {
                                    $("#TagNo").addClass("k-invalid");
                                    $("#otherTagNo").addClass("k-invalid");
                                }
                                return retVal;
                            }
                            return true;
                        }
                    },
                    messages: {
                        bypasstype: "Type of Bypass is required",
                        bypassmethod: "Method of Bypass is required",
                        greaterdate: "Expected Date to Normalize should be after Date Required.",
                        otherTagNo: "Tag No. is required"
                    }
                }).data("kendoValidator").validate();
            } else {
                isValid = $("#createSceForm").kendoValidator({
                    rules: {
                        otherTagNo: function (input) {
                            if (input.is("[name=tagNo]")) {
                                var retVal = true;
                                if ($scope.selectedTagNo == '') {
                                    return false;
                                } else if ($scope.selectedTagNo == '0') {
                                    retVal = $scope.model.otherTagNo != '';
                                }
                                if (retVal) {
                                    $("#TagNo").removeClass("k-invalid");
                                } else {
                                    $("#TagNo").addClass("k-invalid");
                                    $("#otherTagNo").addClass("k-invalid");
                                }
                                return retVal;
                            }
                            return true;
                        }
                    },
                    messages: {
                        otherTagNo: "Tag No. is required"
                    }
                }).data("kendoValidator").validate();
            }
            if (actionType == 'Submit' && !utils.validRequiredAction(actionType)) {
                isValid = false;
            }
            if (isValid) {
                // Save Draft or Submit
                $scope.model.action = actionType;
                $scope.model.areaId = $scope.selectedArea;
                $scope.model.safetyIntegrityLvlId = $scope.selectedSILType;
                $scope.model.categoryId = $scope.selectedCategory;
                $scope.model.userProfileId = $scope.userProfile.UserProfileId;
                $scope.model.typeId = $scope.selectedType == '0' ? '' : $scope.selectedType;
                $scope.model.methodId = $scope.selectedMethod == '0' ? '' : $scope.selectedMethod;
                $scope.model.reviewerId = $scope.selectedReviewer == null ? null : $scope.selectedReviewer.userProfileId;
                $scope.model.unit = $scope.selectedUnitNo;
                $scope.model.tagNo = $scope.selectedTagNo == '0' ? '' : $scope.selectedTagNo;
                if ($scope.selectedTagNo == '0') {
                    $scope.model.tagNo = "";
                } else {
                    $scope.model.otherTagNo = "";
                    $scope.model.tagNo = $scope.selectedTagNo;
                }
                $scope.model.parentSceId = $stateParams.sceId;
                // Send data to server
                sceServices.addNewSCE($scope.model).then(function (response) {
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                    $scope.userProfile.mobileNo = $scope.model.mobileNo;
                    $rootScope.$app.userProfile.mobileNo = $scope.model.mobileNo;
                    switch (actionType) {
                        case "Draft":
                            $scope.dialogOption.title = "Save SCE as Draft";
                            $scope.dialogOption.content = "This SCE is saved as draft";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                        case "Submit":
                            $scope.dialogOption.title = "Create SCE";
                            $scope.dialogOption.content = "This SCE is submitted and <strong>pending review</strong>";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                    }
                }, function (error) {
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                    switch (actionType) {
                        case "Draft":
                            $scope.dialogOption.title = "Save SCE as Draft";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                        case "Submit":
                            $scope.dialogOption.title = "Create SCE";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                    }
                });
            } else {
                $scope.inProgress = false;
                $rootScope.isLoading = false;
            }
        } catch (error) {
            utils.error.showErrorGet(error);
            $scope.inProgress = false;
            $rootScope.isLoading = false;
        }
    };

    //#endregion sce create form

    //#region Transfer SCE

    $scope.transferSceModel = {
        newApplicantId: "",
        comment: ""
    };

    $scope.transferSceAction = [{ text: 'CANCEL' },
    {
        text: 'TRANSFER',
        action: function () {
            // show loading
            $rootScope.isLoading = true;

            try {
                if ($scope.userProfile.userProfileId == $scope.sceDetail.applicant.userProfileId) {
                    sceServices.transferSce($stateParams.sceId, $scope.transferSceModel).then(function (response) {
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "SCE Transferred";
                        $scope.dialogOption.content = "This SCE is now transferred to <strong>" + response.data + "</strong>. A notification has been sent to alert the new applicant.";
                        utils.dialog.showDialog($scope.dialogOption, function () {
                            $state.go(constants.state.scelist);
                        });
                    }, function (error) {
                        $scope.dialogOption.title = "SCE Transfer Failed";
                        $scope.dialogOption.content = error.message;
                        utils.dialog.showDialog($scope.dialogOption);
                    });
                } else {
                    $rootScope.isLoading = false;
                    $scope.dialogOption.title = "Access Denied";
                    $scope.dialogOption.content = "You don't have any permission to do this action.";
                    utils.dialog.showDialog($scope.dialogOption);
                }
                // Returning false will prevent the closing of the dialog
                return true;
            } catch (err) {
                utils.error.showErrorGet(err);
                $rootScope.isLoading = false;
            }
        },
        primary: true
    }];

    //#endregion

    //#region Require form

    $scope.updateRequire = function (e, actionType) {
        //prevent multi click
        $scope.inProgress = true;
        e.preventDefault();
        e.stopImmediatePropagation();

        // show loading
        $rootScope.isLoading = true;

        try {
            var isValid = $("#update-require").kendoValidator({
                rules: {
                    bypasstype: function (input) {
                        if (input.is("[name=TypeofBypass]")) {
                            var retVal = $("#childType").val() != "" || $("#otherType").val() != "";
                            if (retVal) {
                                $("#parentType").removeClass("k-invalid");
                            } else {
                                $("#childType").addClass("k-invalid");
                                $("#otherType").addClass("k-invalid");
                            }
                            return retVal;
                        }
                        return true;
                    },
                    bypassmethod: function (input) {
                        if (input.is("[name=MethodsofBypass]")) {
                            var retVal = true;
                            if ($("#methodBypass").val() == '') {
                                return false;
                            } else if ($("#methodBypass").val() == '0') {
                                retVal = $("#otherMethod").val() != '';
                            }
                            if (retVal) {
                                $("#methodBypass").removeClass("k-invalid");
                            } else {
                                $("#methodBypass").addClass("k-invalid");
                                $("#otherMethod").addClass("k-invalid");
                            }
                            return retVal;
                        }
                        return true;
                    },
                    greaterdate: function (input) {
                        if (input.is("[greaterdate]") && input.val() != "") {
                            var date = kendo.parseDate(input.val(), 'MM/dd/yyyy'),
                                otherDate = kendo.parseDate($("[name='" + input.data("commpareControl") + "']").val(), 'MM/dd/yyyy');
                            return otherDate == null || otherDate.getTime() <= date.getTime();
                        }

                        return true;
                    },
                    otherTagNo: function (input) {
                        if (input.is("[name=tagNo]")) {
                            var retVal = true;
                            if ($scope.selectedTagNo == '') {
                                return false;
                            } else if ($scope.selectedTagNo == '0') {
                                retVal = $scope.sceDetail.otherTagNo != '';
                            }
                            if (retVal) {
                                $("#TagNo").removeClass("k-invalid");
                            } else {
                                $("#TagNo").addClass("k-invalid");
                                $("#otherTagNo").addClass("k-invalid");
                            }
                            return retVal;
                        }
                        return true;
                    }
                },
                messages: {
                    bypasstype: "Type of Bypass is required",
                    bypassmethod: "Method of Bypass is required",
                    greaterdate: "Expected Date to Normalize should be after Date Required.",
                    otherTagNo: "Tag No. is required"
                }
            }).data("kendoValidator").validate();

            if (isValid) {
                // Save Draft or Submit
                $scope.sceDetail.action = actionType;
                $scope.sceDetail.areaId = $scope.selectedArea;
                $scope.sceDetail.safetyIntegrityLvlId = $scope.selectedSILType;
                $scope.sceDetail.categoryId = $scope.selectedCategory;
                $scope.sceDetail.userProfileId = $scope.userProfile.UserProfileId;
                $scope.sceDetail.typeId = $scope.selectedType == '0' ? '' : $scope.selectedType;
                $scope.sceDetail.methodId = $scope.selectedMethod == '0' ? '' : $scope.selectedMethod;
                $scope.sceDetail.reviewerId = $scope.selectedReviewer == null ? null : $scope.selectedReviewer.userProfileId;
                $scope.sceDetail.unit = $scope.selectedUnitNo;
                if ($scope.selectedTagNo == '0') {
                    $scope.sceDetail.tagNo = '';
                } else {
                    $scope.sceDetail.tagNo = $scope.selectedTagNo;
                    $scope.sceDetail.otherTagNo = "";
                }
                // Send data to server
                sceServices.editSce($stateParams.sceId, $scope.sceDetail).then(function (response) {
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                    $scope.userProfile.mobileNo = $scope.sceDetail.mobileNo;
                    $rootScope.$app.userProfile.mobileNo = $scope.sceDetail.mobileNo;
                    switch (actionType) {
                        case "Draft":
                            $scope.dialogOption.title = "Update SCE";
                            $scope.dialogOption.content = "This SCE is saved";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                        case "Submit":
                            $scope.dialogOption.title = "Update SCE";
                            $scope.dialogOption.content = "This SCE is submitted and <strong>pending review</strong>";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                    }
                }, function (error) {
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;

                    $scope.dialogOption.title = "Update SCE";
                    $scope.dialogOption.content = error.message;
                    utils.dialog.showDialog($scope.dialogOption);
                });
            } else {
                $scope.inProgress = false;
                $rootScope.isLoading = false;
            }
        } catch (err) {
            utils.error.showErrorGet(err);
            $scope.inProgress = false;
            $rootScope.isLoading = false;
        }
    };

    //#endregion

    //#region Edit

    $scope.edit = function (e, actionType) {
        //prevent multi click
        $scope.inProgress = true;
        e.preventDefault();
        e.stopImmediatePropagation();

        // show loading
        $rootScope.isLoading = true;

        try {
            var isValid = false;
            if (actionType == "Submit") {
                // Custom validations
                isValid = $("#sce-edit").kendoValidator({
                    rules: {
                        bypasstype: function (input) {
                            if (input.is("[name=TypeofBypass]")) {
                                var retVal = $("#childType").val() != "" || $("#otherType").val() != "";
                                if (retVal) {
                                    $("#parentType").removeClass("k-invalid");
                                } else {
                                    $("#childType").addClass("k-invalid");
                                    $("#otherType").addClass("k-invalid");
                                }
                                return retVal;
                            }
                            return true;
                        },
                        bypassmethod: function (input) {
                            if (input.is("[name=MethodsofBypass]")) {
                                var retVal = true;
                                if ($("#methodBypass").val() == '') {
                                    return false;
                                } else if ($("#methodBypass").val() == '0') {
                                    retVal = $("#otherMethod").val() != '';
                                }
                                if (retVal) {
                                    $("#methodBypass").removeClass("k-invalid");
                                } else {
                                    $("#methodBypass").addClass("k-invalid");
                                    $("#otherMethod").addClass("k-invalid");
                                }
                                return retVal;
                            }
                            return true;
                        },
                        greaterdate: function (input) {
                            if (input.is("[greaterdate]") && input.val() != "") {
                                var date = kendo.parseDate(input.val(), 'MM/dd/yyyy'),
                                    otherDate = kendo.parseDate($("[name='" + input.data("commpareControl") + "']").val(), 'MM/dd/yyyy');
                                return otherDate == null || otherDate.getTime() <= date.getTime();
                            }

                            return true;
                        },
                        otherTagNo: function (input) {
                            if (input.is("[name=tagNo]")) {
                                var retVal = true;
                                if ($scope.selectedTagNo == '') {
                                    return false;
                                } else if ($scope.selectedTagNo == '0') {
                                    retVal = $scope.sceDetail.otherTagNo != '';
                                }
                                if (retVal) {
                                    $("#TagNo").removeClass("k-invalid");
                                } else {
                                    $("#TagNo").addClass("k-invalid");
                                    $("#otherTagNo").addClass("k-invalid");
                                }
                                return retVal;
                            }
                            return true;
                        }
                    },
                    messages: {
                        bypasstype: "Type of Bypass is required",
                        bypassmethod: "Method of Bypass is required",
                        greaterdate: "Expected Date to Normalize should be after Date Required.",
                        otherTagNo: "Tag No. is required"
                    }
                }).data("kendoValidator").validate();
            } else {
                isValid = $("#sce-edit").kendoValidator({
                    rules: {
                        otherTagNo: function (input) {
                            if (input.is("[name=tagNo]")) {
                                var retVal = true;
                                if ($scope.selectedTagNo == '') {
                                    return false;
                                } else if ($scope.selectedTagNo == '0') {
                                    retVal = $scope.sceDetail.otherTagNo != '';
                                }
                                if (retVal) {
                                    $("#TagNo").removeClass("k-invalid");
                                } else {
                                    $("#TagNo").addClass("k-invalid");
                                    $("#otherTagNo").addClass("k-invalid");
                                }
                                return retVal;
                            }
                            return true;
                        }
                    },
                    messages: {
                        otherTagNo: "Tag No. is required"
                    }
                }).data("kendoValidator").validate();
            }
            if (actionType == 'Submit' && !utils.validRequiredAction(actionType)) {
                isValid = false;
            }
            if (isValid) {
                // Save Draft or Submit
                $scope.sceDetail.action = actionType;
                $scope.sceDetail.areaId = $scope.selectedArea;
                $scope.sceDetail.safetyIntegrityLvlId = $scope.selectedSILType;
                $scope.sceDetail.categoryId = $scope.selectedCategory;
                $scope.sceDetail.userProfileId = $scope.userProfile.UserProfileId;
                $scope.sceDetail.typeId = $scope.selectedType == '0' ? '' : $scope.selectedType;
                $scope.sceDetail.methodId = $scope.selectedMethod == '0' ? '' : $scope.selectedMethod;
                $scope.sceDetail.reviewerId = $scope.selectedReviewer == null ? null : $scope.selectedReviewer.userProfileId;
                $scope.sceDetail.unit = $scope.selectedUnitNo;
                $scope.sceDetail.tagNo = $scope.selectedTagNo == '0' ? '' : $scope.selectedTagNo;
                // Send data to server
                sceServices.editSce($stateParams.sceId, $scope.sceDetail).then(function (response) {
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;
                    $scope.userProfile.mobileNo = $scope.model.mobileNo;
                    $rootScope.$app.userProfile.mobileNo = $scope.model.mobileNo;
                    switch (actionType) {
                        case "Draft":
                            $scope.dialogOption.title = "Update SCE";
                            $scope.dialogOption.content = "This SCE is saved";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                        case "Submit":
                            $scope.dialogOption.title = "Update SCE";
                            $scope.dialogOption.content = "This SCE is submitted and <strong>pending review</strong>";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                    }
                }, function (error) {
                    $scope.inProgress = false;
                    $rootScope.isLoading = false;

                    $scope.dialogOption.title = "Update SCE";
                    $scope.dialogOption.content = error.message;
                    utils.dialog.showDialog($scope.dialogOption);
                });
            } else {
                $scope.inProgress = false;
                $rootScope.isLoading = false;
            }
        } catch (err) {
            utils.error.showErrorGet(err);
            $scope.inProgress = false;
            $rootScope.isLoading = false;
        }
    };

    //#endregion

    //#region Review form

    $scope.reviewModel = {
        comment: "",
        consequences: "",
        precautionsByOperations: "",
        isTempOperatingProcedureRequired: true,
        isDetailRARequired: true,
        isSpecialSIRequired: true,
        endorser: "",
        approver: "",
        action: "",
        isRequireUpdate: "",
        listFileIdUpload: [],
        listFileIdDelete: []
    };

    // Define template for list file selected
    $scope.uploadFileListTemplate = kendo.template("<span class='k-progress'></span>" +
        "<div class='file-wrapper'>" +
        "<span class='file-icon #=files[0].extension.slice(1).toLowerCase()#'></span>" +
        "<h4 class='file-heading file-name-heading'>#=name#</h4>" +
        "<strong class=\"k-upload-status\">" +
        "<button type='button' class='k-upload-action'></button>" +
        "</strong>" +
        "</div>");

    var promises = [];
    var isSuccess = false;

    // Get array of file identifier uploaded
    $scope.onUploadSuccess = function (e) {
        if (e.operation === "upload") {
            $scope.reviewModel.listFileIdUpload = $scope.reviewModel.listFileIdUpload.concat(e.response.result);
            isSuccess = true;
        }
    }

    $scope.onComplete = function () {
        if (isSuccess) {
            this.deferred.resolve();
        } else {
            this.deferred.reject();
        }
    }

    $scope.uploadTemporayUrl = sceServices.buildUploadUrl($stateParams.sceId, constants.uploadGroupKey.temporay);
    $scope.uploadSwiftUrl = sceServices.buildUploadUrl($stateParams.sceId, constants.uploadGroupKey.swift);
    $scope.uploadSpecialUrl = sceServices.buildUploadUrl($stateParams.sceId, constants.uploadGroupKey.specialStandingInstruction);

    // Handler event switch change
    $scope.onSwitchChange = function (e) {
        e.preventDefault();
        if (!e.checked) {
            var groupKey = $(e.sender.element[0]).data("group");

            _.each($scope.fileModel, function (file) {
                if (file.groupKey.toLowerCase() === groupKey) {
                    if (!_.contains($scope.reviewModel.listFileIdDelete, file.fileId)) {
                        $scope.reviewModel.listFileIdDelete.push(file.fileId);
                    }
                }
            });

            $scope.tempUpload = $("#temporayUpload").data("kendoUpload");
            $scope.swiftUpload = $("#swiftUpload").data("kendoUpload");
            $scope.specialUpload = $("#specialUpload").data("kendoUpload");
            switch (groupKey) {
                case 'temporay':
                    $scope.tempUpload.removeAllFiles();
                    break;
                case 'swift':
                    $scope.swiftUpload.removeAllFiles();
                    break;
                case 'special':
                    $scope.specialUpload.removeAllFiles();
                    break;
                default:
            }
        }
    }

    $scope.onSwitchUpdateChange = function (e) {
        e.preventDefault();
        if (!e.checked) {
            var groupKey = $(e.sender.element[0]).data("group");

            _.each($scope.fileModel, function (file) {
                if (file.groupKey.toLowerCase() === groupKey) {
                    $scope.reviewModel.listFileIdDelete.push(file.fileId);
                }
            });

            $scope.tempUpload = $("#temporayUploadUpdate").data("kendoUpload");
            $scope.swiftUpload = $("#swiftUploadUpdate").data("kendoUpload");
            $scope.specialUpload = $("#specialUploadUpdate").data("kendoUpload");
            switch (groupKey) {
                case 'temporay':
                    $scope.tempUpload.removeAllFiles();
                    break;
                case 'swift':
                    $scope.swiftUpload.removeAllFiles();
                    break;
                case 'special':
                    $scope.specialUpload.removeAllFiles();
                    break;
                default:
            }
        }
    };

    $scope.removeUploadedFile = function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        $scope.reviewModel.listFileIdDelete.push($(e.currentTarget).data("identifier"));
        $scope.fileModel = _.filter($scope.fileModel, function (file) {
            return file.fileId !== $(e.currentTarget).data("identifier");
        });
        $(e.currentTarget).closest("li").hide();
    }

    $scope.rejectComment = "";
    $scope.approveComment = "";

    var uploadAction = function (isUpdateAction) {
        if (!isUpdateAction) {
            // Define upload control for each group
            $scope.tempUpload = $("#temporayUpload").data("kendoUpload");
            $scope.swiftUpload = $("#swiftUpload").data("kendoUpload");
            $scope.specialUpload = $("#specialUpload").data("kendoUpload");
        } else {
            // Define upload control for each group
            $scope.tempUpload = $("#temporayUploadUpdate").data("kendoUpload");
            $scope.swiftUpload = $("#swiftUploadUpdate").data("kendoUpload");
            $scope.specialUpload = $("#specialUploadUpdate").data("kendoUpload");
        }

        // upload file
        var uploadFiles = [];
        var totalFilesSize = 0;

        uploadFiles = uploadFiles.concat($scope.tempUpload.getFiles());
        uploadFiles = uploadFiles.concat($scope.swiftUpload.getFiles());
        uploadFiles = uploadFiles.concat($scope.specialUpload.getFiles());

        if (uploadFiles.length > 15) {
            $rootScope.isLoading = false;

            $scope.dialogOption.title = "Files upload";
            $scope.dialogOption.content = "Total number of file upload cannot be more than <strong>15 files</strong>.";
            utils.dialog.showDialog($scope.dialogOption);
            return false;
        }

        _.each(uploadFiles, function (file) {
            totalFilesSize += file.size;
        });

        if (totalFilesSize > 15728640) {
            $rootScope.isLoading = false;

            $scope.dialogOption.title = "Files upload";
            $scope.dialogOption.content = "Total upload file size cannot be more than <strong> 15 megabyte</strong>.";
            utils.dialog.showDialog($scope.dialogOption);
            return false;
        }

        if ($scope.tempUpload.getFiles().length > 0) {
            $($scope.tempUpload)[0].deferred = $.Deferred();
            promises.push($($scope.tempUpload)[0].deferred.promise());
            $scope.tempUpload.upload();
        }
        if ($scope.swiftUpload.getFiles().length > 0) {
            $($scope.swiftUpload)[0].deferred = $.Deferred();
            promises.push($($scope.swiftUpload)[0].deferred.promise());
            $scope.swiftUpload.upload();
        }
        if ($scope.specialUpload.getFiles().length > 0) {
            $($scope.specialUpload)[0].deferred = $.Deferred();
            promises.push($($scope.specialUpload)[0].deferred.promise());
            $scope.specialUpload.upload();
        }
    }

    var review = function () {

        try {
            if ($scope.userProfile.userProfileId == $scope.sceDetail.reviewer.userProfileId) {
                $scope.reviewModel.isRequireUpdate = $scope.sceDetail.isRequireUpdate;
                if ($scope.reviewModel.action == 'reject') {
                    $scope.reviewModel.consequences = "";
                    $scope.reviewModel.precautionsByOperations = "";
                    $scope.reviewModel.isTempOperatingProcedureRequired = "";
                    $scope.reviewModel.isDetailRARequired = "";
                    $scope.reviewModel.isSpecialSIRequired = "";
                    $scope.reviewModel.endorser = null;
                    $scope.reviewModel.approver = null;
                } else {
                    $scope.reviewModel.endorser = $scope.reviewModel.endorser.userProfileId;
                    $scope.reviewModel.approver = $scope.reviewModel.approver.userProfileId;
                }
                $rootScope.isLoading = true;
                sceServices.reviewSce($stateParams.sceId, $scope.reviewModel).then(function (response) {
                    $rootScope.isLoading = false;
                    switch ($scope.reviewModel.action) {
                        case 'approve':
                            $scope.dialogOption.title = "SCE Reviewed";
                            $scope.dialogOption.content = "This SCE is reviewed and <strong>pending endorsement</strong>";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                        case 'reject':
                            $scope.dialogOption.title = "SCE Not Reviewed";
                            $scope.dialogOption.content = "This SCE is not reviewed and <strong>requires update</strong> from the applicant";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                        case 'update':
                            $scope.dialogOption.title = "SCE Review Updated";
                            $scope.dialogOption.content = "This SCE Review is saved";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                    }
                }, function (error) {
                    $rootScope.isLoading = false;
                    console.log("review not success");
                    switch ($scope.reviewModel.action) {
                        case 'approve':
                            $scope.dialogOption.title = "SCE Review Failed";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                        case 'reject':
                            $scope.dialogOption.title = "SCE Not Reviewed";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                        case 'update':
                            $scope.dialogOption.title = "SCE Save Failed";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                    }
                });

            } else {
                $rootScope.isLoading = false;
                $scope.dialogOption.title = "Access Denied";
                $scope.dialogOption.content = "You don't have any permission to do this action.";
                utils.dialog.showDialog($scope.dialogOption);
            }
        } catch (err) {
            utils.error.showErrorGet(err);
            $rootScope.isLoading = false;
        }
    };

    // Clean up upload control and get list file to delete
    var cleanUploadControl = function (isUpdateAction) {
        if (!isUpdateAction) {
            // Define upload control for each group
            $scope.tempUpload = $("#temporayUpload").data("kendoUpload");
            $scope.swiftUpload = $("#swiftUpload").data("kendoUpload");
            $scope.specialUpload = $("#specialUpload").data("kendoUpload");
        } else {
            // Define upload control for each group
            $scope.tempUpload = $("#temporayUploadUpdate").data("kendoUpload");
            $scope.swiftUpload = $("#swiftUploadUpdate").data("kendoUpload");
            $scope.specialUpload = $("#specialUploadUpdate").data("kendoUpload");
        }

        $scope.tempUpload.removeAllFiles();
        $scope.swiftUpload.removeAllFiles();
        $scope.specialUpload.removeAllFiles();

        $scope.reviewModel.listFileIdDelete.concat($scope.reviewModel.listFileIdUpload);
        // hide loading
        $rootScope.isLoading = false;
    }

    $scope.reviewActions = [{
        text: 'CANCEL'
    },
    {
        text: "APPROVE",
        action: function () {
            // show loading
            $rootScope.isLoading = true;

            $scope.reviewModel.comment = $scope.approveComment;
            $scope.reviewModel.action = 'approve';
            if ($scope.validators.approveReview.validate()) {
                uploadAction(false);
                $.when.apply(null, promises).then(review, cleanUploadControl);
                return true;
            }
            // Returning false will prevent the closing of the dialog
            return false;
        },
        primary: true
    }];

    $scope.updateReviewActions = [
    {
        text: 'CANCEL'
    },
    {
        text: "UPDATE",
        action: function () {
            // show loading
            $rootScope.isLoading = true;

            $scope.reviewModel.comment = $scope.approveComment;
            $scope.reviewModel.action = 'update';
            if ($scope.validators.updateRequireReview.validate()) {
                uploadAction(true);
                $.when.apply(null, promises).then(review, cleanUploadControl);
                return true;
            }
            return false;
        },
        primary: true
    }
    ];

    $scope.rejectActions = [
    {
        text: 'CANCEL'
    },
    {
        text: 'REJECT',
        action: function () {
            $scope.reviewModel.comment = $scope.rejectComment;
            $scope.reviewModel.action = 'reject';
            if ($scope.validators.rejectReview.validate()) {
                review();
                // Returning false will prevent the closing of the dialog
                return true;
            }
            return false;
        },
        primary: true
    }
    ];

    //#endregion

    //#region Cancel SCE

    $scope.cancelSce = function (e) {
        //prevent multi click
        $scope.inProgress = true;
        e.preventDefault();
        e.stopImmediatePropagation();

        try {
            if ($scope.userProfile.userProfileId == $scope.sceDetail.applicant.userProfileId || $scope.isAdmin) {
                $scope.confirmDialog("SCE Cancel", "Are you sure you want to cancel this SCE?").then(function () {
                    // show loading
                    $rootScope.isLoading = true;

                    sceServices.cancelSce($stateParams.sceId).then(function (response) {
                        $scope.inProgress = false;
                        $rootScope.isLoading = false;

                        $scope.dialogOption.title = "SCE Canceled";
                        $scope.dialogOption.content = "SCE form has been canceled successfully";
                        utils.dialog.showDialog($scope.dialogOption, function () {
                            $state.go(constants.state.scelist);
                        });
                    }, function (error) {
                        $scope.inProgress = false;
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "SCE Cancel Failed";
                        $scope.dialogOption.content = error.message;
                        utils.dialog.showDialog($scope.dialogOption);
                    });
                }, function () {
                    $scope.inProgress = false;
                });
            } else {
                $scope.inProgress = false;
                $rootScope.isLoading = false;

                $scope.dialogOption.title = "Access Denied";
                $scope.dialogOption.content = "You don't have any permission to do this action.";
                utils.dialog.showDialog($scope.dialogOption);
            }
        }
        catch (err) {
            utils.error.showErrorGet(err);
            $scope.inProgress = false;
            $rootScope.isLoading = false;
        }

        $scope.inProgress = false;
    };

    //#endregion

    //#region Endorse form

    $scope.endorseModel = {
        comment: "",
        precautionsByEndorser: "",
        action: ""
    };

    $scope.endorse = function () {
        // show loading
        $rootScope.isLoading = true;

        try {
            if ($scope.userProfile.userProfileId == $scope.sceDetail.endorser.userProfileId) {
                sceServices.endorseSce($stateParams.sceId, $scope.endorseModel).then(function (response) {
                    $rootScope.isLoading = false;
                    switch ($scope.endorseModel.action) {
                        case 'approve':
                            $scope.dialogOption.title = "SCE Endorsed";
                            $scope.dialogOption.content = "This SCE's Endorsement is approved and <strong>pending approval</strong>.";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                        case 'reject':
                            $scope.dialogOption.title = "SCE Not Endorsed";
                            $scope.dialogOption.content = "This SCE is not endorsed and <strong>requires update</strong> from the reviewer";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                    }
                }, function (error) {
                    $rootScope.isLoading = false;
                    switch ($scope.endorseModel.action) {
                        case 'approve':
                            $scope.dialogOption.title = "SCE Endorsed";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                        case 'reject':
                            $scope.dialogOption.title = "SCE Not Endorsed";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                    }
                });
            } else {
                $rootScope.isLoading = false;

                $scope.dialogOption.title = "Access Denied";
                $scope.dialogOption.content = "You don't have any permission to do this action.";
                utils.dialog.showDialog($scope.dialogOption);
            }
        }
        catch (err) {
            utils.error.showErrorGet(err);
            $rootScope.isLoading = false;
        }
    };

    $scope.endorseActions = [
    {
        text: 'CANCEL'
    },
    {
        text: 'ENDORSE',
        action: function () {
            $scope.endorseModel.comment = $scope.approveComment;
            $scope.endorseModel.action = 'approve';
            if ($scope.validators.approveEndorse.validate()) {
                $scope.endorse();
                return true;
            }
            return false;
        },
        primary: true
    }
    ];

    $scope.rejectEndorseActions = [
    {
        text: 'CANCEL'
    },
    {
        text: 'REJECT',
        action: function () {
            $scope.endorseModel.comment = $scope.rejectComment;
            $scope.endorseModel.action = 'reject';
            if ($scope.validators.rejectEndorse.validate()) {
                $scope.endorse();
                return true;
            }
            return false;
        },
        primary: true
    }
    ];

    $scope.openFile = function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        var fileId = "";
        if ($(e.currentTarget).is("li")) {
            fileId = $(e.currentTarget).attr("id");
        } else {
            fileId = $(e.currentTarget).closest("li").attr("id");
        }

        window.open(sceServices.viewFile($stateParams.sceId, fileId), "_blank");
    }

    //#endregion

    //#region Approve form

    $scope.approveModel = {
        comment: "",
        precautionsByApprover: "",
        action: "",
        isReApprove: false
    };

    $scope.approve = function () {
        // show loading
        $rootScope.isLoading = true;

        try {
            if ($scope.userProfile.userProfileId == $scope.sceDetail.approver.userProfileId) {
                sceServices.approveSce($stateParams.sceId, $scope.approveModel).then(function (response) {
                    $rootScope.isLoading = false;
                    switch ($scope.approveModel.action) {
                        case 'approve':
                            $scope.dialogOption.title = "SCE Approved";
                            $scope.dialogOption.content = "This SCE is approved and <strong>pending acknowledgment</strong>.";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                        case 'reject':
                            $scope.dialogOption.title = "SCE Not Approved";
                            $scope.dialogOption.content = "This SCE is not approved and <strong>requires update</strong> from the reviewer";
                            utils.dialog.showDialog($scope.dialogOption, function () {
                                $state.go(constants.state.scelist);
                            });
                            break;
                    }
                }, function (error) {
                    $rootScope.isLoading = false;
                    switch ($scope.approveModel.action) {
                        case 'approve':
                            $scope.dialogOption.title = "SCE Approve Failed";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                        case 'reject':
                            $scope.dialogOption.title = "SCE Reject Failed";
                            $scope.dialogOption.content = error.message;
                            utils.dialog.showDialog($scope.dialogOption);
                            break;
                    }
                });
            } else {
                $rootScope.isLoading = false;
                $scope.dialogOption.title = "Access Denied";
                $scope.dialogOption.content = "You don't have any permission to do this action.";
                utils.dialog.showDialog($scope.dialogOption);
            }
        }
        catch (err) {
            utils.error.showErrorGet(err);
            $rootScope.isLoading = false;
        }
    };

    $scope.approveActions = [
    {
        text: 'CANCEL'
    },
    {
        text: 'APPROVE',
        action: function () {
            $scope.approveModel.comment = $scope.approveComment;
            $scope.approveModel.action = 'approve';
            if ($scope.validators.approve.validate()) {
                $scope.approve();
                return true;
            }
            // Returning false will prevent the closing of the dialog
            return false;
        },
        primary: true
    }
    ];

    $scope.rejectApproveActions = [
    {
        text: 'CANCEL'
    },
    {
        text: 'REJECT',
        action: function () {
            $scope.approveModel.comment = $scope.rejectComment;
            $scope.approveModel.action = 'reject';
            if ($scope.validators.rejectApprove.validate()) {
                $scope.approve();
                return true;
            }
            return false;
        },
        primary: true
    }
    ];


    //#endregion

    //#region Acknowledge form

    $scope.acknowledgeActions = [
    {
        text: 'CANCEL'
    },
    {
        text: 'ACKNOWLEDGE',
        action: function () {
            // show loading
            $rootScope.isLoading = true;

            try {
                sceServices.acknowledgeSce($stateParams.sceId, { isReAcknowledge: false }).then(function (response) {
                    $rootScope.isLoading = false;

                    $scope.dialogOption.title = "SCE Acknowledged";
                    $scope.dialogOption.content = "This SCE is acknowledged and <strong>live</strong>.";
                    utils.dialog.showDialog($scope.dialogOption, function () {
                        $rootScope.goToMyPendingAction = true;
                        $state.go(constants.state.scelist);
                    });
                }, function (error) {
                    $rootScope.isLoading = false;

                    $scope.dialogOption.title = "SCE Acknowledge Failed.";
                    $scope.dialogOption.content = error.message;
                    utils.dialog.showDialog($scope.dialogOption);
                });
                // Returning false will prevent the closing of the dialog
                return true;
            }
            catch (err) {
                utils.error.showErrorGet(err);
                $rootScope.isLoading = false;
            }
        },
        primary: true
    }
    ];

    //#endregion

    //#region live add ptw form

    $scope.addNewPTWModel = {
        ptwNo: "",
        IsNormalize: false
    };

    $scope.EditPTWModel = {
        ptwId: "",
        ptwNo: ""
    };

    $scope.DeletePTWModel = {
        ptwId: ""
    };

    $scope.normalizedPTW = "";

    $scope.ptwActions = {
        dataSource: {
            transport: {
                read: function (options) {
                    sceServices.GetPTWListing($stateParams.sceId).then(function (response) {
                        if (response.data != null) {
                            var list = [];
                            for (i = 0; i < response.data.length; i++) {
                                if (!response.data[i].isNormalized) {
                                    list.push(response.data[i]);
                                } else {
                                    $scope.normalizedPTW = {
                                        normalizedBy: response.data[i].byPassedBy,
                                        profileId: response.data[i].byPassByProfileId,
                                        image: response.data[i].image,
                                        normalizedDateTime: response.data[i].time,
                                        ptwNo: response.data[i].ptwNo
                                    };
                                }
                            }
                            options.success(list);
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                },
                update: function (options) {
                    $scope.EditPTWModel.ptwId = options.data.models[0].sceptwId;
                    $scope.EditPTWModel.ptwNo = options.data.models[0].ptwNo;
                    sceServices.UpdatePTW($stateParams.sceId, $scope.EditPTWModel).then(function (response) {
                        options.data.sceptwId = response.data.sceptwId;
                        options.data.ptwNo = response.data.ptwNo;
                        options.data.byPassedBy = response.data.byPassedBy;
                        options.data.time = response.data.time;
                        options.data.isEditable = true;
                        options.success(options.data);
                    }, function (error) {
                        options.error([]);
                        $scope.dialogOption.title = "Update PTW Failed.";
                        $scope.dialogOption.content = error.message;
                        utils.dialog.showDialog($scope.dialogOption);
                    });
                },
                destroy: function (options) {
                    $scope.DeletePTWModel.ptwId = options.data.models[0].sceptwId;
                    sceServices.DeletePTW($stateParams.sceId, $scope.DeletePTWModel).then(function (response) {
                        options.success();
                    }, function (error) {
                        options.error([]);
                        $scope.dialogOption.title = "Destroy PTW Failed.";
                        $scope.dialogOption.content = error.message;
                        utils.dialog.showDialog($scope.dialogOption);
                    });
                },
                create: function (options) {
                    $scope.addNewPTWModel.ptwNo = options.data.models[0].ptwNo;
                    sceServices.AddNewPTW($stateParams.sceId, $scope.addNewPTWModel).then(function (response) {
                        options.data.sceptwId = response.data.sceptwId;
                        options.data.ptwNo = response.data.ptwNo;
                        options.data.byPassedBy = response.data.byPassedBy;
                        options.data.time = response.data.time;
                        options.data.isEditable = true;
                        if ($("#ptwGrid").data("kendoGrid").dataSource.data().length > 1) {
                            $("#ptwGrid").data("kendoGrid").dataSource.data()[1].isEditable = false;
                        }
                        options.success(options.data);
                    }, function (error) {
                        options.error([]);
                        $scope.dialogOption.title = "Create PTW Failed.";
                        $scope.dialogOption.content = error.message;
                        utils.dialog.showDialog($scope.dialogOption);
                    });
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return {
                            models: kendo.stringify(options.models)
                        };
                    }
                }
            },
            batch: true,
            pageSize: 20,
            schema: {
                model: {
                    id: "sceptwId",
                    fields: {
                        sceptwId: {
                            editable: false, nullable: false
                        },
                        ptwNo: {
                            validation: {
                                required: {
                                    message: "PTW# is required"
                                }
                            }
                        },
                        byPassedBy: {
                            editable: false, nullable: false
                        },
                        time: {
                            editable: false, nullable: true, type: "date"
                        },
                        isEditable: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        scrollable: false,
        sortable: false,
        pageable: false,
        columns: [
        {
            field: "ptwNo",
            title: "PTW #",
            width: "200px"
        },
        {
            field: "byPassedBy", title: "Bypassed By",
            template: function (dataItem) {
                return "<a href='/profile/" + dataItem.byPassByProfileId + "'><strong>" + dataItem.byPassedBy + "</strong></a>";
            }
        },
        {
            field: "time", title: "Time", format: "{0:dd MMM yyyy at h:mm tt}"
        },
        {
            command: [
            {
                name: "edit", text: {
                    edit: "Edit", update: "Add", cancel: "Cancel"
                }
            },
            {
                name: "Delete",
                click: function (e) {
                    e.preventDefault();
                    var tr = $(e.target).closest("tr");
                    var data = this.dataItem(tr);
                    $scope.confirmDialog("Delete PTW number", "Please confirm that you want to delete PTW number").then(function () {
                        $("#ptwGrid").data("kendoGrid").dataSource.remove(data);
                        $("#ptwGrid").data("kendoGrid").dataSource.sync();
                    }, function () { });
                }
            }
            ], title: "&nbsp;"
        }
        ],
        toolbar: [{ name: "create", text: "Add New PTW#" }],
        editable: "inline",
        dataBound: function () {
            $('#ptwGrid').find("tr[role='row']").each(function (index, item) {
                var currentDataItem = $("#ptwGrid").data("kendoGrid").dataItem($(this).closest("tr"));
                if (currentDataItem !== null && currentDataItem !== undefined) {
                    if (currentDataItem.isEditable == false || index > 1) {
                        $(item).find(".k-grid-edit").hide();
                        $(item).find(".k-grid-Delete").hide();
                    }
                }
            });
        }
    };

    //#endregion

    //#region Transfer re-approve
    $scope.showTransferReApproverDialog = function () {
        $scope.transferReApproverDialog.center();
        $scope.transferReApproverDialog.open();
    };

    //#endregion
    //#region Re-Approve
    //$scope.selectionReApproveActions = [
    //{
    //    text: 'NO',
    //    action: function () {
    //        $scope.showReApproveDialog();
    //    }
    //},
    //{
    //    text: 'YES',
    //    action: function () {
    //        $scope.showReApproveWithNewApproverDialog();
    //    },
    //    primary: true
    //}
    //];

    //$scope.showReApproveDialog = function () {
    //    $scope.reApproveDialog.center();
    //    $scope.reApproveDialog.open();
    //};

    //$scope.showReApproveWithNewApproverDialog = function () {
    //    $scope.reApproveWithNewApproverDialog.center();
    //    $scope.reApproveWithNewApproverDialog.open();
    //};

    $scope.reApprovalComment = "";

    $scope.transferReApproverAction = [
    {
        text: 'CANCEL'
    },
    {
        text: 'Transfer',
        action: function () {
            if ($scope.validators.transferReApprover.validate()) {
                $scope.reApprovalWithNewApproverClick();
                return true;
            }
            return false;
        },
        primary: true
    }];
   // $scope.reApproveActions = [
   //{
   //    text: 'CANCEL'
   //},
   //{
   //    text: 'RE-APPROVE',
   //    action: function () {
   //        $scope.reApprovalClick();
   //        return true;
   //    },
   //    primary: true
   //}];

    $scope.transferReApproverClick = function () {
        $scope.approverProfileId = $scope.approverToTransfer.userProfileId;
        // show loading
        $rootScope.isLoading = true;

        try {
            if (($scope.userProfile.userProfileId == $scope.sceDetail.approver.userProfileId) || ($scope.userProfile.userProfileId == $scope.sceDetail.reApprover.userProfileId)) {
                sceServices.approverTransfer($stateParams.sceId, { newApprover: $scope.approverProfileId, comment: $scope.reApprovalComment }).then(function (response) {
                    $rootScope.isLoading = false;
                    $scope.reApproveResult.center();
                    $scope.reApproveResult.open();
                }, function (error) {
                    $rootScope.isLoading = false;
                    $scope.dialogOption.title = "SCE Re-Approve Transfer Failed";
                    $scope.dialogOption.content = "Cannot Transfer Re-Approver";
                    utils.dialog.showDialog($scope.dialogOption);
                });
            } else {
                $rootScope.isLoading = false;
                $scope.dialogOption.title = "Access Denied";
                $scope.dialogOption.content = "You don't have any permission to do this action.";
                utils.dialog.showDialog($scope.dialogOption);
            }
        }
        catch (err) {
            utils.error.showErrorGet(err);
            $rootScope.isLoading = false;
        }
    }

    //$scope.reApprovalClick = function () {
    //    // show loading
    //    $rootScope.isLoading = true;

    //    try {
    //        if (($scope.userProfile.userProfileId == $scope.sceDetail.approver.userProfileId) || ($scope.userProfile.userProfileId == $scope.sceDetail.reApprover.userProfileId)) {
    //            sceServices.approveSce($stateParams.sceId, { comment: $scope.reApprovalComment, precautionsByApprover: "", action: "approve", isReApprove: true }).then(function (response) {
    //                $rootScope.isLoading = false;
    //                $scope.dialogOption.title = "SCE Re-Approve";
    //                $scope.dialogOption.content = "This SCE is re-approved.";
    //                utils.dialog.showDialog($scope.dialogOption, function () {
    //                    $rootScope.goToMyPendingAction = true;
    //                    $state.go(constants.state.scelist);
    //                });
    //            }, function (error) {
    //                $rootScope.isLoading = false;
    //                $scope.dialogOption.title = "SCE Re-Approve Failed";
    //                $scope.dialogOption.content = "This SCE is approve failed.";
    //                utils.dialog.showDialog($scope.dialogOption);
    //            });
    //        } else {
    //            $rootScope.isLoading = false;
    //            $scope.dialogOption.title = "Access Denied";
    //            $scope.dialogOption.content = "You don't have any permission to do this action.";
    //            utils.dialog.showDialog($scope.dialogOption);
    //        }

    //    }
    //    catch (err) {
    //        utils.error.showErrorGet(err);
    //        $rootScope.isLoading = false;
    //    }
    //};
    //$scope.reApprovalWithNewApproverClick = function () {
    //    $scope.approverProfileId = $scope.approverToTransfer.userProfileId;
    //    // show loading
    //    $rootScope.isLoading = true;

    //    try {
    //        if (($scope.userProfile.userProfileId == $scope.sceDetail.approver.userProfileId) || ($scope.userProfile.userProfileId == $scope.sceDetail.reApprover.userProfileId)) {
    //            sceServices.approveSce($stateParams.sceId, { comment: $scope.reApprovalComment, precautionsByApprover: "", action: "approve", isReApprove: true, approverProfileId: $scope.approverProfileId }).then(function (response) {
    //                $rootScope.isLoading = false;
    //                $scope.reApproveResult.center();
    //                $scope.reApproveResult.open();
    //            }, function (error) {
    //                $rootScope.isLoading = false;
    //                $scope.dialogOption.title = "SCE Re-Approve Failed";
    //                $scope.dialogOption.content = "This SCE is approve failed.";
    //                utils.dialog.showDialog($scope.dialogOption);
    //            });
    //        } else {
    //            $rootScope.isLoading = false;
    //            $scope.dialogOption.title = "Access Denied";
    //            $scope.dialogOption.content = "You don't have any permission to do this action.";
    //            utils.dialog.showDialog($scope.dialogOption);
    //        }
    //    }
    //    catch (err) {
    //        utils.error.showErrorGet(err);
    //        $rootScope.isLoading = false;
    //    }
    //};

    $scope.transferReApproveResultActions = [{
        text: 'CLOSE',
        action: function () {
            $rootScope.goToMyPendingAction = true;
            $state.go(constants.state.scelist);
        }
    }];


    //#endregion

    //#region Re-Acknowledge

    $scope.reAcknowledgeActions = [{
        text: 'CANCEL'
    },
    {
        text: 'RE-ACKNOWLEDGE',
        action: function () {
            // show loading
            $rootScope.isLoading = true;

            try {
                if ($scope.sceDetail.currentUserRole == "5") {
                    sceServices.acknowledgeSce($stateParams.sceId, { isReAcknowledge: true }).then(function (response) {
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "SCE Re-Acknowledged";
                        $scope.dialogOption.content = "This SCE is <strong>re-acknowledged</strong> for Shift " + $scope.newestShiftNumber + ": " + $scope.newestShift + ".";
                        utils.dialog.showDialog($scope.dialogOption, function () {
                            $rootScope.goToMyPendingAction = true;
                            $state.go(constants.state.scelist);
                        });
                    }, function (error) {
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "SCE Re-Acknowledge Failed.";
                        $scope.dialogOption.content = error.message;
                        utils.dialog.showDialog($scope.dialogOption);
                    });
                } else {
                    $rootScope.isLoading = false;
                    $scope.dialogOption.title = "Access Denied.";
                    $scope.dialogOption.content = "You don't have any permission to do this action.";
                    utils.dialog.showDialog($scope.dialogOption);
                }

                // Returning false will prevent the closing of the dialog
                return true;
            }
            catch (err) {
                utils.error.showErrorGet(err);
                $rootScope.isLoading = false;
            }
        },
        primary: true
    }];

    //#endregion

    //#region Normalize

    $scope.normalizeModel = {
        ptwNo: ""
    };

    $scope.normalizeActions = [
    {
        text: 'CANCEL'
    },
    {
        text: 'CONFIRM',
        action: function () {
            // show loading
            $rootScope.isLoading = true;

            try {
                if ($scope.validators.normalize.validate()) {
                    sceServices.normalizeSce($stateParams.sceId, $scope.normalizeModel).then(function (response) {
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "SCE Normalized";
                        $scope.dialogOption.content = "This SCE is now <strong>Normalized and closed.</strong>";
                        utils.dialog.showDialog($scope.dialogOption, function () {
                            $state.go(constants.state.scelist);
                        });
                    }, function (error) {
                        $rootScope.isLoading = false;
                        $scope.dialogOption.title = "SCE Normalized Failed.";
                        $scope.dialogOption.content = error.message;
                        utils.dialog.showDialog($scope.dialogOption);
                    });
                    return true;
                } else {
                    $rootScope.isLoading = false;
                }
                return false;
            }
            catch (err) {
                utils.error.showErrorGet(err);
                $rootScope.isLoading = false;
            }
        },
        primary: true
    }
    ];
    //$sce.validatePTWActions = [{text:'CLOSE'}];

    //#endregion normalize

    $scope.pendingReview = false;
    $scope.pendingEndorse = false;
    $scope.pendingApprove = false;

    $scope.applicantIsTransfered = false;
    $scope.reviewerIsTransfered = false;
    $scope.endorserIsTransfered = false;
    $scope.approverIsTransfered = false;

    $scope.applicantToTransfer = {
    };

    $scope.applicantSearchText2 = "";

    $scope.applicantsOptions = {
        autoBind: false,
        optionLabel: "Select Applicant",
        filter: "contains",
        filtering: function (e) {
            $scope.applicantSearchText2 = e.filter == null ? "" : e.filter.value;
        },
        dataSource: $scope.applicantDataSource,
        dataTextField: "userName",
        dataValueField: "userProfileId",
        valueTemplate: function (dataItem) {
            if (!dataItem.hasOwnProperty('image')) {
                dataItem.image = $scope.applicantToTransfer.image;
            }
            return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
        },
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
'<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
    };

    $scope.applicantDataSource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                sceServices.getApplicantsForTransferInSameAreas($stateParams.sceId, $scope.applicantSearchText2).then(function (response) {
                    if (response.data != null) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (err) {
                    options.error([]);
                    utils.error.showErrorGet(err);
                });
            }
        }
    };

    $scope.showTransferRolesKendoDiaglog = function () {
        $scope.applicantToTransfer = $scope.sceDetail.applicant;
        $scope.reviewerToTransfer = $scope.sceDetail.reviewer;
        $scope.endorserToTransfer = $scope.sceDetail.endorser;
        $scope.approverToTransfer = $scope.sceDetail.approver;
        $("#sceTransferRoles").data("kendoDialog").open();
    };

    $scope.transferResultActions = [{
        text: 'CLOSE',
        action: function () {
            $state.go(constants.state.scelist);
        }
    }];

    $scope.transferRolesModel = {
    };

    $scope.adminComment = "";

    $scope.sceTransferRoles = [
    {
        text: 'CANCEL'
    },
    {
        text: 'CONFIRM',
        action: function () {
            if ($scope.validators.sceTransfer.validate()) {
                $rootScope.isLoading = true;
                $scope.transferRolesModel = {
                    applicantProfileId: ($scope.applicantToTransfer.userProfileId === null || $scope.applicantToTransfer.userProfileId === undefined || $scope.applicantToTransfer.userProfileId === "" || $scope.applicantToTransfer.userProfileId === undefined) ? null : $scope.applicantToTransfer.userProfileId,
                    reviewerProfileId: ($scope.pendingReview && $scope.reviewerToTransfer.userProfileId !== $scope.sceDetail.reviewer.userProfileId && $scope.reviewerToTransfer.userProfileId !== "") ? $scope.reviewerToTransfer.userProfileId : null,
                    endorserProfileId: ($scope.pendingEndorse && $scope.endorserToTransfer.userProfileId !== $scope.sceDetail.endorser.userProfileId && $scope.endorserToTransfer.userProfileId !== "") ? $scope.endorserToTransfer.userProfileId : null,
                    approverProfileId: ($scope.pendingApprove && $scope.approverToTransfer.userProfileId !== $scope.sceDetail.approver.userProfileId && $scope.approverToTransfer.userProfileId !== "") ? $scope.approverToTransfer.userProfileId : null,
                    comment: $scope.adminComment
                };
                if (($scope.transferRolesModel.applicantProfileId === null || $scope.transferRolesModel.applicantProfileId === undefined) && ($scope.transferRolesModel.reviewerProfileId === null || $scope.transferRolesModel.reviewerProfileId === undefined) && ($scope.transferRolesModel.endorserProfileId === null || $scope.transferRolesModel.endorserProfileId === undefined) && ($scope.transferRolesModel.approverProfileId === null || $scope.transferRolesModel.approverProfileId === undefined)) {
                    $rootScope.isLoading = false;
                    return true;
                }

                sceServices.transferRoles($stateParams.sceId, $scope.transferRolesModel).then(function (response) {
                    if ($scope.transferRolesModel.applicantProfileId != null && $scope.transferRolesModel.applicantProfileId != $scope.sceDetail.applicant.userProfileId) {
                        $scope.applicantIsTransfered = true;
                    }
                    if ($scope.transferRolesModel.reviewerProfileId != null && $scope.transferRolesModel.reviewerProfileId != $scope.sceDetail.reviewer.userProfileId) {
                        $scope.reviewerIsTransfered = true;
                    }
                    if ($scope.transferRolesModel.endorserProfileId != null && $scope.transferRolesModel.endorserProfileId != $scope.sceDetail.endorser.userProfileId) {
                        $scope.endorserIsTransfered = true;
                    }
                    if ($scope.transferRolesModel.approverProfileId != null && $scope.transferRolesModel.approverProfileId != $scope.sceDetail.approver.userProfileId) {
                        $scope.approverIsTransfered = true;
                    }
                    $rootScope.isLoading = false;
                    if ($scope.applicantIsTransfered || $scope.reviewerIsTransfered || $scope.endorserIsTransfered || $scope.approverIsTransfered) {
                        $("#transferResultForm").data("kendoDialog").open();
                    } else {
                        return true;
                    }
                }, function (err) {
                    $rootScope.isLoading = false;
                    $scope.dialogOption.title = "SCE Roles transferred failed.";
                    $scope.dialogOption.content = err.message;
                    utils.dialog.showDialog($scope.dialogOption);
                });

                return true;
            }
            return false;
        },
        primary: true
    }
    ];

    $scope.confirmDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content
        }).data("kendoConfirm").open().result;
    };

}]);
app.controller('sceListController', ['$rootScope', '$state', '$scope', '$location', '$timeout', 'sceServices', 'statusService', 'areaService', 'constants','$window',
function ($rootScope, $state, $scope, $location, $timeout, sceServices, statusService, areaService, constants, $window) {

    $scope.userProfile = $rootScope.$app.userProfile;
    $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
    $scope.dialogOption = {
        id: "dialogInfo",
        title: "",
        lableClose: "CLOSE",
        content: "",
        width: 300
    };

    $scope.isAdmin = $scope.userProfile.isAdmin;

    $scope.hide_item = "hide-item";

    $scope.hasApplicantRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",1,") >= 0;

    $rootScope.$app.title = constants.titlePage.sceListing;

    var indexTab = 0;
    $scope.isCalling = true;

    $scope.totalMySceListing = {
        totalMySCE: 0,
        totalPendingMyAction: 0
    };

    $scope.model = {
        view: "All",
        tagNo: "",
        status: "",
        filter: [{
            field: "",
            valueString: "",
            valueDateTimeFrom: "",
            valueDateTimeTo: "",
            valueDecimalFrom: "",
            valueDecimalTo: "",
            valueBit: "",
            isActive: false
        }],
        sort: [{
            field: "",
            asc: false,
            isActive: ""
        }],
        skip: 0,
        take: 0,
        isExport: false
    };

    onLoad = function () {
        $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";

        sceServices.getTotalMySceListing().then(function (response) {
            $scope.totalMySceListing = {
                totalMySCE: response.data.totalMySCE,
                totalPendingMyAction: response.data.totalPendingMyAction
            };
        }, function (error) {
            utils.error.showErrorGet(error);
        });
    };
    onLoad();

    $scope.searchByTagNo = function (keyEvent) {
        if (keyEvent.which === 13)
            $scope.searchByTagNoClick();
    };

    $scope.searchByTagNoClick = function () {
        $scope.onChangeTab(indexTab);
    };

    $scope.resetModel = function () {
        $scope.model.status = "";
        $scope.model.filter = [];
        $scope.model.sort = [];
        $scope.model.skip = "";
        $scope.model.take = "";
        $scope.model.isExport = "";
    };

    $scope.initData = function (options, isPendingReApproval, isPendingReAcknowledge, isPendingMoc) {

        kendo.ui.progress($('.sce-listing'), false);
        // reset input data
        $scope.resetModel();
        var optionfilters = [];
        var filters = [
            {
                field: "requiredDate",
                valueDateTimeFrom: null,
                valueDateTimeTo: null,
                isActive: false
            },
            {
                field: "requisitionDate",
                valueDateTimeFrom: null,
                valueDateTimeTo: null,
                isActive: false
            },
            {
                field: "area",
                valueString: "",
                isActive: false
            },
            {
                field: "status",
                valueString: "",
                isActive: false
            },
            {
                field: "lapse",
                ValueDecimalFrom: null,
                isActive: false
            },
            {
                field: "isPendingReApprove",
                valueBit: true,
                isActive: isPendingReApproval === true
            },
            {
                field: "isPendingReAcknowledge",
                valueBit: true,
                isActive: isPendingReAcknowledge === true
            },
            {
                field: "isPendingMoc",
                valueBit: true,
                isActive: isPendingMoc === true
            }
        ];
        if (options.data.filter !== null && options.data.filter !== undefined) {

            _.each(options.data.filter.filters, function (o) {
                var listFilterOut = [];
                utils.getfilter(o, listFilterOut);
                Array.prototype.push.apply(optionfilters, listFilterOut);
            });

            if (optionfilters !== null && optionfilters !== undefined) {
                _.each(optionfilters, function (m) {
                    var date = null;
                    switch (m.field) {
                        case "requiredDate":
                            if (m.operator === "gte") {
                                date = $.format.toBrowserTimeZone(m.value, constants.format.date.default);
                                filters[0].valueDateTimeFrom = date;
                                filters[0].isActive = true;
                            }
                            else {
                                date = $.format.toBrowserTimeZone(m.value, constants.format.date.default);
                                filters[0].valueDateTimeTo = date;
                                filters[0].isActive = true;
                            }
                            break;

                        case "requisitionDate":
                            if (m.operator === "gte") {
                                date = $.format.toBrowserTimeZone(m.value, constants.format.date.default);
                                filters[1].valueDateTimeFrom = date;
                                filters[1].isActive = true;
                            }
                            else {
                                date = $.format.toBrowserTimeZone(m.value, constants.format.date.default);
                                filters[1].valueDateTimeTo = date;
                                filters[1].isActive = true;
                            }
                            break;

                        case "area":
                            filters[2].valueString = filters[2].valueString + "," + m.value;
                            filters[2].isActive = true;
                            break;

                        case "status":
                            filters[3].valueString = filters[3].valueString + "," + m.value;
                            filters[3].isActive = true;
                            break;
                        case "lapse":
                            filters[4].ValueDecimalFrom = m.value;
                            filters[4].isActive = true;
                            break;
                        default:
                            var filterModel = {
                                field: m.field,
                                valueString: m.value,
                                isActive: true
                            };
                            filters.push(filterModel);
                            break;
                    }
                });
            }
            $scope.model.filter = filters;
        }
        if (options.data.sort !== null && options.data.sort !== undefined) {
            _.each(options.data.sort, function (o) {
                $scope.model.sort.push({
                    field: o.field,
                    asc: o.dir === 'asc',
                    isActive: true
                });
            });
        }
        $scope.model.take = options.data.take;
        $scope.model.skip = (options.data.page - 1) * options.data.pageSize;
    };

    $scope.isFilter = 0;
    $scope.needToCallServer = 0;

    $scope.allDataSource = new kendo.data.DataSource({
        transport: {
            read: function (options) {
                if ($scope.isCalling) {
                    $rootScope.isLoading = true;

                    $scope.initData(options, $rootScope.filterIsPendingReApprove, $rootScope.filterIsPendingReAcknowledge, $rootScope.filterIsPendingMoc);

                    var isPreFilter = $rootScope.filterByArea !== null && $rootScope.filterByArea !== undefined && $rootScope.filterByArea.length > 0;

                    $scope.needToCallServer++;

                    if (isPreFilter && $scope.isFilter === 0) {
                        var ds = $(".sce-listing").data("kendoGrid").dataSource;
                        var currentFilter = [];
                        currentFilter.push({ field: "status", operator: "eq", value: $rootScope.filterByStatus });
                        _.each($rootScope.filterByArea, function (m) {
                            currentFilter.push({ field: "area", operator: "eq", value: m });
                        });
                        $scope.isFilter++;
                        ds.filter(currentFilter);
                    }

                    if (!isPreFilter || isPreFilter && $scope.needToCallServer === 2) {
                        if ($rootScope.goToMyPendingAction) {
                            $("#sceTab").data("kendoTabStrip").select(2);
                            $scope.model.view = "PendingMyAction";
                            $rootScope.goToMyPendingAction = false;
                        }
                        sceServices.getSceListing($scope.model).then(function (response) {
                            if (response.data !== null && response.data !== undefined) {
                                options.success(response.data);
                            } else {
                                options.success([]);
                            }
                            // reset value
                            $rootScope.filterByArea = null;
                            $rootScope.filterByStatus = '';
                            $rootScope.filterIsPendingReApprove = false;
                            $rootScope.filterIsPendingReAcknowledge = false;
                            $rootScope.filterIsPendingMoc = false;

                            $rootScope.isLoading = false;
                        }, function (error) {
                            options.error([]);
                            utils.error.showErrorGet(error);
                            // reset value
                            $rootScope.filterByArea = null;
                            $rootScope.filterByStatus = '';
                            $rootScope.filterIsPendingReApprove = false;
                            $rootScope.filterIsPendingReAcknowledge = false;
                            $rootScope.filterIsPendingMoc = false;

                            $rootScope.isLoading = false;
                        });
                    }
                    else {
                        options.success([]);
                        $('.sce-listing .k-grid-norecords-template').hide();
                    }
                }
                else {
                    options.success([]);
                    $('.sce-listing .k-grid-norecords-template').hide();
                }
            }
        },
        schema: {
            model: {
                fields: {
                    area: { type: "string" },
                    tagNo: { type: "string" },
                    sceNo: { type: "string" },
                    reason: { type: "string" },
                    requisitionDate: { type: "date" },
                    requiredDate: { type: "date" },
                    lapse: { type: "number", validation: { required: true, min: 0 } },
                    status: { type: "string" },
                    live: { type: "string" }
                }
            },
            total: function (response) {
                return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
            }
        },
        pageSize: 20,
        serverPaging: true,
        serverFiltering: true,
        serverSorting: true
    });

    $scope.status = new kendo.data.DataSource({
        transport: {
            read: function (options) {
                statusService.getStatusBySce().then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    });

    $scope.areas = new kendo.data.DataSource({
        transport: {
            read: function (options) {
                areaService.getAllAreaIsActive().then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    });

    $scope.mainGridOptions = {
        dataSource: $scope.allDataSource,
        filterable: {
            extra: true,
            operators: {
                date: {
                    gte: "Start Date",
                    lte: "End Date"
                },
                string: {
                    operator: "contains"
                },
                number: {
                    operator: "eq"
                }
            }
        },
        filterMenuInit: function (e) {
            utils.filterMenuInit(e);
        },
        scrollable: false,
        sortable: {
            mode: "multiple",
            allowUnsort: true
        },
        pageable: {
            pageSizes: true,
            buttonCount: 5
        },
        columns: [{
            field: "area",
            title: "Area",
            width: "70px",
            attributes: {
                "class": "cell_area"
            },
            filterable: {
                multi: true,
                dataSource: $scope.areas,
                itemTemplate: function (e) {
                    if (e.field === "all") {
                        return "<li class=\"select_all\"><label><input type='checkbox' /> <span>#= all#</span></label></li>";
                    } else {
                        return "<li><label><input type='checkbox' name='" + e.field + "' value='#=data.lookupAreaId#'/> <span>#= data.description #</span></label></li>";
                    }
                }
            }
        }, {
            field: "tagNo",
            title: "Tag No.",
            width: "93px",
            attributes: {
                "class": "cell_tag_no"
            },
            filterable: {
                extra: false
            }
        }, {
            field: "sceNo",
            title: "SCE No.",
            width: "127px",
            attributes: {
                "class": "cell_sce_no"
            },
            filterable: {
                extra: false
            }
        }, {
            field: "reason",
            title: "Reason",
            filterable: {
                extra: false
            },
            attributes: {
                "class": "cell_reason"
            }
        }, {
            field: "requisitionDate",
            title: "Application Date",
            width: "140px",
            format: "{0:dd MMM yyyy}",
            attributes: {
                "class": "cell_application_date"
            },
            filterable: {
                ui: "datepicker"
            }
        }, {
            field: "requiredDate",
            title: "Required Date",
            width: "140px",
            format: "{0:dd MMM yyyy}",
            attributes: {
                "class": "cell_required_date"
            },
            filterable: {
                ui: "datepicker"
            }
        }, {
            field: "lapse",
            title: "Lapse",
            width: "85px",
            attributes: {
                "class": "cell_lapse"
            },
            filterable: {
                extra: false
            },
            template: '#:lapse# days'
        }, {
            field: "status",
            title: "Status",
            width: "145px",
            attributes: {
                "class": "cell_status"
            },
            filterable: {
                multi: true,
                dataSource: $scope.status,
                itemTemplate: function (e) {
                    if (e.field === "all") {
                        return "<li class=\"select_all\"><label><input type='checkbox' /> <span>#= all#</span></label></li>";
                    } else {
                        return "<li><label><input type='checkbox' name='" + e.field + "' value='#=data.statusKey#'/> <span>#= data.description #</span></label></li>";
                    }
                }
            },
            template: function (dataItem) {
                var retVal = "";
                switch (dataItem.statusKey) {
                    case "1":
                        retVal = "<strong class='text-grey'>" + dataItem.status + "</strong>";
                        break;
                    case "2":
                    case "3":
                    case "4":
                    case "5":
                    case "9":
                        retVal = "<strong class='text-light-orange'>" + dataItem.status + "</strong>";
                        break;
                    case "7":
                    case "10":
                        retVal = "<strong class='text-green'>" + dataItem.status + "</strong>";
                        break;
                }
                return retVal;
            }
        }, {
            title: "Live",
            field: "live",
            width: "300px",
            attributes: {
                "class": "cell_live"
            },
            template: function (dataItem) {
                var outPut = '';
                if (dataItem.live !== '') {
                    var dataArray = jQuery.parseJSON(dataItem.live);
                    _.each(dataArray, function (item, index) {
                        outPut += "<li><span><i class=\"icon-hourglass\"></i> " + item + "</span></li>";
                    });
                }
                if (outPut !== '') {
                    outPut = "<ul class=\"live_data\">"
                                + outPut +
                            "</ul>";
                }

                var canTransferRoles = $scope.isAdmin && dataItem.statusKey !== "10";

                return "<button class=\"btn-grid-item-menu\" type=\"button\" data-ng-click=\"openItemMenu($event)\"><i class=\"icon-dot-3 icon-btn-grid-item-menu\"></i></button>" +
                        outPut +
                        "<ul class=\"grid-item-menu\" data-id='" + dataItem.sceId + "' style=\"display: none; background-color: #fff; border: 1px solid #ccc;\" >" +
                            "<li><a href=\"#\" data-ng-click=\"viewDetail('" + dataItem.sceId + "')\">View</a></li>" +
                            (dataItem.statusKey !== '10' && dataItem.statusKey !== '1' && $scope.hasApplicantRole && $scope.userProfile.userProfileId === dataItem.applicantId && !dataItem.isRaCreated ? '<li><a href="#" data-ng-click="requestRa(\'' + dataItem.sceId + '\')">Request RA</a></li>' : '') +
                            ($scope.userProfile.userProfileId === dataItem.applicantId && dataItem.statusKey !== '10' ? '<li><a href="#" data-ng-click="transferSce(\'' + dataItem.sceId + '\')">Transfer</a></li>' : '') +
                            "<li><a href =\"#\" data-ng-class=\"" + (canTransferRoles ? '' : 'hide_item') + "\" data-ng-click = \"showTransferRolesKendoDiaglog('" + dataItem.sceId + "')\" >Transfer Roles...</a></li>" +
                            ($scope.hasApplicantRole && parseInt(dataItem.statusKey) >= 5 ? "<li><a href=\"#\" data-ng-click=\"copySce('" + dataItem.sceId + "', '" + dataItem.sceNo + "')\">Copy SCE</li>" : '') +
                            "<li><a href=\"#\" data-ng-click=\"statusLog('" + dataItem.sceId + "')\">Status Log</a></li>" +
                            "<li><a href data-ng-click='scePrint(\"" + dataItem.sceId + "\")' data-ng-hide='" + (dataItem.statusKey === "1") + "'>Print</a></li>" +
                            (($scope.userProfile.userProfileId === dataItem.applicantId && $scope.hasApplicantRole || $scope.userProfile.isAdmin) && (dataItem.statusKey === "9" || parseInt(dataItem.statusKey) < 7) ? '<li><a href="#" data-ng-click="cancelSce(\'' + dataItem.sceId + '\')">Cancel SCE</a></li>' : '') +
                        "</ul>";
            },
            filterable: false,
            sortable: false
        }],
        noRecords: true,
        messages: {
            noRecords: "There is no data on current page"
        },
        toolbar: [{
            template: "<kendo-tabstrip id='sceTab'>" +
                            "<ul>" +
                                "<li data-ng-click=\"onChangeTab(0)\" class=\"k-state-active\">All</li>" +
                                "<li data-ng-click=\"onChangeTab(1)\">My SCE <small>({{totalMySceListing.totalMySCE}})</small></li>" +
                                "<li data-ng-click=\"onChangeTab(2)\">Pending My Action <small>({{totalMySceListing.totalPendingMyAction}})</small></li>" +
                            "</ul>" +
                        "</kendo-tabstrip>"
        }],
        selectable: "row",
        change: function (e) {
            e.preventDefault();
            var dataItem = this.dataItem(this.select());
            $state.go(constants.state.scedetail, { sceId: dataItem.sceId });
        }
    };

    $scope.openItemMenu = function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        var itemMenu = $(e.target).closest("td").find(".grid-item-menu");
        _.each($('.grid-item-menu'), function (item) {
            if ($(item).attr("data-id") !== $(itemMenu).attr("data-id")) {
                $(item).hide();
            }
            else {
                $(itemMenu).slideToggle();
            }
        });
    };

    $scope.viewDetail = function (id) {
        $state.go("scedetail", { sceId: id });
    };

    $scope.requestRa = function (id) {
        // do something
        $state.go(constants.state.raNew, { sceId: id });
    };

    $scope.statusLog = function (id) {
        $state.go(constants.state.sceStatusLog, { sceId: id });
    }

    $scope.sceIdSelected = "";

    $scope.transferSce = function (id) {
        $scope.sceIdSelected = id;
        $scope.transferDialog.open();
    };

    $scope.cancelSce = function (id) {
        $scope.confirmDialog("Cancel SCE", "Are you sure you want to cancel this SCE?").then(function () {
            $rootScope.isLoading = true;
            try {
                sceServices.cancelSce(id).then(function (response) {
                    $scope.dialogOption.title = "SCE Cancelled";
                    $scope.dialogOption.content = "SCE form has been cancelled successfully";
                    utils.dialog.showDialog($scope.dialogOption, function () {
                        var grid = $(".sce-listing").data("kendoGrid");
                        grid.dataSource.read();
                        onLoad();
                    });

                    $rootScope.isLoading = false;
                }, function (error) {
                    $rootScope.isLoading = false;

                    $scope.dialogOption.title = "SCE Cancel Failed";
                    $scope.dialogOption.content = error.message;
                    utils.dialog.showDialog($scope.dialogOption);
                });
            }
            catch (err) {
                $rootScope.isLoading = false;
            }
        }, function () {
            // Choosed cancel, do nothing
        });
    };

    $scope.scePrint = function (id) {
        window.open('/print/sce/' + id, '_blank');
    };

    $scope.sceCopyDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content,
            actions: [{ text: "COPY", primary: true },
                { text: "CANCEL" }]
        }).data("kendoConfirm").open().result;
    };

    $scope.copySce = function (id, sceNo) {
        $scope.sceCopyDialog("SCE Copy Confirmation", "Existing SCE No. <strong>" + sceNo + "</strong> information will be copied into new SCE request. Are you sure to proceed?").then(function () {
            $state.go(constants.state.scecopynew, { sceId: id });
        }, function () {
            // Chooses cancel, do nothing
        });
    }

    $scope.onChangeTab = function (index) {
        indexTab = index;
        var grid = $(".sce-listing").data("kendoGrid");

        $scope.isCalling = false;
        // clear filter
        grid.dataSource.sort({});
        grid.dataSource.filter({});

        switch (index) {
            case 0:
                $scope.model.view = "All";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
            case 1:
                $scope.model.view = "MySCE";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
            case 2:
                $scope.model.view = "PendingMyAction";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
        }
    };

    //#region Transfer SCE
    $scope.transferSceModel = {
        newApplicantId: "",
        comment: ""
    };

    $scope.transferSceAction = [
        { text: 'CANCEL' },
        {
            text: 'TRANSFER',
            action: function () {
                sceServices.transferSce($scope.sceIdSelected, $scope.transferSceModel).then(function (response) {
                    $scope.dialogOption.title = "SCE Transferred";
                    $scope.dialogOption.content = "This SCE is now transferred to <strong>" + response.data + "</strong>. A notification has been sent to alert the new applicant.";

                    utils.dialog.showDialog($scope.dialogOption, function () {
                        var grid = $(".sce-listing").data("kendoGrid");
                        switch (indexTab) {
                            case 0:
                                $scope.model.view = "All";
                                $scope.isCalling = true;
                                grid.dataSource.read();
                                break;
                            case 1:
                                $scope.model.view = "MySCE";
                                $scope.isCalling = true;
                                grid.dataSource.read();
                                break;
                            case 2:
                                $scope.model.view = "PendingMyAction";
                                $scope.isCalling = true;
                                grid.dataSource.read();
                                break;
                        }
                    });
                    onLoad();
                }, function (error) {
                    var option = {
                        id: "dialogInfo",
                        title: "SCE Transfer Failure",
                        lableClose: "CLOSE",
                        content: error.message,
                        width: 300
                    };
                    utils.dialog.showDialog(option);
                });
                // Returning false will prevent the closing of the dialog
                return true;
            },
            primary: true
        }
    ];

    $scope.applicantSearchTextForApplicant = "";
    // Bind new applicant to transfer
    $scope.newApplicantForApplicantOptions = {
        autoBind: false,
        optionLabel: "Select New Applicant",
        filter: "contains",
        filtering: function (e) {
            $scope.applicantSearchTextForApplicant = e.filter == null ? "" : e.filter.value;
        },
        dataSource: {
            serverFiltering: true,
            transport: {
                read: function (options) {
                    sceServices.getApplicantsForTransferInSameAreas($scope.sceIdSelected, $scope.applicantSearchTextForApplicant).then(function (response) {
                        if (response.data != null) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                }
            }
        },
        dataTextField: "userName",
        dataValueField: "userProfileId",
        valueTemplate: function (dataItem) {
            if (!dataItem.hasOwnProperty('image')) {
                dataItem.image = $scope.applicantToTransfer === null || $scope.applicantToTransfer === undefined ? "" : $scope.applicantToTransfer.image;
            }
            return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
        },
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
    };


    $scope.applicantSearchText = "";

    // Bind new applicant to transfer
    $scope.newApplicantOptions = {
        autoBind: false,
        optionLabel: "Select new Applicant",
        filter: "contains",
        filtering: function (e) {
            $scope.applicantSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
        },
        dataSource: {
            serverFiltering: true,
            transport: {
                read: function (options) {
                    sceServices.getApplicantsForTransfer($scope.applicantSearchText).then(function (response) {
                        if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });
                }
            }
        },
        dataTextField: "userName",
        dataValueField: "userProfileId",
        valueTemplate: function (dataItem) {
            if (!dataItem.hasOwnProperty("image")) {
                dataItem.image = $scope.applicantToTransfer === null || $scope.applicantToTransfer === undefined ? "" : $scope.applicantToTransfer.image;
            }
            return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
        },
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
    };
    //#endregion

    //#region Transfer Role
    $scope.applicantToTransfer = null;
    $scope.backupApplicant = null;

    $scope.reviewerToTransfer = null;
    $scope.backupReviewer = null;

    $scope.endorserToTransfer = null;
    $scope.backupEndorser = null;

    $scope.approverToTransfer = null;
    $scope.backupApprover = null;

    $scope.reviewerForTransferSearchText = "";

    $scope.reviewerForTransferDataSource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                sceServices.getPreData('reviewers', null, $scope.reviewerForTransferSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.endorserSearchText = "";

    $scope.endorseDatasource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                sceServices.getPreData('endorsers', null, $scope.endorserSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.approverSearchText = "";

    $scope.approverDatasource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                sceServices.getPreData('approvers', null, $scope.approverSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined && response.data.length > 0) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    };

    $scope.transferSceId = "";

    $scope.pendingReview = false;

    $scope.pendingEndorse = false;

    $scope.pendingApprove = false;

    $scope.showTransferRolesKendoDiaglog = function (sceId) {
        $scope.transferSceId = sceId;
        $rootScope.isLoading = true;
        sceServices.getPendingPeopleForTransferingRoles(sceId).then(function (response) {
            $rootScope.isLoading = false;
            if (response.data !== null && response.data !== undefined) {
                var statusKey = response.data.statusKey;
                $scope.applicantToTransfer = response.data.applicant;
                $scope.backupApplicant = $scope.applicantToTransfer;
                switch (statusKey) {
                    case "2": {
                        $scope.pendingReview = true;
                        $scope.pendingEndorse = false;
                        $scope.pendingApprove = false;
                        $scope.reviewerToTransfer = response.data.pendingPerson;
                        $scope.backupReviewer = $scope.reviewerToTransfer;
                        $scope.endorserToTransfer = null;
                        $scope.approverToTransfer = null;

                        $scope.reviewerForTransferOptions = {
                            autoBind: false,
                            filter: "contains",
                            filtering: function (e) {
                                $scope.reviewerForTransferSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                            },
                            optionLabel: "Select Reviewer",
                            dataSource: $scope.reviewerForTransferDataSource,
                            dataTextField: "userName",
                            dataValueField: "userProfileId",
                            valueTemplate: function (dataItem) {
                                if (!dataItem.hasOwnProperty('image')) {
                                    dataItem.image = $scope.reviewerToTransfer.image;
                                }
                                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                            },
                            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                        };
                        break;
                    }
                    case "3": {
                        $scope.pendingReview = false;
                        $scope.pendingEndorse = true;
                        $scope.pendingApprove = false;
                        $scope.endorserToTransfer = response.data.pendingPerson;
                        $scope.backupEndorser = $scope.endorserToTransfer;
                        $scope.reviewerToTransfer = null;
                        $scope.approverToTransfer = null;

                        $scope.endorserOptions = {
                            autoBind: false,
                            filter: "contains",
                            filtering: function (e) {
                                $scope.endorserSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                            },
                            optionLabel: "Select Endorser",
                            dataSource: $scope.endorseDatasource,
                            dataTextField: "userName",
                            dataValueField: "userProfileId",
                            valueTemplate: function (dataItem) {
                                if (!dataItem.hasOwnProperty('image')) {
                                    dataItem.image = $scope.endorserToTransfer.image;
                                }
                                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                            },
                            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                        };

                        break;
                    }
                    case "4": {
                        $scope.pendingReview = false;
                        $scope.pendingEndorse = false;
                        $scope.pendingApprove = true;
                        $scope.approverToTransfer = response.data.pendingPerson;
                        $scope.backupApprover = $scope.approverToTransfer;
                        $scope.reviewerToTransfer = null;
                        $scope.endorserToTransfer = null;

                        $scope.approverOptions = {
                            autoBind: false,
                            optionLabel: "Select Approver",
                            filter: "contains",
                            filtering: function (e) {
                                $scope.approverSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                            },
                            dataSource: $scope.approverDatasource,
                            dataTextField: "userName",
                            dataValueField: "userProfileId",
                            valueTemplate: function (dataItem) {
                                if (!dataItem.hasOwnProperty('image')) {
                                    dataItem.image = $scope.approverToTransfer.image;
                                }
                                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                            },
                            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                        };

                        break;
                    }
                    default: {
                        $scope.pendingReview = false;
                        $scope.pendingEndorse = false;
                        $scope.pendingApprove = false;
                        $scope.reviewerToTransfer = null;
                        $scope.endorserToTransfer = null;
                        $scope.approverToTransfer = null;
                        break;
                    }
                }
                $scope.sceTransferRolesKendoDiaglog.center();
                $scope.sceTransferRolesKendoDiaglog.open();
            }
        }, function (err) {
            $rootScope.isLoading = false;
            utils.error.showErrorGet(err);
        });
    };
    $scope.adminComment = "";
    $scope.sceTransferRoles = [
        { text: 'CANCEL' },
        {
            text: 'CONFIRM',
            action: function () {
                if ($scope.validators.sceTransfer.validate()) {
                    $scope.transferRolesModel = {
                        applicantProfileId: $scope.applicantToTransfer.userProfileId !== $scope.backupApplicant.userProfileId && $scope.applicantToTransfer.userProfileId !== "" ? $scope.applicantToTransfer.userProfileId : null,
                        reviewerProfileId: $scope.pendingReview && $scope.reviewerToTransfer.userProfileId !== $scope.backupReviewer.userProfileId && $scope.reviewerToTransfer.userProfileId !== "" ? $scope.reviewerToTransfer.userProfileId : null,
                        endorserProfileId: $scope.pendingEndorse && $scope.endorserToTransfer.userProfileId !== $scope.backupEndorser.userProfileId && $scope.endorserToTransfer.userProfileId !== "" ? $scope.endorserToTransfer.userProfileId : null,
                        approverProfileId: $scope.pendingApprove && $scope.approverToTransfer.userProfileId !== $scope.backupApprover.userProfileId && $scope.approverToTransfer.userProfileId !== "" ? $scope.approverToTransfer.userProfileId : null,
                        comment: $scope.adminComment
                    };

                    if (($scope.transferRolesModel.applicantProfileId === null || $scope.transferRolesModel.applicantProfileId === undefined) && ($scope.transferRolesModel.reviewerProfileId === null || $scope.transferRolesModel.reviewerProfileId === undefined) && ($scope.transferRolesModel.endorserProfileId === null || $scope.transferRolesModel.endorserProfileId === undefined) && ($scope.transferRolesModel.approverProfileId === null || $scope.transferRolesModel.approverProfileId === undefined)) {
                        isProcessTriggerClick = true;
                        return true;
                    }
                    $rootScope.isLoading = true;
                    sceServices.transferRoles($scope.transferSceId, $scope.transferRolesModel).then(function (response) {
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.applicantProfileId !== null && $scope.transferRolesModel.applicantProfileId !== undefined) {
                            $scope.applicantIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.reviewerProfileId !== null && $scope.transferRolesModel.reviewerProfileId !== undefined) {
                            $scope.reviewerIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.endorserProfileId !== null && $scope.transferRolesModel.endorserProfileId !== undefined) {
                            $scope.endorserIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.approverProfileId !== null && $scope.transferRolesModel.approverProfileId !== undefined) {
                            $scope.approverIsTransfered = true;
                        }
                        $rootScope.isLoading = false;
                        $scope.transferResultDialog.center();
                        $scope.transferResultDialog.open();

                        var grid = $(".sce-listing").data("kendoGrid");
                        grid.dataSource.read();

                        onLoad();
                    }, function (err) {
                        $rootScope.isLoading = false;
                        var option = {
                            id: "dialogInfo",
                            title: "SCE Roles transferred failed.",
                            lableClose: "CLOSE",
                            content: err.message,
                            width: 300
                        };
                        utils.dialog.showDialog(option);
                    });
                    //todo
                    return true;
                }
                return false;
            },
            primary: true
        }
    ];

    $scope.transferResultActions = [{
        text: 'CLOSE',
        action: function () {
            $state.go(constants.state.scelist);
        }
    }];
    //#endregion

    $scope.confirmDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content
        }).data("kendoConfirm").open().result;
    };
    
    $scope.exportFile = function () {
        var token = $window.localStorage.getItem(constants.localStorage.userSecret);
        $window.open(
            constants.SCE.exportFile + "?Token=" + token,
            '_blank'
        );
    };
}]);
app.controller('scePrintController', ['$rootScope', '$stateParams', '$scope', 'constants', 'sceServices', function ($rootScope, $stateParams, $scope, constants, sceServices) {

    $scope.sceDetail = null;
    $scope.normalizedPTW = null;
    $scope.reAcknowledgeHistoriesLeft = null;
    $scope.reAcknowledgeHistoriesRight = null;
    $scope.reApproveHistoriesLeft = null;
    $scope.reApproveHistoriesRight = null;

    var loadData = function () {
        $rootScope.isLoading = true;
        sceServices.getScePrintingDetail($stateParams.sceId).then(function (response) {
            if (response.data != null) {
                $scope.sceDetail = response.data;

                for (i = 0; i < response.data.scePtw.length; i++) {
                    if (response.data.scePtw[i].isNormalized) {
                        $scope.normalizedPTW = response.data.scePtw[i];
                    }
                }

                if (response.data.reAcknowledgementHistory != null) {
                    var halfLength = Math.ceil(response.data.reAcknowledgementHistory.length / 2);
                    $scope.reAcknowledgeHistoriesLeft = response.data.reAcknowledgementHistory.splice(0, halfLength);
                    $scope.reAcknowledgeHistoriesRight = response.data.reAcknowledgementHistory.splice(0, halfLength);
                }

                if (response.data.reApprovalHistory != null) {
                    var halfLength = Math.ceil(response.data.reApprovalHistory.length / 2);
                    $scope.reApproveHistoriesLeft = response.data.reApprovalHistory.splice(0, halfLength);
                    $scope.reApproveHistoriesRight = response.data.reApprovalHistory.splice(0, halfLength);
                }
            }
            $rootScope.isLoading = false;
        }, function (error) {
            utils.error.showErrorGet(error);
            $rootScope.isLoading = false;
        });
    };
    loadData();

}]);
app.controller('accessDeniedController', ['$rootScope', '$state', '$window', '$scope', '$location', function ($rootScope, $state, $window, $scope, $location) {

}]);
app.controller('loginController', ['$rootScope', '$window', '$scope', '$location', '$state', 'authService', 'appSettings', 'constants', function ($rootScope, $window, $scope, $location, $state, authService, appSettings, constants) {

    $rootScope.$app.title = constants.titlePage.login;
    $scope.loginData = {
        userId: "",
        password: "",
        domain: ""
    };
    $scope.domain = "";
    $scope.domains = {
        optionLabel: 'Domain*',
        optionLabelTemplate: function (optionLabel) { return '<span class="optionlabel">' + optionLabel + '</span>'; },
        dataTextField: 'name',
        dataValueField: 'name',
        dataSource: {
            transport: {
                read: {
                    dataType: "json",
                    url: constants.singleSignOn.domains
                }
            }
        }
    };
    $scope.message = "";
    $scope.loggingIn = false;
    $scope.login = function () {
        $scope.loginData.domain = $scope.domain;
        $scope.loggingIn = true;
        authService.login($scope.loginData).then(function (response) {
            var userProfile = response.userProfile;
            $rootScope.$app.userProfile.userProfileId = userProfile.userProfileId;
            $rootScope.$app.userProfile.userName = userProfile.userName;
            $rootScope.$app.userProfile.userId = userProfile.userId;
            $rootScope.$app.userProfile.areaId = userProfile.areaId;
            $rootScope.$app.userProfile.areaName = userProfile.areaName;
            $rootScope.$app.userProfile.staffNo = userProfile.staffNo;
            $rootScope.$app.userProfile.dept = userProfile.dept;
            $rootScope.$app.userProfile.contactNo = userProfile.contactNo;
            $rootScope.$app.userProfile.position = userProfile.position;
            $rootScope.$app.userProfile.mobileNo = userProfile.mobileNo;
            $rootScope.$app.userProfile.image = userProfile.image;
            $rootScope.$app.userProfile.isAdmin = userProfile.isAdmin;
            $rootScope.$app.userProfile.moduleAccess = userProfile.moduleAccess;
            $rootScope.$app.userProfile.rolesKeyString = userProfile.rolesKeyString;
            $window.localStorage.setItem(constants.localStorage.userProfile, JSON.stringify(userProfile));
            $window.localStorage.setItem(constants.localStorage.userSecret, response.secret);
            $window.localStorage.setItem(constants.localStorage.logined, true);
            if ($location.search().returnUrl !== null && $location.search().returnUrl !== undefined && $location.search().returnUrl.trim() !== ''
                && ($location.path() + '').toLowerCase() !== "/login" && ($location.path() + '').toLowerCase() !== "/download/app") {
                $window.location.href = $location.search().returnUrl;
            }
            else {
                $state.go(constants.state.landing);
            }
        },
         function (error) {
             $scope.message = error.message;
             $window.localStorage.removeItem(constants.localStorage.userId);
             $window.localStorage.removeItem(constants.localStorage.userSecret);
             $window.localStorage.setItem(constants.localStorage.logined, false);
             $scope.loggingIn = false;
         });
    };

}]);
app.controller('userController', ['$rootScope', '$window', '$scope', '$location', '$state', '$stateParams', 'constants', 'userService', 'roleService', 'areaService', function ($rootScope, $window, $scope, $location, $state, $stateParams, constants, userService, roleService, areaService) {

    var isProcessTriggerClick = true;

    $scope.listArea = [];
    $scope.listRolesView = [];
    $scope.listRolesIncludeModule = [];
    $scope.model = {
        userId: "",
        userName: "",
        staffNo: "",
        email: "",
        image: "",
        dept: "",
        area: "",
        division: "",
        position: "",
        contactNo: "",
        mobileNo: "",
        areas: [],
        roles: []
    };
    $scope.userSearchText = "";
    $scope.userSelect = {};
    $scope.userSearch = {
        filter: "startswith",
        filtering: function (e) {
            $scope.userSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
        },
        autoBind: true,
        optionLabel: "Search User",
        dataTextField: 'userName',
        dataValueField: 'userId',
        valueTemplate: '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>',
        template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>',
        dataSource: {
            serverFiltering: true,
            transport: {
                read: function (options) {

                    userService.adFindUser($scope.userSearchText).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        }
                        else {
                            options.success([]);
                        }
                    }, function (error) {
                        options.error([]);
                        utils.error.showErrorGet(error);
                    });

                }
            }
        }
    };
    $scope.areaOption = {
        dataTextField: 'description',
        dataValueField: 'lookupAreaId',
        optionLabel: "Select Area",
        dataSource: {
            transport: {
                read: function (options) {
                    var arrayLookupArea = [];
                    _.each($scope.listArea, function (area) {
                        arrayLookupArea.push({ lookupAreaId: area.lookupAreaId, description: area.description });
                    });
                    options.success(arrayLookupArea);
                }
            }
        }
    };

    // Function
    $scope.onUserIdChange = function () {
        $scope.model.dept = $scope.userSelect.dept;
        $scope.model.division = $scope.userSelect.division;
        $scope.model.officeTelephone = $scope.userSelect.officeTelephone;
        $scope.model.tel = $scope.userSelect.tel;
        $scope.model.mobileNo = $scope.userSelect.mobileNo;
        $scope.model.userName = $scope.userSelect.userName;
        $scope.model.userId = $scope.userSelect.userId;
        $scope.model.staffNo = $scope.userSelect.staffNo;
        $scope.model.email = $scope.userSelect.email;
        $scope.model.image = $scope.userSelect.image;
    };

    $scope.onAreaChange = function () {
        _.each($scope.listArea, function (area) {
            if (area.lookupAreaId === $scope.model.area) {
                area.checked = true;
                area.disabled = true;
            }
            else {
                area.disabled = false;
            }
        });
    };

    // Binding data to form
    var onLoad = function (routeName) {

        $rootScope.isLoading = true;
        var isAreaLoadDone = false;
        var isRoleLoadDone = false;

        switch (routeName) {
            case constants.state.newUser:
                $rootScope.$app.title = constants.titlePage.newUser;
                areaService.getAllAreaIsActive().then(function (response) {
                    $scope.listArea = response.data;
                    _.each($scope.listArea, function (area) {
                        area.checked = false;
                    });
                    isAreaLoadDone = true;
                    var dropDown = $("#area").data("kendoDropDownList");
                    dropDown.dataSource.read();
                    if (isRoleLoadDone)
                        $rootScope.isLoading = false;
                }, function (err) {
                    $scope.listArea = [];
                    isAreaLoadDone = true;
                    if (isRoleLoadDone)
                        $rootScope.isLoading = false;
                });

                roleService.getRolesIncludeModule().then(function (response) {
                    var groupByModuleName = _.chain(response.data).groupBy('moduleName').map(function (value, key) {
                        _.each(value, function (role) {
                            role.checked = false;
                        });

                        var sorted = _.chain(value).sortBy('description').value();

                        return {
                            moduleName: key,
                            roles: sorted
                        };
                    }).value();

                    $scope.listRolesIncludeModule = groupByModuleName;
                    isRoleLoadDone = true;
                    if (isAreaLoadDone)
                        $rootScope.isLoading = false;
                }, function (err) {
                    $scope.listRolesIncludeModule = [];
                    isRoleLoadDone = true;
                    if (isAreaLoadDone)
                        $rootScope.isLoading = false;
                });

                break;
            case constants.state.editUser:
                $rootScope.$app.title = constants.titlePage.editUser;

                userService.getDetail($stateParams.id).then(function (response) {
                    $scope.model.userId = response.data.userId;
                    $scope.model.userName = response.data.userName;
                    $scope.model.staffNo = response.data.staffNo;
                    $scope.model.email = response.data.email;
                    $scope.model.image = response.data.image;
                    $scope.model.dept = response.data.dept;
                    $scope.model.area = response.data.area;
                    $scope.model.division = response.data.division;
                    $scope.model.contactNo = response.data.contactNo;
                    $scope.model.mobileNo = response.data.mobileNo;
                    $scope.model.position = response.data.position;
                    var areas = response.data.areas;
                    var roles = response.data.roles;
                    areaService.getAllAreaIsActive().then(function (response) {
                        $scope.listArea = response.data;
                        _.each($scope.listArea, function (area) {
                            var lookupArea = _.filter(areas, function (item) { return item.lookupAreaId === area.lookupAreaId; });
                            area.checked = lookupArea.length > 0;
                        });
                        isAreaLoadDone = true;
                        var dropDown = $("#area").data("kendoDropDownList");
                        dropDown.dataSource.read();
                        dropDown.value($scope.model.area);
                        dropDown.trigger("change");
                        if (isRoleLoadDone)
                            $rootScope.isLoading = false;
                    }, function (err) {
                        $scope.listArea = [];
                        isAreaLoadDone = true;
                        if (isRoleLoadDone)
                            $rootScope.isLoading = false;
                    });

                    roleService.getRolesIncludeModule().then(function (response) {
                        var groupByModuleName = _.chain(response.data).groupBy('moduleName').map(function (value, key) {
                            _.each(value, function (role) {
                                var roleChecked = _.filter(roles, function (item) { return item.roleId === role.roleId; });
                                role.checked = roleChecked.length > 0;
                                if (role.checked) {
                                    $scope.listRolesView.push({ moduleName: key, description: role.description });
                                }
                            });
                            var sorted = _.chain(value).sortBy('description').value();
                            return {
                                moduleName: key,
                                roles: sorted
                            };
                        }).value();

                        if ($scope.listRolesView !== null && $scope.listRolesView !== undefined) {
                            var sorted = _.chain($scope.listRolesView).sortBy('moduleName').sortBy('description').value();
                            $scope.listRolesView = sorted;
                        }

                        $scope.listRolesIncludeModule = groupByModuleName;
                        isRoleLoadDone = true;
                        if (isAreaLoadDone)
                            $rootScope.isLoading = false;
                    }, function (err) {
                        $scope.listRolesIncludeModule = [];
                        isRoleLoadDone = true;
                        if (isAreaLoadDone)
                            $rootScope.isLoading = false;
                    });
                },
                function (err) {
                    $rootScope.isLoading = false;
                });
                break;
            case constants.state.notification:
                $rootScope.$app.title = constants.titlePage.notification;
                $rootScope.isLoading = false;
                break;
        }
    };
    onLoad($state.current.name);

    // Action
    $scope.saveData = function (e) {
        if (!isProcessTriggerClick) {
            return false;
        }
        isProcessTriggerClick = false;

        e.preventDefault();
        e.stopPropagation();

        var isValid = $scope.userFormValid.validate();

        var areaIds = [];
        _.each($scope.listArea, function (area) {
            if (area.checked === true) {
                areaIds.push(area.lookupAreaId);
            }
        });
        $scope.model.areas = areaIds;

        var roleIds = [];
        _.each($scope.listRolesIncludeModule, function (item) {
            _.each(item.roles, function (role) {
                if (role.checked === true) {
                    roleIds.push(role.roleId);
                }
            });

        });
        $scope.model.roles = roleIds;

        if ($scope.model.areas === null || $scope.model.areas === undefined || $scope.model.areas.length === 0) {
            isValid = false;
        }

        if ($scope.model.roles === null || $scope.model.roles === undefined || $scope.model.roles.length === 0) {
            isValid = false;
        }

        if (!isValid) {
            isProcessTriggerClick = true;
            return false;
        }

        $rootScope.isLoading = true;
        isProcessTriggerClick = true;

        userService.create($scope.model).then(function () {
            $rootScope.isLoading = false;
            var option = {
                id: "dialogInfo",
                title: "New User",
                lableClose: "CLOSE",
                content: "New user added successfully.",
                width: 300
            };
            utils.dialog.showDialog(option, function () {
                $state.go(constants.state.manageUser);
            });
        }, function (err) {
            $rootScope.isLoading = false;
            var option = {
                id: "dialogError",
                title: "New User",
                lableClose: "CLOSE",
                content: err.message,
                width: 300
            };
            utils.dialog.showDialog(option);
        });
    };

    $scope.updateData = function (e) {
        if (!isProcessTriggerClick) {
            return false;
        }
        isProcessTriggerClick = false;

        e.preventDefault();
        e.stopPropagation();

        var isValid = $scope.userFormValid.validate();

        var modelEdit = {
            mobileNo: $scope.model.mobileNo,
            position: $scope.model.position,
            area: $scope.model.area
        };
        var areaIds = [];
        _.each($scope.listArea, function (area) {
            if (area.checked === true) {
                areaIds.push(area.lookupAreaId);
            }
        });
        modelEdit.areas = areaIds;

        var roleIds = [];
        _.each($scope.listRolesIncludeModule, function (item) {
            _.each(item.roles, function (role) {
                if (role.checked === true) {
                    roleIds.push(role.roleId);
                }
            });

        });
        modelEdit.roles = roleIds;

        if (modelEdit.areas === null || modelEdit.areas === undefined || modelEdit.areas.length === 0) {
            isValid = false;
        }

        if (modelEdit.roles === null || modelEdit.roles === undefined || modelEdit.roles.length === 0) {
            isValid = false;
        }

        if (!isValid) {
            isProcessTriggerClick = true;
            return false;
        }

        $rootScope.isLoading = true;
        userService.edit($stateParams.id, modelEdit).then(function () {
            $rootScope.isLoading = false;
            var option = {
                id: "dialogInfo",
                title: "Update User",
                lableClose: "CLOSE",
                content: "user updated successful.",
                width: 300
            };
            utils.dialog.showDialog(option, function () {
                $state.go(constants.state.manageUser);
            });
        }, function (err) {
            $rootScope.isLoading = false;
            var option = {
                id: "dialogError",
                title: "New User",
                lableClose: "CLOSE",
                content: err.message,
                width: 300
            };
            utils.dialog.showDialog(option);
        });
    };

    $scope.discard = function (e) {
        e.preventDefault();
        $state.go(constants.state.manageUser);
    };
}]);
app.controller('userListController', ['$rootScope', '$window', '$scope', '$location', '$state', '$timeout', 'constants', 'userService', 'roleService', function ($rootScope, $window, $scope, $location, $state, $timeout, constants, userService, roleService) {

    $rootScope.$app.title = constants.titlePage.manageUser;
    $scope.userProfile = $rootScope.$app.userProfile;

    $scope.listChecked = [];

    $scope.model = {
        rolId: "",
        userId: "",
        filter: [],
        sort: [],
        skip: 0,
        take: 0,
        isExport: false
    };

    $scope.status = [{
        value: "Active"
    },
    {
        value: "Deactivated"
    }];

    $scope.role = "";

    $scope.roles = {
        dataTextField: "description",
        dataValueField: "roleId",
        dataSource: {
            transport: {
                read: function (options) {
                    roleService.getAllRoleIncludeNumberUser().then(function (response) {
                        options.success(response.data);
                        if (response.data !== null && response.data !== undefined && response.data !== undefined && response.data.length > 0) {
                            $scope.role = response.data[0].roleId;
                        }
                    }, function (err) {
                        options.error([]);
                        utils.showErrorGet(err);
                    });
                }
            }
        }
    };

    $scope.listModule = [];
    $scope.listAction = [{ 'actionName': 'Add', 'actionValue': 0 }, { 'actionName': 'Remove', 'actionValue': 1 }];

    $scope.listManageRole = [];

    $scope.userProfileIdSelected = "";

    $scope.selectModule = {};
    $scope.selectAction = 0;

    $scope.moduleOption = {
        dataTextField: 'moduleName',
        dataValueField: 'moduleName',
        dataSource: {
            transport: {
                read: function (options) {
                    options.success($scope.listModule);
                }
            }
        }
    };
    $scope.actionOption = {
        dataTextField: 'actionName',
        dataValueField: 'actionValue',
        dataSource: {
            transport: {
                read: function (options) {
                    options.success($scope.listAction);
                }
            }
        }
    }

    $scope.onRolesChange = function (e) {
        $scope.searchByUserIdClick();
    };

    $scope.searchByUserId = function (keyEvent) {
        if (keyEvent.which === 13)
            $scope.searchByUserIdClick();
    };

    $scope.searchByUserIdClick = function () {
        var grid = $(".user-list").data("kendoGrid");
        // clear filter
        grid.dataSource.sort({});
        grid.dataSource.filter({});
        grid.setDataSource($scope.allDataSource);
    };

    $scope.index = 0;

    $scope.initData = function (options) {

        kendo.ui.progress($('.user-list'), false);
        // reset input data
        $scope.model.roleId = $scope.role;
        $scope.model.status = "";
        $scope.model.filter = [];
        $scope.model.sort = [];
        $scope.model.skip = 0;
        $scope.model.take = 20;
        $scope.model.isExport = "";

        var optionfilters = [];
        var filters = [];
        if (options.data.filter !== null && options.data.filter !== undefined) {

            _.each(options.data.filter.filters, function (o) {
                var listFilterOut = [];
                utils.getfilter(o, listFilterOut);
                Array.prototype.push.apply(optionfilters, listFilterOut);
            });

            if (optionfilters !== null && optionfilters !== undefined) {

                var statusFilter = {};

                _.each(optionfilters, function (m) {

                    if (m.field === "status") {
                        statusFilter.field = m.field;
                        statusFilter.valueString = statusFilter.valueString + "," + m.value;
                        statusFilter.isActive = true;
                    }
                    else {
                        var filter = {
                            field: m.field,
                            valueString: m.value,
                            isActive: true
                        };

                        filters.push(filter);
                    }
                });
            }

            if (statusFilter.field !== null && statusFilter.field !== undefined) {
                filters.push(statusFilter);
            }
            $scope.model.filter = filters;
        }
        if (options.data.sort !== null && options.data.sort !== undefined) {
            _.each(options.data.sort, function (o) {
                $scope.model.sort.push({
                    field: o.field,
                    asc: o.dir === 'asc',
                    isActive: true
                });
            });
        }
        $scope.model.take = options.data.take;
        $scope.model.skip = (options.data.page - 1) * options.data.pageSize;
    };

    $scope.allDataSource = new kendo.data.DataSource({
        transport: {
            read: function (options) {
                $scope.index = 0;
                $scope.initData(options);
                $rootScope.isLoading = true;
                $scope.model.view = "All";
                userService.getListUser($scope.model).then(function (response) {
                    $scope.listChecked = [];
                    if (response.data !== null && response.data !== undefined) {
                        _.each(response.data, function (item) {
                            $scope.listChecked.push({ userProfileId: item.userProfileId, checked: false });
                        });
                        options.success(response.data);
                    }
                    else {
                        $scope.listChecked = [];
                        options.success([]);
                    }
                    $rootScope.isLoading = false;
                }, function (error) {
                    $rootScope.isLoading = false;
                    options.error([]);
                    utils.showErrorGet(error);
                });
            }
        },
        schema: {
            model: {
                fields: {
                    area: { type: "string" },
                    userId: { type: "string" },
                    name: { type: "string" },
                    jobDesignation: { type: "string" },
                    mobileNo: { type: "string" },
                    status: { type: "string" }
                }
            },
            total: function (response) {
                return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
            }
        },
        pageSize: 20,
        serverPaging: true,
        serverFiltering: true,
        serverSorting: true
    });

    $scope.userListGridOptions = {
        dataSource: $scope.allDataSource,
        scrollable: false,
        filterable: {
            extra: false,
            operators: {
                string: {
                    operator: "contains"
                }
            }
        },
        filterMenuInit: function (e) {
            utils.filterMenuInit(e);
        },
        sortable: {
            mode: "multiple",
            allowUnsort: true
        },
        pageable: {
            pageSizes: true,
            buttonCount: 5
        },
        columns: [{
            field: "checkbox",
            title: "&nbsp;",
            width: "50px",
            attributes: {
                "class": "cell_checkbox"
            },
            filterable: false,
            template: function (dataItem) {
                return "<label class='cb-lbl-grid'><input type='checkbox' class='checkbox' data-ng-model='listChecked[" + $scope.index + "].checked' data-user-profile-id='" + dataItem.userProfileId + "' /><span>&nbsp;</span></label>";
            }
        }, {
            field: "userId",
            title: "User ID",
            width: "180px",
            attributes: {
                "class": "cell_user_id"
            },
            filterable: false,
            template: function (dataItem) {
                return dataItem.userId;
            }
        }, {
            field: "name",
            title: "Name",
            attributes: {
                "class": "cell_name"
            },
            filterable: true
        }, {
            field: "area",
            title: "Area",
            attributes: {
                "class": "cell_area"
            },
            filterable: true
        }, {
            field: "jobDesignation",
            title: "Job Designation",
            width: "260px",
            attributes: {
                "class": "cell_job_designation"
            },
            filterable: true
        }, {
            field: "mobileNo",
            title: "Mobile No.",
            width: "240px",
            attributes: {
                "class": "cell_mobile_no"
            },
            filterable: true
        }, {
            field: "status",
            title: "Status",
            width: "330px",
            attributes: {
                "class": "cell_live"
            },
            filterable: {
                multi: true,
                extra: true,
                dataSource: $scope.status,
                itemTemplate: function (e) {
                    if (e.field === "all") {
                        return "<li class=\"select_all\"><label><input type='checkbox' /> <span>#= all#</span></label></li>";
                    } else {
                        return "<li><label><input type='checkbox' name='" + e.field + "' value='#=data.value#'/> <span>#= data.value #</span></label></li>";
                    }
                }
            },
            template: function (dataItem) {
                $scope.index = $scope.index + 1;
                var outPut = dataItem.status;
                return "<button class=\"btn-grid-item-menu\" type=\"button\" data-ng-click=\"openItemMenu($event)\"><i class=\"icon-dot-3 icon-btn-grid-item-menu\"></i></button>" +
                        outPut +
                        "<ul class=\"grid-item-menu\" data-user-profile-id='" + dataItem.userProfileId + "' style=\"display: none; background-color: #fff; border: 1px solid #ccc;\" >" +
                            "<li><a href=\"javascript:void(0)\" data-ng-click=\"editUser('" + dataItem.userProfileId + "')\">Edit User</a></li>" +
                            "<li><a href=\"javascript:void(0)\" data-ng-click=\"manageRole('" + dataItem.userProfileId + "')\">Manage Role</a></li>" + (dataItem.userProfileId === $scope.userProfile.userProfileId ? "" :
                          dataItem.status === "Active" ? "<li><a href=\"javascript:void(0)\" data-ng-click=\"deactivateUser('" + dataItem.userProfileId + "')\">Deactivate User</a></li>" :
                            "<li><a href=\"javascript:void(0)\" data-ng-click=\"activeUser('" + dataItem.userProfileId + "')\">Active User</a></li>"
                          ) +
                        "</ul>";
            }
        }],
        noRecords: true,
        messages: {
            noRecords: "There is no data on current page"
        },
        toolbar: [{
            template: "<div class='toolbar-button'>" +
                            "<span class='btn add-new-user' data-ng-click='addNew($event)'><i class='icon-plus'></i> Add New User</span>" +
                            "<div class='dd_block'><span class='btn bulk-edit' data-ng-click='bulkEdit($event)'><i class='icon-pencil'></i> Bulk Edit...</span>" +
                            "<ul class='ul-bulk-edit dropdown_menu' style='display: none;'>" +
                                "<li data-ng-click='manageRoles($event)'><a href=\"javascript:void(0)\" >Manage Roles...</a></li>" +
                                "<li data-ng-click='deactivateUsers($event)'><a href=\"javascript:void(0)\" >Deactivate Users</a></li>" +
                            "</ul></div>" +
                      "</div>" +
                      "<div class='toolbar-tab'>" +
                         "<div class=\"k-state-active btn view-all\">All User</div>" +
                          "<div class='role' id='Roles' ><strong>Roles: </strong><select kendo-drop-down-list k-on-change='onRolesChange(kendoEvent)' k-options='roles' k-ng-model='role' k-value-primitive='true'></select></div>" +
                      "</div>"
        }]
    };

    $scope.openItemMenu = function (e) {
        e.preventDefault();
        var itemMenu = $(e.target).closest("td").find(".grid-item-menu");
        _.each($('.grid-item-menu'), function (item) {
            if ($(item).attr("data-user-profile-id") !== $(itemMenu).attr("data-user-profile-id")) {
                $(item).hide();
            }
            else {
                $(itemMenu).slideToggle();
            }
        });
    };

    $scope.addNew = function (e) {
        e.preventDefault();
        $state.go(constants.state.newUser);
    };

    $scope.editUser = function (userProfileId) {
        $state.go(constants.state.editUser, { id: userProfileId });
    };

    $scope.deactivateUser = function (userProfileId) {
        var option = {
            id: "dialogInfo",
            title: "Deactivate User",
            lableClose: "CANCEL",
            lableOk: "DEACTIVATE",
            content: "Deactivate user will no longer be able to access the module but their SCE and RA assignments will remain until changed. Proceed?",
            width: 400
        };
        utils.dialog.showConfirm(option, function () {
            userService.deactivateUser(userProfileId).then(function () {
                var grid = $(".user-list").data("kendoGrid");
                var tr = $(".user-list tr input[data-user-profile-id='" + userProfileId + "']").closest("tr");
                var dataItem = grid.dataItem(tr);
                if (dataItem !== null && dataItem !== undefined) {
                    dataItem.set("status", "Deactivate");
                }
                var option = {
                    id: "dialogInfo",
                    title: "Deactivate User",
                    lableClose: "CLOSE",
                    content: "Deactivate User Successful.",
                    width: 300
                };
                utils.dialog.showDialog(option);

            }, function (err) {
                var option = {
                    id: "dialogError",
                    title: "Deactivate User",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 300
                };
                utils.dialog.showDialog(option);
            });
        });
    };

    $scope.activeUser = function (userProfileId) {
        var option = {
            id: "dialogInfo",
            title: "Active User",
            lableClose: "CANCEL",
            lableOk: "Active",
            content: "Active user will no longer be able to access the module but their SCE and RA assignments will remain until changed. Proceed?",
            width: 400
        };
        utils.dialog.showConfirm(option, function (wnd) {
            userService.activeUser(userProfileId).then(function () {
                var grid = $(".user-list").data("kendoGrid");
                var tr = $(".user-list tr input[data-user-profile-id='" + userProfileId + "']").closest("tr");
                var dataItem = grid.dataItem(tr);
                if (dataItem !== null && dataItem !== undefined) {
                    dataItem.set("status", "Active");
                }
                var option = {
                    id: "dialogError",
                    title: "Active User",
                    lableClose: "CLOSE",
                    content: " Active User Successful.",
                    width: 300
                };
                utils.dialog.showDialog(option);
            }, function (err) {
                var option = {
                    id: "dialogError",
                    title: "Active User",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 300
                };
                utils.dialog.showDialog(option);
            });
        });
    };

    $scope.bulkEdit = function (e) {
        e.preventDefault();
        $('.ul-bulk-edit').slideToggle();
    };

    $scope.manageRolesActions = [{
        text: 'CANCEL',
        action: function () {
            $scope.searchByUserIdClick();
        }
    },
    {
        text: "UPDATE",
        action: function () {
            return $scope.manageRolesPopupUpdate();
        },
        primary: true
    }];

    $scope.manageRoles = function (e) {
        e.preventDefault();
        $('.ul-bulk-edit').hide();
        var checked = _.filter($scope.listChecked, function (item) { return item.checked === true; });
        if (checked.length === 0) {
            var option = {
                id: "dialogError",
                title: "Manage Roles",
                lableClose: "CLOSE",
                content: "You have not selected any record.",
                width: 300
            };
            utils.dialog.showDialog(option);
        } else {
            utils.clearValid();
            $rootScope.isLoading = true;
            roleService.getRolesIncludeModule().then(function (response) {
                var groupByModuleName = _.chain(response.data).groupBy('moduleName').map(function (value, key) {
                    _.each(value, function (role) {
                        role.checked = false;
                    });

                    var sorted = _.chain(value).sortBy('description').value();

                    return {
                        moduleName: key,
                        roles: sorted
                    };
                }).value();
                $rootScope.isLoading = false;
                $scope.listModule = groupByModuleName;

                var dropDown = $("#module").data("kendoDropDownList");
                dropDown.dataSource.read();
                $scope.selectModule = groupByModuleName[0];

                $($scope.manageRolesPopup.element).parent().find(".k-dialog-title").text("Bulk Edit: Assign Roles to " + checked.length + " Users");
                $scope.manageRolesPopup.center();
                $scope.manageRolesPopup.open();

            }, function (err) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogError",
                    title: "Assign Roles To User",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 300
                };
                utils.error.showErrorGet(err);
                utils.dialog.showDialog(option);
            });
        }
    };

    $scope.manageRolesPopupUpdate = function () {

        var listUserProfileId = [];
        var listRoleId = [];
        var action = $scope.roleManagementActions.value();

        _.each($scope.listChecked, function (item) {
            if (item.checked === true) {
                listUserProfileId.push(item.userProfileId);
            }
        });

        _.each($scope.selectModule.roles, function (item) {
            if (item.checked === true) {
                listRoleId.push(item.roleId);
            }
        });

        var model = {
            listUserProfileId: listUserProfileId,
            listRoleId: listRoleId,
            action: action
        };

        var isValid = $scope.manageRolesPopupValid.validate();

        if (listRoleId === null || listRoleId === undefined || listRoleId.length === 0 && !isValid) {
            return false;
        }
        else {

            $rootScope.isLoading = true;
            userService.manageRoles(model).then(function (response) {
                $rootScope.isLoading = false;
                $scope.manageRolesPopup.close();
                var option = {
                    id: "dialogInfo",
                    title: "Assign Roles",
                    lableClose: "CLOSE",
                    content: "Assign Roles Successful.",
                    width: 300
                };
                utils.dialog.showDialog(option);
                $scope.searchByUserIdClick();
                return true;

            }, function (err) {
                $rootScope.isLoading = false;
                $scope.manageRolesPopup.close();
                var option = {
                    id: "dialogError",
                    title: "Assign Roles",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 300
                };
                utils.error.showErrorGet(err);
                utils.dialog.showDialog(option);
                return true;
            });
        }
    };

    $scope.manageRoleActions = [
        {
            text: 'CANCEL',
            action: function () {
                return true;
            }
        },
        {
            text: "UPDATE",
            action: function () {
                return $scope.manageRolePopupUpdate();
            },
            primary: true
        }];

    $scope.manageRolePopupUpdate = function () {
        var listRoles = [];
        _.each($scope.listManageRole, function (module) {
            _.each(module.roles, function (role) {
                if (role.checked) {
                    listRoles.push(role.roleId);
                }
            });
        });

        if (listRoles === null || listRoles === undefined || listRoles.length === 0) {
            return false;
        }

        $rootScope.isLoading = true;
        userService.manageRole($scope.userProfileIdSelected, listRoles).then(function () {
            $rootScope.isLoading = false;
            $scope.manageRolePopup.close();
            var option = {
                id: "dialogInfo",
                title: "Assign Roles to User",
                lableClose: "CLOSE",
                content: "Assign Roles to User Successful.",
                width: 300
            };
            utils.dialog.showDialog(option);
            return true;
        }, function (err) {
            $rootScope.isLoading = false;
            $scope.manageRolePopup.close();
            var option = {
                id: "dialogError",
                title: "Assign Roles To User",
                lableClose: "CLOSE",
                content: err.message,
                width: 300
            };
            utils.error.showErrorGet(err);
            utils.dialog.showDialog(option);
            return true;
        });
    };

    $scope.manageRole = function (userProfileId) {

        utils.clearValid();
        $scope.userProfileIdSelected = userProfileId;

        $rootScope.isLoading = true;
        userService.getRoleEdit(userProfileId).then(function (response) {
            $rootScope.isLoading = false;
            var groupByModuleName = _.chain(response.data).groupBy('moduleName').map(function (value, key) {

                var sorted = _.chain(value).sortBy('description').value();

                return {
                    moduleName: key,
                    roles: sorted
                };
            }).value();

            $scope.listManageRole = groupByModuleName;

            $scope.manageRolePopup.center();
            $scope.manageRolePopup.open();
            utils.fixDialogCenter($scope.manageRolePopup.element);

        }, function (err) {
            $rootScope.isLoading = false;
            var option = {
                id: "dialogError",
                title: "Assign Roles To User",
                lableClose: "CLOSE",
                content: err.message,
                width: 300
            };
            utils.error.showErrorGet(err);
            utils.dialog.showDialog(option);
        });
    };

    $scope.deactivateUsers = function (e) {
        e.preventDefault();
        $('.ul-bulk-edit').hide();
        var checked = _.filter($scope.listChecked, function (item) { return item.checked === true; });
        var option = {};
        if (checked.length === 0) {
            option = {
                id: "dialogError",
                title: "Deactivate Users",
                lableClose: "CLOSE",
                content: "You have not selected any record.",
                width: 300
            };
            utils.dialog.showDialog(option);
        }
        else {
            option = {
                id: "dialogInfo",
                title: "Bulk Edit: Deactivate " + checked.length + " Users",
                lableOk: "DEACTIVATE ALL",
                lableClose: "CANCEL",
                content: "Deactivate users will no longer be able to access the module. Their SCE and RA assignments will remain until changed. Proceed?",
                width: 400
            };
            utils.dialog.showConfirm(option, function () {
                $rootScope.isLoading = true;
                var listUserId = [];
                _.each($scope.listChecked, function (item) {
                    if (item.checked === true) {
                        listUserId.push(item.userProfileId);
                    }
                });

                userService.deactivateListUser(listUserId).then(function () {
                    $rootScope.isLoading = false;
                    var option = {
                        id: "dialogInfo",
                        title: "Deactivate Users",
                        lableClose: "CLOSE",
                        content: "Deactivate Users Successful.",
                        width: 300
                    };
                    utils.dialog.showDialog(option);
                    $scope.searchByUserIdClick();
                }, function (err) {
                    $rootScope.isLoading = false;
                    var option = {
                        id: "dialogError",
                        title: "Bulk Edit: Deactivate " + checked.length + " Users",
                        lableClose: "CLOSE",
                        content: err.message,
                        width: 300
                    };
                    utils.dialog.showDialog(option);
                });

            }, function () {
                $scope.searchByUserIdClick();
            });
        }
    };

}]);
app.controller('userProfileController', ['$rootScope', '$window', '$scope', '$location', '$state', '$stateParams', 'constants', 'userService', 'roleService', 'areaService', function ($rootScope, $window, $scope, $location, $state, $stateParams, constants, userService, roleService, areaService) {

    var isProcessTriggerClick = true;

    $scope.model = {
        userId: "",
        userName: "",
        staffNo: "",
        email: "",
        image: "",
        dept: "",
        areaId: null,
        areaName: "",
        division: "",
        position: "",
        contactNo: "",
        mobileNo: "",
        areas: [],
        roles: [],
        enableEmailNotification: false
    };
    $scope.errorMessage = "";
    $scope.listArea = [];
    $scope.listRolesView = [];
    $scope.areaOption = {
        dataTextField: 'description',
        dataValueField: 'lookupAreaId',
        optionLabel: "Select Area",
        dataSource: {
            transport: {
                read: function (options) {
                    var arrayLookupArea = [];
                    _.each($scope.listArea, function (area) {
                        arrayLookupArea.push({ lookupAreaId: area.lookupAreaId, description: area.description });
                    });
                    options.success(arrayLookupArea);
                }
            }
        }
    };
    $scope.onAreaChange = function () {
        _.each($scope.listArea, function (area) {
            if (area.lookupAreaId === $scope.model.areaId) {
                area.checked = true;
                area.disabled = true;
            }
            else {
                area.disabled = false;
            }
        });
    };

    // Binding data to form
    var onLoad = function (routeName) {
        $rootScope.bigModuleTitle = "HOME";
        switch (routeName) {
            case constants.state.myProfile:
                $rootScope.$app.title = constants.titlePage.myProfile;
                $rootScope.isLoading = true;
                var isAreaLoadDone = false;
                var isRoleLoadDone = false;

                userService.getMyProfile().then(function (response) {
                    $scope.model.userId = response.data.userId;
                    $scope.model.userName = response.data.userName;
                    $scope.model.staffNo = response.data.staffNo;
                    $scope.model.email = response.data.email;
                    $scope.model.image = response.data.image;
                    $scope.model.dept = response.data.dept;
                    $scope.model.areaId = response.data.areaId;
                    $scope.model.areaName = response.data.areaName;
                    $scope.model.division = response.data.division;
                    $scope.model.contactNo = response.data.contactNo;
                    $scope.model.mobileNo = response.data.mobileNo;
                    $scope.model.position = response.data.position;
                    $scope.model.enableEmailNotification = response.data.enableEmailNotification;
                    var areas = response.data.areas;
                    var roles = response.data.roles;
                    areaService.getAllAreaIsActive().then(function (response) {
                        $scope.listArea = response.data;
                        _.each($scope.listArea, function (area) {
                            var lookupArea = _.filter(areas, function (item) { return item.lookupAreaId === area.lookupAreaId; });
                            area.checked = lookupArea.length > 0;
                            if (area.lookupAreaId === $scope.model.areaId) {
                                area.disabled = true;
                            }
                        });
                        isAreaLoadDone = true;
                        var dropDown = $("#area").data("kendoDropDownList");
                        dropDown.dataSource.read();
                        dropDown.value($scope.model.areaId);
                        dropDown.trigger("change");
                        if (isRoleLoadDone)
                            $rootScope.isLoading = false;
                    }, function (err) {
                        $scope.listArea = [];
                        isAreaLoadDone = true;
                        if (isRoleLoadDone)
                            $rootScope.isLoading = false;
                    });

                    roleService.getRolesIncludeModule().then(function (response) {
                        var groupByModuleName = _.chain(response.data).groupBy('moduleName').map(function (value, key) {
                            _.each(value, function (role) {
                                var roleChecked = _.filter(roles, function (item) { return item.roleId === role.roleId; });
                                role.checked = roleChecked.length > 0;
                                if (role.checked) {
                                    $scope.listRolesView.push({ moduleName: key, description: role.description });
                                }
                            });
                            return {
                                moduleName: key,
                                roles: value
                            };
                        }).value();

                        if ($scope.listRolesView !== null && $scope.listRolesView !== undefined) {
                            var sorted = _.chain($scope.listRolesView).sortBy('moduleName').sortBy('description').value();
                            $scope.listRolesView = sorted;
                        }

                        isRoleLoadDone = true;
                        if (isAreaLoadDone)
                            $rootScope.isLoading = false;
                    }, function (err) {
                        isRoleLoadDone = true;
                        if (isAreaLoadDone)
                            $rootScope.isLoading = false;
                    });
                },
                function (err) {
                    $rootScope.isLoading = false;
                });
                break;
            case constants.state.profile:
                $rootScope.$app.title = constants.titlePage.profile;
                $rootScope.isLoading = true;
                var id = $stateParams.id;
                userService.getProfile(id).then(function (response) {
                    $scope.model.userId = response.data.userId;
                    $scope.model.userName = response.data.userName;
                    $scope.model.staffNo = response.data.staffNo;
                    $scope.model.email = response.data.email;
                    $scope.model.image = response.data.image;
                    $scope.model.dept = response.data.dept;
                    $scope.model.areaId = response.data.areaId;
                    $scope.model.areaName = response.data.areaName;
                    $scope.model.division = response.data.division;
                    $scope.model.contactNo = response.data.contactNo;
                    $scope.model.mobileNo = response.data.mobileNo;
                    $scope.model.position = response.data.position;
                    $scope.listArea = response.data.areas;
                    $rootScope.isLoading = false;
                },
                function (err) {
                    $scope.errorMessage = err.message;
                    $rootScope.isLoading = false;
                });
                break;
        }
    };
    onLoad($state.current.name);

    $scope.updateData = function (e) {
        if (!isProcessTriggerClick) {
            return false;
        }
        isProcessTriggerClick = false;

        e.stopPropagation();
        e.preventDefault();

        var isValid = $scope.userProfileValid.validate();

        if (!isValid) {
            return false;
        }

        var modelEdit = {
            mobileNo: $scope.model.mobileNo,
            areaDefaultId: $scope.model.areaId,
            enableEmailNotification: $scope.model.enableEmailNotification
        };
        var areaIds = [];
        _.each($scope.listArea, function (area) {
            if (area.checked === true) {
                areaIds.push(area.lookupAreaId);
            }
        });
        modelEdit.areas = areaIds;

        $rootScope.isLoading = true;
        isProcessTriggerClick = true;

        userService.updateMyProfile(modelEdit).then(function () {
            $rootScope.isLoading = false;
            var option = {
                id: "dialogInfo",
                title: "Update User Profile",
                lableClose: "CLOSE",
                content: "Update User Profile Successful.",
                width: 300
            };
            utils.dialog.showDialog(option, function () {
                $state.go(constants.state.landing);
            });
        }, function (err) {
            $rootScope.isLoading = false;
            var option = {
                id: "dialogError",
                title: "Update User",
                lableClose: "CLOSE",
                content: err.message,
                width: 300
            };
            utils.dialog.showDialog(option);
        });
    };

    $scope.discard = function (e) {
        e.preventDefault();
        $state.go(constants.state.landing);
    };
}]);
app.controller('downloadAppController', ['$rootScope', '$scope', '$location', 'constants', function ($rootScope, $scope, $location, constants) {

    $rootScope.$app.module = "login";
    $rootScope.$app.title = constants.titlePage.downloadApp;

    $scope.linkAndroid = constants.linkApp.android;
    $scope.linkIos = constants.linkApp.ios;
}]);
app.controller('HeaderController', ['$rootScope', '$state', '$window', '$scope', 'authService', 'constants', function ($rootScope, $state, $window, $scope, authService, constants) {
    $scope.userProfile = $rootScope.$app.userProfile;
    $scope.isShow = true;
    if ($scope.userProfile.image == null) {
        $scope.isShow = false;
    }

    angular.element(document).ready(function () {
        $('#ProfileMenu').kendoMenu({ closeOnClick: true });
    });

    $scope.myAccount = function () {
        $rootScope.bigModuleTitle = "HOME";
        $('#ProfileMenu').find(".k-animation-container").hide();
        $state.go(constants.state.myProfile);
    };

    $scope.logout = function () {
        $scope.loggingIn = false;
        $window.localStorage.removeItem(constants.localStorage.userProfile);
        $window.localStorage.removeItem(constants.localStorage.userSecret);
        $window.localStorage.removeItem(constants.localStorage.logined);
        $window.localStorage.removeItem(constants.localStorage.timeOld);
        var accessTokenSingleSignOn = $window.localStorage.getItem(constants.localStorage.accessToken);
        authService.logoutSingleSignOn(accessTokenSingleSignOn).then(function (response) {
            $window.localStorage.removeItem(constants.localStorage.accessToken);
            $window.location.href = "/login";
        }, function (err) {
            $window.localStorage.removeItem(constants.localStorage.accessToken);
            $window.location.href = "/login";
        });
    };

}]);
app.controller('statusLogController', ['$rootScope', '$window', '$state', '$stateParams', '$scope', '$location', 'constants', 'sceServices', 'raServices', 'asmServices',
    function ($rootScope, $window, $state, $stateParams, $scope, $location, constants, sceServices, raServices, asmServices) {
        // Set page title
        $rootScope.$app.title = constants.titlePage.statusLog;
        // Item number model
        $scope.itemNumber = "";
        $scope.goToDetail = "";

        // Initializing grid
        $scope.statusLog = {
            dataSource: {
                transport: {
                    read: function (options) {
                        if ($state.current.name === constants.state.sceStatusLog) {
                            sceServices.getSceLog({
                                itemId: $stateParams.sceId,
                                skip: (options.data.page - 1) * options.data.pageSize,
                                take: options.data.take
                            }).then(function (response) {
                                $scope.itemNumber = 'Status log SCE ';
                                if (response.data !== null && response.data !== undefined) {
                                    options.success(response.data);
                                    if (response.data.length > 0) {
                                        $scope.itemNumber = 'Status log SCE ' + response.data[0].itemNumber;
                                        $scope.goToDetail = "goToSce()";
                                    }
                                } else {
                                    options.success([]);
                                }
                                $rootScope.isLoading = false;
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                                $rootScope.isLoading = false;
                            });
                        };
                        if ($state.current.name === constants.state.raStatusLog) {
                            raServices.getRaLog({
                                itemId: $stateParams.raId,
                                skip: (options.data.page - 1) * options.data.pageSize,
                                take: options.data.take
                            }).then(function (response) {
                                $scope.itemNumber = 'Status log RA ';
                                if (response.data !== null && response.data !== undefined) {
                                    options.success(response.data);
                                    if (response.data.length > 0) {
                                        $scope.itemNumber = 'Status log RA ' + response.data[0].itemNumber;
                                        $scope.goToDetail = "goToRa()";
                                    }
                                } else {
                                    options.success([]);
                                }
                                $rootScope.isLoading = false;
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                                $rootScope.isLoading = false;
                            });
                        };

                        if ($state.current.name === constants.state.asmStatusLog) {
                            asmServices.getAsmLog({
                                itemId: $stateParams.alarmId,
                                skip: (options.data.page - 1) * options.data.pageSize,
                                take: options.data.take
                            }).then(function (response) {
                                $scope.itemNumber = 'Status log ASM ';
                                if (response.data !== null && response.data !== undefined) {
                                    options.success(response.data);
                                    if (response.data.length > 0) {
                                        $scope.itemNumber = 'Status log ASM ' + response.data[0].itemNumber;
                                        $scope.goToDetail = "#";
                                    }
                                } else {
                                    options.success([]);
                                }
                                $rootScope.isLoading = false;
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                                $rootScope.isLoading = false;
                            });
                        };


                    }
                },
                schema: {
                    model: {
                        fields: {
                            itemId: { type: "string" },
                            itemNumber: { type: "string" },
                            userName: { type: "string" },
                            assignedUserName: { type: "string" },
                            message: { type: "string" },
                            createdDate: { type: "date" }
                        }
                    },
                    total: function (response) {
                        return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
                    }
                },
                pageSize: 20,
                serverPaging: true,
                serverFiltering: false,
                serverSorting: false
            },
            scrollable: false,
            sortable: false,
            pageable: {
                pageSizes: true,
                buttonCount: 5
            },
            columns: [{
                field: "message",
                title: "Status Log",
                width: "65%",
                headerAttributes: {
                    style: "line-height: 200%; text-align: left; font-size:13px; font-weight:bold; background-color: white; border: none; color: #898989;"
                },
                template: function (dataItem) {
                    var result = '';
                    if (dataItem.message == '' || dataItem.message == null) {
                        console.log("message have no content");
                    }
                    if (dataItem.assignedUserName == null && dataItem.comment == null)
                        result = kendo.format(dataItem.message, "<a href data-ng-click='" + $scope.goToDetail + "'><strong>" + dataItem.userName + "</strong></a>");
                    if (dataItem.assignedUserName == null && dataItem.comment != null)
                        result = kendo.format(dataItem.message, "<a href data-ng-click='" + $scope.goToDetail + "'><strong>" + dataItem.userName + "</strong></a>", dataItem.comment);
                    if (dataItem.assignedUserName != null)
                        result = kendo.format(dataItem.message, "<a href data-ng-click='" + $scope.goToDetail + "'><strong>" + dataItem.userName + "</strong></a>", "<a href data-ng-click='" + $scope.goToDetail + "'><strong>" + dataItem.assignedUserName + "</strong></a>");
                    return result;
                }
            }, {
                field: "createdDate",
                title: "Date & Time",
                width: "35%",
                headerAttributes: {
                    style: "line-height: 200%; text-align: left; font-size:13px; font-weight:bold; background-color: white; border: none; color: #898989;"
                },
                template: function (dataItem) {
                    return kendo.toString(new Date(dataItem.createdDate), "dd MMM yyyy at h:mm tt");
                }
            }],
            noRecords: true,
            messages: {
                noRecords: "There is no data on current page"
            }
        };

        // Go to RA detail page
        $scope.goToRa = function () {
            $state.go(constants.state.raDetail, { sceId: $stateParams.sceId, raId: $stateParams.raId });
        }
        // Go to SCE detail page
        $scope.goToSce = function () {
            $state.go(constants.state.sceDetail, { sceId: $stateParams.sceId });
        }
        // Go to ASM detail page
        //$scope.goToAsm = function () {
        //    $state.go(constants.state.asmDetail, { alarmId: $stateParams.alarmId });
        //}
    }
]);
app.controller('sidebarController', ['$rootScope', '$scope', '$state', '$location', '$timeout', 'accessModule', 'constants', function ($rootScope, $scope, $state, $location, $timeout, accessModule, constants) {
    var currentUser = $rootScope.$app.userProfile;
    
    $scope.isAdmin = currentUser.isAdmin || currentUser.isAsmAdmin;
    $scope.asmApplicant = checkUserHasRoleKey(currentUser.rolesKeyString, constants.role.roleKeys.asmApplicant);
    
    function activMenu(menu) {
        if (menu === 'homeId') {
            $("#homeId").addClass('active');
        } else {
            $("#cssmenu ul li ul li[id='" + menu + "']").addClass('active');
            $("#cssmenu ul li ul li[id='" + menu + "']").parent().parent().addClass('active');
        }

    }

    function onload() {
        var stateName = $state.current.name;
        switch (stateName) {
            case constants.state.sceDashBoard:
                activMenu("sceDashBoardId");
                $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                break;
            case constants.state.scenew:
                activMenu("sceNewId");
                $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                break;
            case constants.state.scelist:
                activMenu("sceAllId");
                $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                break;
            case constants.state.raList:
                activMenu("raAllId");
                $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                break;
            case constants.state.manageUser:
                activMenu("manageUserId");
                $rootScope.bigModuleTitle = "ADMIN";
                break;
            case constants.state.manageMessage:
                activMenu("manageUserId");
                $rootScope.bigModuleTitle = "ADMIN";
                break;
            case constants.state.asmList:
                activMenu("asmAllId");
                $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
                break;
            case constants.state.asmNewState:
                    activMenu("asmNewdId");
                    $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";                               
                break;
            case constants.state.asmDashBoard:
                activMenu("asmDashBoardId");
                $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
                break;
            case constants.state.diList:
                activMenu("diAllId");
                $rootScope.bigModuleTitle = "Daily Instruction (DI)";
                break;
            case constants.state.diNew:
                activMenu("diNewId");
                $rootScope.bigModuleTitle = "Daily Instruction (DI)";
                break;
            case constants.state.diDashBoard:
                activMenu("diDashBoardId");
                $rootScope.bigModuleTitle = "Daily Instruction (DI)";
                break;
            case constants.state.default:
                activMenu("homeId");
                break;
        }
    };

    function removeMenu(menu) {
        $("#cssmenu ul li ul li[data-module='" + menu + "']").removeClass("active");
        $("#cssmenu ul li a[data-module='" + menu + "']").removeClass("active");
    };
    $(window).ready(function () {
        onload();
    });
    $scope.goPage = function (menu) {

        switch (menu) {
            case constants.menu.sceDashBoard:
                $state.go(constants.state.sceDashBoard);
                $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                break;
            case constants.menu.sceNew:
                $state.go(constants.state.scenew);
                $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                break;
            case constants.menu.sceList:
                $state.go(constants.state.scelist);
                $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                break;
            case constants.menu.manageUser:
                $state.go(constants.state.manageUser);
                $rootScope.bigModuleTitle = "ADMIN";
                break;
            case constants.menu.manageMessage:
                $state.go(constants.state.adminMessage);
                $rootScope.bigModuleTitle = "ADMIN";
                break;
            case constants.menu.raList:
                $state.go(constants.state.raList);
                $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
                break;
            case constants.menu.asmList:
                $state.go(constants.state.asmlist);
                $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
                break;
            case constants.menu.asmNew:
                    $state.go(constants.state.asmNewState);
                    $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
                break;
            case constants.menu.asmDashBoard:
                $state.go(constants.state.asmDashBoard);
                $rootScope.bigModuleTitle = "Alarm Shelving Application (ASM)";
                break;
            case constants.menu.diList:
                $state.go(constants.state.diList);
                $rootScope.bigModuleTitle = "Daily Instruction (DI)";
                break;
            case constants.menu.diNew:
                $state.go(constants.state.diNew);
                $rootScope.bigModuleTitle = "Daily Instruction (DI)";
                break;
            case constants.menu.diDashBoard:
                $state.go(constants.state.diDashBoard);
                $rootScope.bigModuleTitle = "Daily Instruction (DI)";
                break;
            case constants.menu.rotfDashboard:
                $state.go(constants.state.rotfDashboardOverview);
                $rootScope.bigModuleTitle = "Refinery Of The Future (ROTF)";
                break;
        }

        $("#homeId").removeClass("active");
        $("#cssmenu ul li ul li").removeClass("active");
        $("#cssmenu ul li").removeClass("active");
        $("#cssmenu ul li ul > li[data-module='" + menu + "']").addClass("active");
        $("#cssmenu ul li ul  li[data-module='" + menu + "']").parent().parent().addClass("active");
        $('#MainPanel').scrollTop(0);
    };
}]);
app.controller('diDucController',
    ['$rootScope', '$q', '$state', '$stateParams', '$scope', '$location', '$timeout', '$compile', 'constants', 'serviceHelper', 'diNewService',
        function ($rootScope, $q, $state, $stateParams, $scope, $location, $timeout, $compile, constants, serviceHelper, diNewService) {

            var tableIds = ['#hse', '#hazardous', '#operationRegister', '#productionPlanMode', '#ongoing'];

            // Define table
            var hse = $(tableIds[0]);
            var hazardous = $(tableIds[1]);
            var operationRegister = $(tableIds[2]);
            var productionPlan = $(tableIds[3]);
            var ongoing = $(tableIds[4]);

            var i = 0;

            // table data
            var hseData = [];
            var hazardousData = [];
            var operationRegisterData = [];
            var productionPlanData = [];
            var ongoingData = [];

            function getIndexById(data, id) {
                var idx,
                    l = data.length;

                for (var j = 0; j < l; j++) {
                    if (data[j].ProductID == id) {
                        return j;
                    }
                }
                return null;
            }
            //move addNew button to bottom
            function moveHeader(tableIds) {
                angular.forEach(tableIds, function (value, key) {
                    var tbl = $(value);
                    var toolBar = tbl.find('div.k-header.k-grid-toolbar').first();
                    var parentToolBar = toolBar.parent();
                    var childToolBar = toolBar.find('a').first();
                    var header = tbl.find('div.k-grid-header').first();
                    toolBar.insertAfter(parentToolBar.find('div').last());

                    //Set Css
                    parentToolBar.css('border-style', 'none');
                    toolBar.css({
                        "background": "#FFFFFF",
                        "padding-top": "1%"
                    });
                    childToolBar.addClass("btn btn-info");
                    childToolBar.css({
                        "float": "right",
                        "background": "#00A19C"
                    });

                    header.css({
                        "padding-right": "0"
                    });
                });
            }
            $q.all([
                diNewService.getDiHse()
            ]).then(function (results) {

                //HSE Response
                var hseResponse = results[0];
                if (hseResponse.data !== null && hseResponse.data !== undefined) {

                    angular.forEach(hseResponse.data, function (value, key) {
                        var obj = {
                            Proid: i,
                            no: value.no,
                            satefyHighlights: value.satefyHightlights,
                            actionStatus: { statusName: 'Open', statusID: '1' },
                            actionParties: { partyName: 'DucTT6', partyID: '1' },
                            estimateTc: new Date(),
                            createdDate: new Date(),
                            remarks: value.remarks
                        };
                        hseData.push(obj);
                        i++;
                    });

                } else {
                    utils.error.showErrorGet(error);
                }

                //HAZARDOUS Response
                var hazardousResponse = results[0];
                if (hazardousResponse.data !== null && hazardousResponse.data !== undefined) {

                    angular.forEach(hazardousResponse.data, function (value, key) {
                        var obj = {
                            Proid: i,
                            no: value.no,
                            task: value.satefyHightlights,
                            status: { statusName: 'Open', statusID: '1' },
                            createdDate: new Date(),
                            remarks: value.remarks
                        };
                        hazardousData.push(obj);
                        i++;
                    });

                } else {
                    utils.error.showErrorGet(error);
                }
                //OPERATION REGISTER Response
                var operationRegisterResponse = results[0];
                if (operationRegisterResponse.data !== null && operationRegisterResponse.data !== undefined) {

                    angular.forEach(operationRegisterResponse.data, function (value, key) {
                        var obj = {
                            Proid: i,
                            no: value.no,
                            task: value.satefyHightlights,
                            status: { statusName: 'Open', statusID: '1' },
                            createdDate: new Date(),
                            remarks: value.remarks
                        };
                        operationRegisterData.push(obj);
                        i++;
                    });

                } else {
                    utils.error.showErrorGet(error);
                }

                //ONGOING Response
                var ongoingResponse = results[0];
                if (ongoingResponse.data !== null && ongoingResponse.data !== undefined) {

                    angular.forEach(ongoingResponse.data, function (value, key) {
                        var obj = {
                            Proid: i,
                            no: value.no,
                            task: value.satefyHightlights,
                            status: { statusName: 'Open', statusID: '1' },
                            createdDate: new Date(),
                            remarks: value.remarks
                        };
                        ongoingData.push(obj);
                        i++;
                    });

                } else {
                    utils.error.showErrorGet(error);
                }

                //PRODUCTION PLAN Response
                var productionPlanResponse = results[0];
                if (ongoingResponse.data !== null && ongoingResponse.data !== undefined) {

                    angular.forEach(productionPlanResponse.data, function (value, key) {
                        var obj = {
                            Proid: i,
                            no: value.no,
                            remarks: value.remarks
                        };
                        productionPlanData.push(obj);
                        i++;
                    });

                } else {
                    utils.error.showErrorGet(error);
                }

                //kendo HSE
                var hseDataSource = new kendo.data.DataSource({
                    autoSync: true,
                    data: hseData,
                    batch: false,
                    schema: {
                        model: {
                            id: "Proid",
                            fields: {
                                Proid: { editable: false, nullable: true },
                                no: { type: "string", editable: false },
                                satefyHighlights: { validation: { required: true } },
                                actionStatus: { defaultValue: { statusName: 'Open', statusID: '1' } },
                                actionParties: { defaultValue: { partyName: 'DucTT6', partyID: '1' }, validation: { required: true } },
                                estimateTc: { type: "date" },
                                createdDate: { type: "date", validation: { min: 0, required: true } },
                                remarks: { type: "string", validation: { required: true } }
                            }
                        }
                    },
                    transport: {
                        read: function (e) {
                            e.success(hseData);
                            //
                            e.error("XHR hseResponse", "status code", "error message");
                        },
                        create: function (e) {
                            // assign an ID to the new item
                            e.data.Proid = i++;
                            // save data item to the original datasource
                            hseData.push(e.data);
                            // on success
                            e.success(e.data);

                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        },
                        update: function (e) {
                            // locate item in original datasource and update it
                            hseData[getIndexById(hseData, e.data.Proid)] = e.data;
                            // on success
                            e.success();
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        }
                    }
                });
                hse.kendoGrid({
                    columns: [
                        {
                            field: "no",
                            title: "No.",
                            width: '6%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell"
                                style: "background: rgb(97,94,153); color: rgb(255,255,255);"
                            }
                        },
                        {
                            field: "satefyHighlights",
                            title: "Satefy Highlights",
                            width: '20%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "text-align: left; font-size: 14px; font-weight: bold; border-width: 0 0 1px 0;"
                            }
                        },
                        {
                            field: "actionStatus",
                            title: "Action Status",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            },
                            template: '#=actionStatus.statusName #',
                            editor: function (container, options) {
                                $('<input required name="' + options.field + '"/>')
                                    .appendTo(container)
                                    .kendoDropDownList({
                                        autoBind: false,
                                        dataTextField: "statusName",
                                        dataValueField: "statusID",
                                        dataSource: [{ statusName: 'Open', statusID: '1' }, { statusName: 'Pending', statusID: '2' }]
                                    });
                            }
                        },
                        {
                            field: "actionParties",
                            title: "Action Parties",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "text-align: left; font-size: 14px; border-width: 0 0 1px 0;"
                            },
                            template: '#=actionParties.partyName #',
                            editor: function (container, options) {
                                $('<input required name="' + options.field + '"/>')
                                    .appendTo(container)
                                    .kendoDropDownList({
                                        autoBind: false,
                                        dataTextField: "partyName",
                                        dataValueField: "partyID",
                                        dataSource: [{ partyName: 'DucTT6', partyID: '1' }, { partyName: 'TuocVN', partyID: '2' }]
                                    });
                            }
                        },
                        {
                            field: "estimateTc",
                            title: "Estimate TC",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            },
                            format: "{0: yyyy-MM-dd}"

                        },
                        {
                            field: "createdDate",
                            title: "Created Date",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            },
                            format: "{0: yyyy-MM-dd}"
                        },
                        {
                            field: "remarks",
                            title: "Remarks",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        },
                        {
                            command: "edit",
                            headerAttributes: {
                                style: "width: 0px"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        }
                    ],
                    scrollable: true,
                    toolbar: [
                        {
                            name: "create",
                            text: "Add new"
                        }
                    ],
                    dataSource: hseDataSource,
                    editable: "inline"
                });

                //kendo HAZARDOUS
                var hazardousDataSource = new kendo.data.DataSource({
                    autoSync: true,
                    data: hazardousData,
                    batch: false,
                    schema: {
                        model: {
                            id: "Proid",
                            fields: {
                                Proid: { editable: false, nullable: true },
                                no: { type: "string", editable: false },
                                task: { validation: { required: true } },
                                status: { defaultValue: { statusName: 'Open', statusID: '1' } },
                                createdDate: { type: "date", validation: { min: 0, required: true } },
                                remarks: { type: "string", validation: { required: true } }
                            }
                        }
                    },
                    transport: {
                        read: function (e) {
                            e.success(hazardousData);
                            //
                            e.error("XHR hseResponse", "status code", "error message");
                        },
                        create: function (e) {
                            // assign an ID to the new item
                            e.data.Proid = i++;
                            // save data item to the original datasource
                            hazardousData.push(e.data);
                            // on success
                            e.success(e.data);
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        },
                        update: function (e) {
                            // locate item in original datasource and update it
                            hazardousData[getIndexById(hazardousData, e.data.Proid)] = e.data;
                            // on success
                            e.success();
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        }
                    }
                });
                hazardous.kendoGrid({
                    columns: [
                        {
                            field: "no",
                            title: "No.",
                            width: '6%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell"
                                style: "background: rgb(97,94,153); color: rgb(255,255,255);"
                            }
                        },
                        {
                            field: "task",
                            title: "Task",
                            width: '33%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "text-align: left; font-size: 14px; font-weight: bold; border-width: 0 0 1px 0;"
                            }

                        },
                        {
                            field: "status",
                            title: "Status",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            },
                            template: '#=status.statusName #',
                            editor: function (container, options) {
                                $('<input required name="' + options.field + '"/>')
                                    .appendTo(container)
                                    .kendoDropDownList({
                                        autoBind: false,
                                        dataTextField: "statusName",
                                        dataValueField: "statusID",
                                        dataSource: [{ statusName: 'Open', statusID: '1' }, { statusName: 'Pending', statusID: '2' }]
                                    });
                            }
                        },
                        {
                            field: "createdDate",
                            title: "Created Date",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "text-align: left; font-size: 14px; border-width: 0 0 1px 0;"
                            },
                            format: "{0: yyyy-MM-dd}"
                        },
                        {
                            field: "remarks",
                            title: "Remarks",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        },
                        {
                            command: "edit",
                            headerAttributes: {
                                style: "width: 0px"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        }
                    ],
                    scrollable: true,
                    toolbar: [
                        {
                            name: "create",
                            text: "Add new"
                        }
                    ],
                    editable: "inline",
                    dataSource: hazardousDataSource

                });

                //kendo OPERATION REGISTER
                var operationRegisterDataSource = new kendo.data.DataSource({
                    autoSync: true,
                    data: operationRegisterData,
                    batch: false,
                    schema: {
                        model: {
                            id: "Proid",
                            fields: {
                                Proid: { editable: false, nullable: true },
                                no: { type: "string", editable: false },
                                task: { validation: { required: true } },
                                status: { defaultValue: { statusName: 'Open', statusID: '1' } },
                                createdDate: { type: "date", validation: { min: 0, required: true } },
                                remarks: { type: "string", validation: { required: true } }
                            }
                        }
                    },
                    transport: {
                        read: function (e) {
                            e.success(operationRegisterData);
                            //
                            e.error("XHR hseResponse", "status code", "error message");
                        },
                        create: function (e) {
                            // assign an ID to the new item
                            e.data.Proid = i++;
                            // save data item to the original datasource
                            operationRegisterData.push(e.data);
                            // on success
                            e.success(e.data);
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        },
                        update: function (e) {
                            // locate item in original datasource and update it
                            operationRegisterData[getIndexById(operationRegisterData, e.data.Proid)] = e.data;
                            // on success
                            e.success();
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        }
                    }
                });
                operationRegister.kendoGrid({
                    columns: [
                        {
                            field: "no",
                            title: "No.",
                            width: '6%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell"
                                style: "background: rgb(97,94,153); color: rgb(255,255,255);"
                            }
                        },
                        {
                            field: "task",
                            title: "Task",
                            width: '33%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "text-align: left; font-size: 14px; font-weight: bold; border-width: 0 0 1px 0;"
                            }

                        },
                        {
                            field: "status",
                            title: "Status",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            },
                            template: '#=status.statusName #',
                            editor: function (container, options) {
                                $('<input required name="' + options.field + '"/>')
                                    .appendTo(container)
                                    .kendoDropDownList({
                                        autoBind: false,
                                        dataTextField: "statusName",
                                        dataValueField: "statusID",
                                        dataSource: [{ statusName: 'Open', statusID: '1' }, { statusName: 'Pending', statusID: '2' }]
                                    });
                            }
                        },
                        {
                            field: "createdDate",
                            title: "Created Date",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "text-align: left; font-size: 14px; border-width: 0 0 1px 0;"
                            },
                            format: "{0: yyyy-MM-dd}"
                        },
                        {
                            field: "remarks",
                            title: "Remarks",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        },
                        {
                            command: "edit",
                            headerAttributes: {
                                style: "width: 0px"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        }
                    ],
                    scrollable: true,
                    toolbar: [
                        {
                            name: "create",
                            text: "Add new"
                        }
                    ],
                    editable: "inline",
                    dataSource: operationRegisterDataSource

                });

                //kendo ONGOING
                var ongoingDataSource = new kendo.data.DataSource({
                    autoSync: true,
                    data: ongoingData,
                    batch: false,
                    schema: {
                        model: {
                            id: "Proid",
                            fields: {
                                Proid: { editable: false, nullable: true },
                                no: { type: "string", editable: false },
                                task: { validation: { required: true } },
                                status: { defaultValue: { statusName: 'Open', statusID: '1' } },
                                createdDate: { type: "date", validation: { min: 0, required: true } },
                                remarks: { type: "string", validation: { required: true } }
                            }
                        }
                    },
                    transport: {
                        read: function (e) {
                            e.success(ongoingData);
                            //
                            e.error("XHR hseResponse", "status code", "error message");
                        },
                        create: function (e) {
                            // assign an ID to the new item
                            e.data.Proid = i++;
                            // save data item to the original datasource
                            ongoingData.push(e.data);
                            // on success
                            e.success(e.data);
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        },
                        update: function (e) {
                            // locate item in original datasource and update it
                            ongoingData[getIndexById(ongoingData, e.data.Proid)] = e.data;
                            // on success
                            e.success();
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        }
                    }
                });
                ongoing.kendoGrid({
                    columns: [
                        {
                            field: "no",
                            title: "No.",
                            width: '6%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell"
                                style: "background: rgb(97,94,153); color: rgb(255,255,255);"
                            }
                        },
                        {
                            field: "task",
                            title: "Task",
                            width: '33%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "text-align: left; font-size: 14px; font-weight: bold; border-width: 0 0 1px 0;"
                            }

                        },
                        {
                            field: "status",
                            title: "Status",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            },
                            template: '#=status.statusName #',
                            editor: function (container, options) {
                                $('<input required name="' + options.field + '"/>')
                                    .appendTo(container)
                                    .kendoDropDownList({
                                        autoBind: false,
                                        dataTextField: "statusName",
                                        dataValueField: "statusID",
                                        dataSource: [{ statusName: 'Open', statusID: '1' }, { statusName: 'Pending', statusID: '2' }]
                                    });
                            }
                        },
                        {
                            field: "createdDate",
                            title: "Created Date",
                            width: '13%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "text-align: left; font-size: 14px; border-width: 0 0 1px 0;"
                            },
                            format: "{0: yyyy-MM-dd}"
                        },
                        {
                            field: "remarks",
                            title: "Remarks",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        },
                        {
                            command: "edit",
                            headerAttributes: {
                                style: "width: 0px"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        }
                    ],
                    scrollable: true,
                    toolbar: [
                        {
                            name: "create",
                            text: "Add new"
                        }
                    ],
                    editable: "inline",
                    dataSource: ongoingDataSource

                });

                //kendo ONGOING
                var productionPlanDataSource = new kendo.data.DataSource({
                    autoSync:true,
                    data: productionPlanData,
                    batch: false,
                    schema: {
                        model: {
                            id: "Proid",
                            fields: {
                                Proid: { editable: false, nullable: true },
                                no: { type: "string", editable: false },
                                remarks: { type: "string", validation: { required: true } }
                            }
                        }
                    },
                    transport: {
                        read: function (e) {
                            e.success(productionPlanData);
                            //
                            e.error("XHR hseResponse", "status code", "error message");
                        },
                        create: function (e) {
                            // assign an ID to the new item
                            e.data.Proid = i++;
                            // save data item to the original datasource
                            productionPlanData.push(e.data);
                            // on success
                            e.success(e.data);
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        },
                        update: function (e) {
                            // locate item in original datasource and update it
                            productionPlanData[getIndexById(productionPlanData, e.data.Proid)] = e.data;
                            // on success
                            e.success();
                            // on failure
                            //e.error("XHR hseResponse", "status code", "error message");
                        }
                    }
                });
                $scope.productionPlanModeGridOptions = {
                    columns: [
                        {
                            field: "no",
                            title: "No.",
                            width: '6%',
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell"
                                style: "background: rgb(97,94,153); color: rgb(255,255,255);"
                            }
                        },
                        {
                            field: "remarks",
                            title: "Remarks",
                            width: "84%",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        },
                        //{
                            
                        //    width: "84%",
                        //    headerAttributes: {
                        //        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                        //    },
                        //    attributes: {
                        //        //"class": "table-cell",
                        //        style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                        //    },
                        //    template: function (dataItem) {
                        //        console.log(dataItem);
                        //        return "<button class=\"btn-grid-item-menu\" type=\"button\" data-ng-click=\"openItemMenu($event)\"><i class=\"icon-dot-3 icon-btn-grid-item-menu\"></i></button>" +
                        //            "<ul data-id='" + dataItem.Proid + "' class=\"grid-item-menu\" style=\"display: none; background-color: #fff; border: 1px solid #ccc;\" >" +
                        //            "<li><a data-ng-click=\"Edit($event,dataItem)\">Edit</a></li>" +
                        //            "<li><a>Delete</a></li>" +
                        //            "<li><a>Clear All</a></li>" +
                        //            "</ul>";

                        //    }
                        //},
                        {
                            command: {
                                name: 'abc',
                                text: '',
                                imageClass: 'icon-dot-3 icon-btn-grid-item-menu',
                                click: function (e) {
                                    console.log('dfdf');
                                   
                                }
                            },
                            width: '10%',
                            headerAttributes: {
                                style: "border-left: none"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                            }
                        }
                    ],
                    toolbar: [
                        {
                            name: "create",
                            text: "Add new"
                        }
                    ],
                    editable: {
                        mode: "inline"
                    },
                    dataSource: productionPlanDataSource
                };

                moveHeader(tableIds);
                });   
            $scope.openItemMenu = function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var itemMenu = $(e.target).closest("td").find(".grid-item-menu");
                _.each($('.grid-item-menu'), function (item) {
                    if ($(item).attr("data-id") !== $(itemMenu).attr("data-id")) {
                        $(item).hide();
                    }
                    else {
                        $(itemMenu).slideToggle();
                    }
                });
            };

        }]);


app.controller('diListController',
    ['$rootScope', '$state', '$scope', '$location', '$timeout', 'asmServices', 'statusService', 'areaService', 'constants',
        function ($rootScope, $state, $scope, $location, $timeout, asmServices, statusService, areaService, constants) {
            
        }]);
app.controller('diNewController',
    ['$rootScope', '$window', '$state', '$stateParams', '$scope', '$location', 'authService', 'appSettings', 'constants', 'serviceHelper',
        function ($rootScope, $window, $state, $stateParams, $scope, $location, authService, appSettings, constants, serviceHelper) {
          
            $state.go(constants.state.diNew);
        }]);
app.controller('diTuocController',
    ['$rootScope', '$q', '$state', '$stateParams', '$scope', '$location', '$timeout', 'constants', 'serviceHelper', 'diNewService',
function ($rootScope, $q, $state, $stateParams, $scope, $location, $timeout, constants, serviceHelper, diNewService) {

    var copSolData = [];
    var unitStatusCopData = [];

    var i = 0;

    function getIndexById(data, id) {
        var idx,
            l = data.length;

        for (var j = 0; j < l; j++) {
            if (data[j].copId == id) {
                return j;
            }
        }
        return null;
    }


    $q.all([
        diNewService.getDiHse()
    ]).then(function (results) {
        var copSolResponse = results[0];
        if (copSolResponse.data !== null && copSolResponse.data !== undefined) {

            angular.forEach(copSolResponse.data, function (res, key) {
                var obj = {
                    copId: i,
                    unit: "Unit 11",
                    tag: res.tag,
                    description: res.description,
                    value: res.value,
                    uom: res.uom,
                    min: res.min,
                    max: res.max,
                    status: { statusName: 'Ongoing', statusID: '1' },
                    count: res.count,
                    createdDate: new Date(),
                    remarks: res.remarks
                };
                copSolData.push(obj);
                i++;
            });

        } else {
            utils.error.showErrorGet(error);
        }

        var dataSource = new kendo.data.DataSource({
            pageSize: 10,
            data: copSolData,
            autoSync: true,
            batch: false,
            height: 600,
            scrollable: true,
            editable: "inline",
            schema: {
                model: {
                    id: "copId",
                    fields: {
                        copId: { editable: false, nullable: true },
                        unit: { type: "string", defaultValue: { Unit: "Unit 1" } },
                        tag: { type: "string" },
                        description: { type: "string" },
                        value: { type: "string" },
                        uom: { type: "string" },
                        min: { type: "string" },
                        max: { type: "string" },
                        status: { defaultValue: { statusName: 'Ongoing', statusID: '1' } },
                        count: { type: "string" },
                        document: { editable: false },
                        createdDate: { type: "date" },
                        remarks: { type: "string" }
                    }
                }
            },
            transport: {
                read: function (e) {
                    e.success(copSolData);
                    //
                    e.error("XHR copSolResponse", "status code", "error message");
                },
                create: function (e) {
                    // assign an ID to the new item
                    e.data.copId = i++;
                    // save data item to the original datasource
                    copSolData.push(e.data);
                    // on success
                    e.success(e.data);

                    // on failure
                    //e.error("XHR copSolResponse", "status code", "error message");
                },
                update: function (e) {
                    // locate item in original datasource and update it
                    copSolData[getIndexById(copSolData, e.data.copId)] = e.data;
                    // on success
                    e.success();
                    // on failure
                    //e.error("XHR hseResponse", "status code", "error message");
                }
            }
        });

        $scope.copSolGridOptions = {
            dataBound: function (e) {
                $("input[type='file']").kendoUpload({
                    multiple: true,
                    async: {
                        saveUrl: "save",
                        removeUrl: "remove",
                        autoUpload: false
                    },
                    localization: {
                        select: 'Browse..',

                    },
                    dropZone: false,
                    //template: '<div style="background-    : url(../app/modules/di/pdf_icon.png)"></div>'
                });
            },
            toolbar: ["create"],
            pageable: true,
            dataSource: dataSource,
            editable: {
                editable: true,
                createAt: "bottom",
                mode: "inline"
            },
            columns: [
                {
                    field: "unit",
                    title: "Unit",
                    width: "6%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell"
                        style: "background: rgb(97,94,153); color: rgb(255,255,255); font-weight: bold;"
                    }
                },
                {
                    field: "tag",
                    title: "Tag",
                    width: "8%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "text-align: left; font-weight: bold; border-width: 0 0 1px 0;"
                    }
                },
                {
                    field: "description",
                    title: "Description",
                    width: "12%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    }
                },
                {
                    field: "value",
                    title: "Value",
                    width: "6%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "text-align: left; border-width: 0 0 1px 0;"
                    }
                },
                {
                    field: "uom",
                    title: "UOM",
                    width: "6%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    }
                },
                {
                    title: "Region 1",
                    headerAttributes: {
                        style: "text-align: center; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    columns: [
                        {
                            field: "min",
                            title: "Min",
                            width: "5%",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            }
                        }, {
                            field: "max",
                            title: "Max",
                            width: "5%",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            }
                        }
                    ]

                },
                {
                    field: "status",
                    title: "Status",
                    width: "9%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    },
                    template: '#=status.statusName #',
                    editor: function (container, options) {
                        $('<input required name="' + options.field + '"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataTextField: "statusName",
                                dataValueField: "statusID",
                                dataSource: [{ statusName: 'Ongoing', statusID: '1' }, { statusName: 'Plan', statusID: '2' }, { statusName: 'Completed', statusID: '3' }]
                            });
                    }
                },
                {
                    field: "count",
                    title: "Count",
                    width: "6%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                    }
                },
                {
                    field: "document",
                    title: "Document",
                    width: "8%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    },
                    template: function () {
                        return '<form method="post" action="#"><input name="upload" type="file" /></form>';
                    }
                },
                {
                    field: "createdDate",
                    title: "Created Date",
                    width: "10%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    },
                    template: function (dataItem) {
                        return "<button class=\"btn-grid-item-menu\" type=\"button\" data-ng-click=\"openItemMenu($event)\"><i class=\"icon-dot-3 icon-btn-grid-item-menu\"></i></button>" +
                            "<ul class=\"grid-item-menu\" style=\"display: none; background-color: #fff; border: 1px solid #ccc;\" >" +
                            "<li><a>View</a></li>" +
                            "<li><a>View</a></li>" +
                            "<li><a>View</a></li>" +
                            "</ul>";
                    },
                    format: "{0: yyyy-MM-dd}"

                },
                {
                    command: "edit"
                },
                {
                    field: "remarks",
                    title: "Remarks",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        //style: "border-width: 0 0 1px 0;"

                    },
                    template: function () {
                        return '<textarea type="text" class="form-control" id="copRemarks" style="max-width: 90%; height: 100%">zzzzzzzzzzz</textarea>';
                    }
                }
            ]
        };


        // Unit Status COP
        var unitStatusCopResponse = results[0];
        if (unitStatusCopResponse.data !== null && unitStatusCopResponse.data !== undefined) {

            angular.forEach(unitStatusCopResponse.data, function (value, key) {
                var obj = {
                    unitCopId: i,
                    unit: "Unit 11",
                    cop: value.satefyHightlights,
                    value: value.actionStatus,
                    min: value.actionStatus,
                    max: value.actionStatus,
                    remarks: value.remarks
                };
                unitStatusCopData.push(obj);
                i++;
            });

        } else {
            utils.error.showErrorGet(error);
        }
        var unitStatusCopDataSource = new kendo.data.DataSource({
            autoSync: true,
            data: unitStatusCopData,
            batch: false,
            schema: {
                model: {
                    id: "Proid",
                    fields: {
                        Proid: { editable: false, nullable: true },
                        unit: { type: "string" },
                        cop: { type: "string" },
                        value: { type: "string" },
                        min: { type: "string" },
                        max: { type: "string" },
                        remarks: { type: "string", validation: { required: true } }
                    }
                }
            },
            transport: {
                read: function (e) {
                    e.success(unitStatusCopData);
                    //
                    e.error("XHR hseResponse", "status code", "error message");
                },
                create: function (e) {
                    // assign an ID to the new item
                    e.data.Proid = i++;
                    // save data item to the original datasource
                    unitStatusCopData.push(e.data);
                    // on success
                    e.success(e.data);
                    // on failure
                    //e.error("XHR hseResponse", "status code", "error message");
                },
                update: function (e) {
                    // locate item in original datasource and update it
                    unitStatusCopData[getIndexById(unitStatusCopData, e.data.Proid)] = e.data;
                    // on success
                    e.success();
                    // on failure
                    //e.error("XHR hseResponse", "status code", "error message");
                }
            }
        });
        $scope.unitStatusCopGridOptions = {
            toolbar: [
               {
                   name: "create",
                   text: "Add new"
               }
            ],
            editable: {
                mode: "inline"
            },
            dataSource: unitStatusCopDataSource,
            columns: [
                {
                    field: "unit",
                    title: "Unit",
                    width: '6%',
                    headerAttributes: {
                        "class": "header-cell"
                    },
                    attributes: {
                        "class": "cell-unit"
                    }
                },
                {
                    field: "cop",
                    title: "COP",
                    width: "20%",
                    headerAttributes: {
                        "class": "header-cell"
                    },
                    attributes: {
                        "class": "cell-cop"
                    }
                },
                {
                    field: "value",
                    title: "Value",
                    width: "10%",
                    headerAttributes: {
                        "class": "header-cell"
                    },
                    attributes: {
                        "class": "cell-value",
                        //style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                    }
                },
                {
                    title: "Specification",
                    headerAttributes: {
                        style: "text-align: center; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    columns: [
                        {
                            field: "min",
                            title: "Min",
                            width: "6%",
                            headerAttributes: {
                                "class": "header-cell"
                            },
                            attributes: {
                                "class": "cell-min",
                                //style: "border-width: 0 0 1px 0;"
                            }
                        }, {
                            field: "max",
                            title: "Max",
                            width: "6%",
                            headerAttributes: {
                                "class": "header-cell"
                            },
                            attributes: {
                                "class": "cell-max",
                                //style: "border-width: 0 0 1px 0;"
                            }
                        }
                    ]

                },
                {
                    field: "remarks",
                    title: "Remarks",
                    headerAttributes: {
                        "class": "header-cell"
                    },
                    attributes: {
                        "class": "cell-remarks",
                        //style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                    }
                },
                //{

                //    width: "84%",
                //    headerAttributes: {
                //        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                //    },
                //    attributes: {
                //        //"class": "table-cell",
                //        style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                //    },
                //    template: function (dataItem) {
                //        console.log(dataItem);
                //        return "<button class=\"btn-grid-item-menu\" type=\"button\" data-ng-click=\"openItemMenu($event)\"><i class=\"icon-dot-3 icon-btn-grid-item-menu\"></i></button>" +
                //            "<ul data-id='" + dataItem.Proid + "' class=\"grid-item-menu\" style=\"display: none; background-color: #fff; border: 1px solid #ccc;\" >" +
                //            "<li><a data-ng-click=\"Edit($event,dataItem)\">Edit</a></li>" +
                //            "<li><a>Delete</a></li>" +
                //            "<li><a>Clear All</a></li>" +
                //            "</ul>";

                //    }
                //},
                {
                    command: {
                        name: 'abc',
                        text: '',
                        imageClass: 'icon-dot-3 icon-btn-grid-item-menu',
                        click: function (e) {
                            console.log('dfdf');

                        }
                    },
                    width: '10%',
                    headerAttributes: {
                        style: "border-left: none"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                    }
                }
            ]
        };

    });

    $scope.openItemMenu = function (e) {
        console.log("okk");
        e.preventDefault();
        e.stopImmediatePropagation();
        var itemMenu = $(e.target).closest("td").find(".grid-item-menu");
        _.each($('.grid-item-menu'), function (item) {
            if ($(item).attr("data-id") !== $(itemMenu).attr("data-id")) {
                $(item).hide();
            }
            else {
                $(itemMenu).slideToggle();
            }
        });
    };

    //$(document).ready(function () {
    //    //$("input[type='file']").kendoUpload({
    //    //    template: '<div style="background-image: url(../app/modules/di/PDF.png)"></div>'
    //    //});        
    //});

    // merge cell
    function mergeCommonRows(table, columnIndexToMerge) {
        var previous = null;
        var cellToExtend = null;
        var col1 = null;
        var bac = table.find("td:nth-child(" + columnIndexToMerge + ")");
        table.find("td:nth-child(" + columnIndexToMerge + ")").each(function () {
            var jthis = $(this);
            var content1 = jthis.parent('tr').children().first().text();
            if (col1 !== content1) {
                previous = null;
                col1 = content1;
            }
            var content = jthis.text();
            if (previous == content && content !== "") {
                jthis.remove();
                if (cellToExtend.attr("rowspan") == undefined) {
                    cellToExtend.attr("rowspan", 2);
                }
                else {
                    currentrowspan = parseInt(cellToExtend.attr("rowspan"));
                    cellToExtend.attr("rowspan", currentrowspan + 1);
                }
            }
            else {
                previous = content;
                cellToExtend = jthis;
            }
        });
    }

    mergeCommonRows($('#copSol'), 13);
    mergeCommonRows($('#copSol'), 1);






    // IOW region
    var text1 = 'Unit 1';
    var text8 = 'Unit 2';
    var text2 = 'Pump number 123XYZ will be on naintenance. Mechanic team please prepare the SCE and PTW. Pump to be fixed ASAP.';
    var text3 = 'Open';
    var text4 = 'Truong Thi Duc';
    var text5 = new Date();
    var text6 = new Date();
    var text7 = 'Done fixed';
    $scope.copStatus = ['Plan', 'Ongoing', 'Completed'];
    $("#iow").kendoGrid({
        columns: [
                {
                    field: "unit",
                    title: "Unit",
                    width: "6%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell"
                        style: "background: rgb(97,94,153); color: rgb(255,255,255); font-weight: bold;"
                    }
                },
                {
                    field: "tag",
                    title: "Tag",
                    width: "8%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "text-align: left; font-weight: bold; border-width: 0 0 1px 0;"
                    }
                },
                {
                    field: "description",
                    title: "Description",
                    width: "12%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    }
                },
                {
                    field: "value",
                    title: "Value",
                    width: "6%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "text-align: left; border-width: 0 0 1px 0;"
                    }
                },
                {
                    field: "uom",
                    title: "UOM",
                    width: "6%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    }
                },
                {
                    title: "Region 1",
                    headerAttributes: {
                        style: "text-align: center; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    columns: [
                        {
                            field: "min",
                            title: "Min",
                            width: "5%",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            }
                        }, {
                            field: "max",
                            title: "Max",
                            width: "5%",
                            headerAttributes: {
                                style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                            },
                            attributes: {
                                //"class": "table-cell",
                                style: "border-width: 0 0 1px 0;"
                            }
                        }
                    ]

                },
                {
                    field: "Category",
                    title: "Status",
                    width: "9%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    },
                    //editor: categoryDropDownEditor,
                    template: function (dataItem) {
                        var optionStr = '';
                        if ($scope.copStatus != null) {
                            $.each($scope.copStatus, function (index, value) {
                                optionStr += '<option>' + value + '</option>';
                            });
                        }

                        return '<select class="form-control row-control">' + optionStr + '</select>';
                    }
                },
                {
                    field: "count",
                    title: "Count",
                    width: "6%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0; text-align: center; color: rgb(0,159,154); font-weight: bold"
                    }
                },
                {
                    field: "document",
                    title: "Document",
                    width: "8%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    },
                    template: function () {
                        return '<label for="file" type="button" id="documentBtn" class="btn btn-default" style="height: 28px; border-radius: 1px;">Browse..</label>' +
                            '<input type="file" style="display:none;" id="file" name="file"/>';
                    }
                },
                {
                    field: "createdDate",
                    title: "Created Date",
                    width: "8%",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        style: "border-width: 0 0 1px 0;"
                    }
                },
                {
                    field: "remarks",
                    title: "Remarks",
                    headerAttributes: {
                        style: "vertical-align: top; font-size: 14px; color:rgb(117,117,117); font-weight: bold"
                    },
                    attributes: {
                        //"class": "table-cell",
                        //style: "border-width: 0 0 1px 0;"

                    },
                    template: function () {
                        return '<textarea type="text" class="form-control" id="copRemark" style="max-width: 90%; height: 100%">zzzzzzzzzzz</textarea>';
                    }
                }
        ],
        height: 400,
        scrollable: true,
        dataSource: [
            { unit: text1, tag: text3, description: text3, value: "100", uom: text7, min: "1", max: "2", status: text7, count: "1", document: text7, createdDate: "11", remarks: "22" },
            { unit: text1, tag: text3, description: text3, value: "100", uom: text7, min: "1", max: "2", status: text7, count: "1", document: text7, createdDate: "11", remarks: "22" },
            { unit: text8, tag: text3, description: text3, value: "100", uom: text7, min: "1", max: "2", status: text7, count: "1", document: text7, createdDate: "11", remarks: "22" },
            { unit: text8, tag: text3, description: text3, value: "100", uom: text7, min: "1", max: "2", status: text7, count: "1", document: text7, createdDate: "11", remarks: "22" },
            { unit: text8, tag: text3, description: text3, value: "100", uom: text7, min: "1", max: "2", status: text7, count: "1", document: text7, createdDate: "11", remarks: "22" }

        ]

    });
    mergeCommonRows($('#iow'), 12);
    mergeCommonRows($('#iow'), 1);
}]);
app.controller('raController', ['$rootScope', '$window', '$state', '$sce', '$stateParams', '$scope', '$location', 'authService', 'appSettings', 'constants', 'raServices',
    function ($rootScope, $window, $state, $sce, $stateParams, $scope, $location, authService, appSettings, constants, raServices) {
        var isProcessTriggerClick = true;

        $scope.statusLog = function () {
            $state.go(constants.state.raStatusLog, { sceId: $stateParams.sceId, raId: $stateParams.raId });
        }

        //Get user who loged in
        $scope.userProfile = $rootScope.$app.userProfile;
        $scope.actionResponse = "";
        $scope.statusTypeResponse = "";
        $scope.personInCharge = {
            userName: "",
            userProfileId: "",
            staffNo: "",
            remarks: "",
            dateTime: "",
            status: ""
        };
        $scope.isFacilitator = false;
        $scope.isEndorser = false;
        $scope.isApprover = false;

        $scope.isAdmin = $scope.userProfile.isAdmin;
        $scope.showMocFlow = false;
        $scope.hasApplicantRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",1,") >= 0;
        $scope.hasReviewerRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",9,") >= 0;
        $scope.hasEndorserRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",10,") >= 0;
        $scope.hasApproverRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",11,") >= 0;
        $scope.hasMOCApproverRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",15,") >= 0;
        $scope.isApplicant = false;
        $scope.isMocApprover = false;
        $scope.RaStatus = "";
        //region "RA Create new"
        $scope.selectedFacilitator = "";
        $scope.selectedEndorser = "";
        $scope.selectedApprover = "";
        //$scope.applicantToTransfer = "";
        $scope.reviewerToTransfer = "";
        $scope.endorserToTransfer = "";
        $scope.approverToTransfer = "";
        $scope.selectedPeopleSeverity = null;
        $scope.selectedEnvironmentSeverity = null;
        $scope.selectedAssetSeverity = null;
        $scope.selectedReputationSeverity = null;
        $scope.selectedPeopleLikelihood = null;
        $scope.selectedEnvironmentLikelihood = null;
        $scope.selectedAssetLikelihood = null;
        $scope.selectedReputationLikelihood = null;
        $scope.peopleRiskValue = 0;
        $scope.peopleRiskDescription = "";
        $scope.peopleRiskId = "";
        $scope.environmentRiskValue = 0;
        $scope.environmentRiskDescription = "";
        $scope.environmentRiskId = "";
        $scope.assetRiskValue = 0;
        $scope.assetRiskDescription = "";
        $scope.assetRiskId = "";
        $scope.reputationRiskValue = 0;
        $scope.reputationRiskDescription = "";
        $scope.reputationRiskId = "";
        $scope.riskLevel = 0;
        $scope.riskDescription = "N/A";
        $scope.teamMembers = [];

        $scope.teamMember = {
            userProfileId: "",
            userId: "",
            userName: "",
            position: "",
            image: ""
        };

        $scope.sceLink = "/sce_detail/" + $stateParams.sceId;

        $scope.initialData = {
            areaId: "",
            areaName: "",
            sceNo: "",
            tagNo: ""
        };

        $scope.peopleRisk = {
            riskId: "",
            riskValue: "",
            riskDescription: ""
        };

        $scope.environmentRisk = {
            riskId: "",
            riskValue: "",
            riskDescription: ""
        };

        $scope.assetRisk = {
            riskId: "",
            riskValue: "",
            riskDescription: ""
        };

        $scope.reputationRisk = {
            riskId: "",
            riskValue: "",
            riskDescription: ""
        };

        //$scope.changeSwithText = function () {
        //    if ($(".k-switch-container .k-switch-label-on").length) {
        //        $(".k-switch-container .k-switch-label-on").text("YES");
        //    }
        //    if ($(".k-switch-container .k-switch-label-off").length) {
        //        $(".k-switch-container .k-switch-label-off").text("NO");
        //    }
        //};

        $scope.showUpdateMOCKendoDialog = function () {
            utils.clearValid();
            $scope.updateMOCKendoDialog.center();
            $scope.updateMOCKendoDialog.open();
            //$scope.changeSwithText();
        };

        $scope.showRejectMocDialog = function () {
            utils.clearValid();
            $scope.rejectMocDialog.center();
            $scope.rejectMocDialog.open();
        }

        $scope.showApproveMocDialog = function () {
            utils.clearValid();
            $scope.approveMocDialog.center();
            $scope.approveMocDialog.open();
        }

        $scope.getInitialData = function (isCopyRa) {
            $rootScope.isLoading = true;
            raServices.getInitialData($stateParams.sceId).then(function (response) {
                if (response.data !== null && response.data !== undefined) {
                    $scope.initialData.areaId = response.data.areaId;
                    $scope.initialData.areaName = response.data.areaName;
                    $scope.initialData.sceNo = response.data.sceNo;
                    $scope.initialData.tagNo = response.data.tagNo;
                }

                if (isCopyRa === null || isCopyRa === undefined || isCopyRa === false) {
                    $rootScope.isLoading = false;
                }
                else {
                    $scope.$broadcast('initialDataCopy', $stateParams.sceId);
                }

            }, function (err) {
                $rootScope.isLoading = false;
                utils.error.showErrorGet(err);
            });
        };

        $scope.$on('initialDataCopy', function (event, sceId) {
            raServices.getInfoRaCopy(sceId).then(function (response) {
                $rootScope.isLoading = false;
                $scope.selectedFacilitator = {
                    userProfileId: response.data.reviewerProfileId,
                    userName: response.data.reviewerName,
                    image: response.data.reviewerImage
                };

                $scope.selectedEndorser = {
                    userProfileId: response.data.endorserProfileId,
                    userName: response.data.endorserName,
                    image: response.data.endorserImage
                };

                $scope.selectedApprover = {
                    userProfileId: response.data.approverProfileId,
                    userName: response.data.approverName,
                    image: response.data.approverImage
                };

                $scope.raHeaderModel.consequences = response.data.consequences;

            }, function (error) {
                $rootScope.isLoading = false;
            });
        });

        $scope.setRiskLevel = function (peopleRisk, environmentRisk, assetRisk, reputationRisk) {
            $scope.riskLevel = Math.max(peopleRisk, environmentRisk, assetRisk, reputationRisk);
            $scope.setRiskClass("#riskLevel", $scope.riskLevel, true);
            if ($scope.riskLevel === 0) $scope.riskDescription === "N/A";
            else {
                switch ($scope.riskLevel) {
                    case peopleRisk:
                        $scope.riskDescription = $scope.peopleRiskDescription;
                        break;
                    case environmentRisk:
                        $scope.riskDescription = $scope.environmentRiskDescription;
                        break;
                    case assetRisk:
                        $scope.riskDescription = $scope.assetRiskDescription;
                        break;
                    case reputationRisk:
                        $scope.riskDescription = $scope.reputationRiskDescription;
                        break;
                }
            }
            $("#riskLevel").text($scope.riskDescription);
        };

        $scope.setRiskIdentification = function (data, type) {
            if (data === null || data === undefined) {
                switch (type) {
                    case constants.RA.consequenceType.people:
                        $("#peopleRisk").html("");
                        $scope.peopleRiskValue = 0;
                        $scope.peopleRiskDescription = "";
                        $scope.setRiskClass("#peopleRisk", 0, false);
                        $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
                        break;
                    case constants.RA.consequenceType.environment:
                        $("#environmentRisk").text("");
                        $scope.environmentRiskValue = 0;
                        $scope.environmentRiskDescription = "";
                        $scope.setRiskClass("#environmentRisk", 0, false);
                        $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
                        break;
                    case constants.RA.consequenceType.asset:
                        $("#assetRisk").text("");
                        $scope.assetRiskValue = 0;
                        $scope.assetRiskDescription = "";
                        $scope.setRiskClass("#assetRisk", 0, false);
                        $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
                        break;
                    case constants.RA.consequenceType.reputation:
                        $("#reputationRisk").text("");
                        $scope.reputationRiskValue = 0;
                        $scope.reputationRiskDescription = "";
                        $scope.setRiskClass("#reputationRisk", 0, false);
                        $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
                        break;
                }
            } else {
                switch (type) {
                    case constants.RA.consequenceType.people:
                        $("#peopleRisk").html($scope.selectedPeopleLikelihood.value + '' + $scope.selectedPeopleSeverity.value + '&nbsp&nbsp' + data.riskDescription);
                        $scope.peopleRiskValue = data.riskValue;
                        $scope.peopleRiskDescription = data.riskDescription;
                        $scope.setRiskClass("#peopleRisk", data.riskValue, false);
                        $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
                        break;
                    case constants.RA.consequenceType.environment:
                        $("#environmentRisk").html($scope.selectedEnvironmentLikelihood.value + '' + $scope.selectedEnvironmentSeverity.value + '&nbsp&nbsp' + data.riskDescription);
                        $scope.environmentRiskValue = data.riskValue;
                        $scope.environmentRiskDescription = data.riskDescription;
                        $scope.setRiskClass("#environmentRisk", data.riskValue, false);
                        $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
                        break;
                    case constants.RA.consequenceType.asset:
                        $("#assetRisk").html($scope.selectedAssetLikelihood.value + '' + $scope.selectedAssetSeverity.value + '&nbsp&nbsp' + data.riskDescription);
                        $scope.assetRiskValue = data.riskValue;
                        $scope.assetRiskDescription = data.riskDescription;
                        $scope.setRiskClass("#assetRisk", data.riskValue, false);
                        $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
                        break;
                    case constants.RA.consequenceType.reputation:
                        $("#reputationRisk").html($scope.selectedReputationLikelihood.value + '' + $scope.selectedReputationSeverity.value + '&nbsp&nbsp' + data.riskDescription);
                        $scope.reputationRiskValue = data.riskValue;
                        $scope.reputationRiskDescription = data.riskDescription;
                        $scope.setRiskClass("#reputationRisk", data.riskValue, false);
                        $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
                        break;
                }
            }
        };

        $scope.setRiskClass = function (element, riskValue, isRiskIdentification) {
            switch (riskValue) {
                case constants.RA.riskLevel.lowRisk:
                    $(element).removeClass();
                    $(element).addClass('bg_green risk_label');
                    break;
                case constants.RA.riskLevel.mediumRisk:
                    $(element).removeClass();
                    $(element).addClass('bg_yellow risk_label');
                    break;
                case constants.RA.riskLevel.highRisk:
                    $(element).removeClass();
                    $(element).addClass('bg_orange risk_label');
                    break;
                case constants.RA.riskLevel.veryHigh:
                    $(element).removeClass();
                    $(element).addClass('bg_red risk_label');
                    break;
                default:
                    $(element).removeClass();
                    if (isRiskIdentification) $(element).addClass('bg_grey risk_label');
                    break;
            }
        };

        $scope.setRiskClassForPrinting = function (element, riskValue, isRiskIdentification) {
            if (!$(element).length) return;
            switch (riskValue) {
                case constants.RA.riskLevel.lowRisk:
                    $(element).removeClass();
                    $(element).addClass('risk-label bg-green');
                    break;
                case constants.RA.riskLevel.mediumRisk:
                    $(element).removeClass();
                    $(element).addClass('risk-label bg-yellow');
                    break;
                case constants.RA.riskLevel.highRisk:
                    $(element).removeClass();
                    $(element).addClass('risk-label bg-orange');
                    break;
                case constants.RA.riskLevel.veryHigh:
                    $(element).removeClass();
                    $(element).addClass('risk-label bg-red');
                    break;
                default:
                    $(element).removeClass();
                    if (isRiskIdentification) $(element).addClass('bg_grey risk-label');
                    break;
            }
        };

        $scope.getRiskIdentification = function (impactValue, likelihoodValue, type) {
            if (impactValue === null || impactValue === undefined || impactValue === "" || likelihoodValue === null || likelihoodValue === undefined || likelihoodValue === "") {
                $scope.setRiskIdentification("", type);
                return;
            }
            raServices.getRiskIdentification(impactValue, likelihoodValue).then(function (response) {
                if (response.data !== null && response.data !== undefined) {
                    $scope.setRiskIdentification(response.data, type);
                } else {
                    $scope.setRiskIdentification("", type);
                }
            }, function (err) {
                $scope.setRiskIdentification("", type);
                utils.error.showErrorGet(err);
            });
        };

        $scope.facilitatorDataSource = {
            serverFiltering: true,
            transport: {
                read: function (options) {
                    raServices.getRAFacilitors($scope.facilitatorSearchText).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.endorserDataSource = {
            serverFiltering: true,
            transport: {
                read: function (options) {
                    raServices.getRAEndorsers($scope.endorserSearchText).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.approverDataSource = {
            serverFiltering: true,
            transport: {
                read: function (options) {
                    raServices.getRAApprovers($scope.approverSearchText).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.facilitatorSearchText = "";

        $scope.facilitatorOptions = {
            autoBind: false,
            optionLabel: "Select Facilitator",
            filter: "contains",
            filtering: function (e) {
                $scope.facilitatorSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
            },
            dataSource: $scope.facilitatorDataSource,
            dataTextField: "userName",
            dataValueField: "userProfileId",
            valueTemplate: function (dataItem) {
                if (!dataItem.hasOwnProperty('image')) {
                    dataItem.image = $scope.selectedFacilitator.image;
                }
                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
            },
            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
        };
        $scope.endorserSearchText = "";

        $scope.endorsersOptions = {
            autoBind: false,
            optionLabel: "Select Endorser",
            filter: "contains",
            filtering: function (e) {
                $scope.endorserSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
            },
            dataSource: $scope.endorserDataSource,
            dataTextField: "userName",
            dataValueField: "userProfileId",
            valueTemplate: function (dataItem) {
                if (!dataItem.hasOwnProperty('image')) {
                    dataItem.image = $scope.selectedEndorser.image;
                }
                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
            },
            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
        };
        $scope.approverSearchText = "";

        $scope.approversOptions = {
            autoBind: false,
            optionLabel: "Select Approver",
            filter: "contains",
            filtering: function (e) {
                $scope.approverSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
            },
            dataSource: $scope.approverDataSource,
            dataTextField: "userName",
            dataValueField: "userProfileId",
            valueTemplate: function (dataItem) {
                if (!dataItem.hasOwnProperty('image')) {
                    dataItem.image = $scope.selectedApprover.image;
                }
                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
            },
            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
        };

        $scope.raNewModel = {
            reviewerProfileId: "",
            endorserProfileId: "",
            approverProfileId: "",
            raHeader: "",
            raTeamMembers: [],
            action: ""
        };

        $scope.raHeaderModel = {
            workDescription: "",
            consequences: "",
            peopleSeverity: "",
            peopleLikelihood: "",
            environmentSeverity: "",
            environmentLikelihood: "",
            assetsSeverity: "",
            assetsLikelihood: "",
            reputationSeverity: "",
            reputationLikelihood: "",
            riskLevel: 0,
            processMonitoring: "",
            processTrips: "",
            recoveryMeasures: "",
            instructionOfOperation: "",
            instrumentImpact: "",
            allowByPassViaMOC: "",
            mocApproveDate: "",
            mocApprovedBy: ""
        };

        $scope.peopleSeverityDataSource = {
            transport: {
                read: function (options) {
                    raServices.getSeverities(constants.impactGroup.people).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }

                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.environmentSeverityDataSource = {
            transport: {
                read: function (options) {
                    raServices.getSeverities(constants.impactGroup.environment).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.assetSeverityDataSource = {
            transport: {
                read: function (options) {
                    raServices.getSeverities(constants.impactGroup.asset).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.reputationSeverityDataSource = {
            transport: {
                read: function (options) {
                    raServices.getSeverities(constants.impactGroup.reputation).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.LikelihoodDataSource = {
            transport: {
                read: function (options) {
                    raServices.getLikelihoods().then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.onPeopleSeverityChange = function () {
            var index = this.selectedIndex;
            if (index !== 0) {
                $("#peopleImpactDescription").text(this.dataItem(index).impact);
                $scope.selectedPeopleSeverity = this.dataItem(index);
                if ($scope.selectedPeopleLikelihood !== null && $scope.selectedPeopleLikelihood !== undefined) {
                    var impactValue = this.dataItem(index).value;
                    var likelihoodValue = $scope.selectedPeopleLikelihood.value;
                    $scope.getRiskIdentification(impactValue, likelihoodValue, constants.RA.consequenceType.people);
                }
            }
            else {
                $("#peopleImpactDescription").text("");
                $scope.selectedPeopleSeverity = null;
                $scope.setRiskIdentification(null, constants.RA.consequenceType.people);
                $scope.setRiskLevel(0, $scope.environmentRiskValue, $scope.assetRiskValue, $scope.reputationRiskValue);
            }
        };

        $scope.onEnvironmentSeverityChange = function () {
            var index = this.selectedIndex;
            if (index !== 0) {
                $("#environmentImpactDescription").text(this.dataItem(index).impact);
                $scope.selectedEnvironmentSeverity = this.dataItem(index);
                if ($scope.selectedEnvironmentLikelihood !== null && $scope.selectedEnvironmentLikelihood !== undefined) {
                    var impactValue = this.dataItem(index).value;
                    var likelihoodValue = $scope.selectedEnvironmentLikelihood.value;
                    $scope.getRiskIdentification(impactValue, likelihoodValue, constants.RA.consequenceType.environment);
                }
            }
            else {
                $("#environmentImpactDescription").text("");
                $scope.selectedEnvironmentSeverity = null;
                $scope.setRiskIdentification(null, constants.RA.consequenceType.environment);
                $scope.setRiskLevel($scope.peopleRiskValue, 0, $scope.assetRiskValue, $scope.reputationRiskValue);
            }
        };

        $scope.onAssetSeverityChange = function () {
            var index = this.selectedIndex;
            if (index !== 0) {
                $("#assetImpactDescription").text(this.dataItem(index).impact);
                $scope.selectedAssetSeverity = this.dataItem(index);
                if ($scope.selectedAssetLikelihood !== null && $scope.selectedAssetLikelihood !== undefined) {
                    var impactValue = this.dataItem(index).value;
                    var likelihoodValue = $scope.selectedAssetLikelihood.value;
                    $scope.getRiskIdentification(impactValue, likelihoodValue, constants.RA.consequenceType.asset);
                }
            }
            else {
                $("#assetImpactDescription").text("");
                $scope.selectedAssetSeverity = null;
                $scope.setRiskIdentification(null, constants.RA.consequenceType.asset);
                $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, 0, $scope.reputationRiskValue);
            }
        };

        $scope.onReputationSeverityChange = function () {
            var index = this.selectedIndex;
            if (index !== 0) {
                $("#reputationImpactDescription").text(this.dataItem(index).impact);
                $scope.selectedReputationSeverity = this.dataItem(index);
                if ($scope.selectedReputationLikelihood !== null && $scope.selectedReputationLikelihood !== undefined) {

                    var impactValue = this.dataItem(index).value;
                    var likelihoodValue = $scope.selectedReputationLikelihood.value;
                    $scope.getRiskIdentification(impactValue, likelihoodValue, constants.RA.consequenceType.reputation);
                }
            }
            else {
                $("#reputationImpactDescription").text("");
                $scope.selectedReputationSeverity = null;
                $scope.setRiskIdentification(null, constants.RA.consequenceType.reputation);
                $scope.setRiskLevel($scope.peopleRiskValue, $scope.environmentRiskValue, $scope.assetRiskValue, 0);
            }
        };

        $scope.onPeopleLikelihoodChange = function () {
            var index = this.selectedIndex;
            if (index !== 0) {
                $("#peopleLikelihoodDescription").text(this.dataItem(index).description);
                $scope.selectedPeopleLikelihood = this.dataItem(index);
                if ($scope.selectedPeopleSeverity !== null && $scope.selectedPeopleSeverity !== undefined) {
                    var impactValue = $scope.selectedPeopleSeverity.value;
                    var likelihoodValue = this.dataItem(index).value;
                    $scope.getRiskIdentification(impactValue, likelihoodValue, constants.RA.consequenceType.people);
                }
            }
            else {
                $("#peopleLikelihoodDescription").text("");
                $scope.selectedPeopleLikelihood = null;
                $scope.setRiskIdentification(null, constants.RA.consequenceType.people);
            }
        };

        $scope.onEnvironmentLikelihoodChange = function () {
            var index = this.selectedIndex;
            if (index !== 0) {
                $("#environmentLikelihoodDescription").text(this.dataItem(index).description);
                $scope.selectedEnvironmentLikelihood = this.dataItem(index);
                if ($scope.selectedEnvironmentSeverity !== null && $scope.selectedEnvironmentSeverity !== undefined) {
                    var impactValue = $scope.selectedEnvironmentSeverity.value;
                    var likelihoodValue = this.dataItem(index).value;
                    $scope.getRiskIdentification(impactValue, likelihoodValue, constants.RA.consequenceType.environment);
                }
            }
            else {
                $("#environmentLikelihoodDescription").text("");
                $scope.selectedEnvironmentLikelihood = null;
                $scope.setRiskIdentification(null, constants.RA.consequenceType.environment);
            }
        };

        $scope.onAssetLikelihoodChange = function () {
            var index = this.selectedIndex;
            if (index !== 0) {
                $("#assetLikelihoodDescription").text(this.dataItem(index).description);
                $scope.selectedAssetLikelihood = this.dataItem(index);
                if ($scope.selectedAssetSeverity !== null && $scope.selectedAssetSeverity !== undefined) {
                    var impactValue = $scope.selectedAssetSeverity.value;
                    var likelihoodValue = this.dataItem(index).value;
                    $scope.getRiskIdentification(impactValue, likelihoodValue, constants.RA.consequenceType.asset);
                }
            }
            else {
                $("#assetLikelihoodDescription").text("");
                $scope.selectedAssetLikelihood = null;
                $scope.setRiskIdentification(null, constants.RA.consequenceType.asset);
            }
        };

        $scope.onReputationLikelihoodChange = function () {
            var index = this.selectedIndex;
            if (index !== 0) {
                $("#reputationLikelihoodDescription").text(this.dataItem(index).description);
                $scope.selectedReputationLikelihood = this.dataItem(index);
                if ($scope.selectedReputationSeverity !== null && $scope.selectedReputationSeverity !== undefined) {
                    var impactValue = $scope.selectedReputationSeverity.value;
                    var likelihoodValue = this.dataItem(index).value;
                    $scope.getRiskIdentification(impactValue, likelihoodValue, constants.RA.consequenceType.reputation);
                }
            }
            else {
                $("#reputationLikelihoodDescription").text("");
                $scope.selectedReputationLikelihood = null;
                $scope.setRiskIdentification(null, constants.RA.consequenceType.reputation);
            }
        };

        $scope.peopleSeveritiesOptions = {
            autoBind: false,
            optionLabel: "Select Severity",
            dataSource: $scope.peopleSeverityDataSource,
            dataTextField: "severity",
            dataValueField: "severityId",
            valueTemplate: '<span class="selected-value">{{dataItem.severity}}<span>',
            template: '<strong>{{dataItem.severity}}</strong><span>{{dataItem.impact}}</span>',
            change: $scope.onPeopleSeverityChange,
            open: function (e) {
                e.sender.popup.element.addClass('risk_options');
            }
        };

        $scope.environmentSeveritiesOptions = {
            autoBind: false,
            optionLabel: "Select Severity",
            dataSource: $scope.environmentSeverityDataSource,
            dataTextField: "severity",
            dataValueField: "severityId",
            valueTemplate: '<span class="selected-value">{{dataItem.severity}}</span>',
            template: '<strong>{{dataItem.severity}}</strong><span>{{dataItem.impact}}</span>',
            change: $scope.onEnvironmentSeverityChange,
            open: function (e) {
                e.sender.popup.element.addClass('risk_options');
            }
        };

        $scope.assetSeveritiesOptions = {
            autoBind: false,
            optionLabel: "Select Severity",
            dataSource: $scope.assetSeverityDataSource,
            dataTextField: "severity",
            dataValueField: "severityId",
            valueTemplate: '<span class="selected-value">{{dataItem.severity}}</span>',
            template: '<strong>{{dataItem.severity}}</strong><span>{{dataItem.impact}}</span>',
            change: $scope.onAssetSeverityChange,
            open: function (e) {
                e.sender.popup.element.addClass('risk_options');
            }
        };

        $scope.reputationSeveritiesOptions = {
            autoBind: false,
            optionLabel: "Select Severity",
            dataSource: $scope.reputationSeverityDataSource,
            dataTextField: "severity",
            dataValueField: "severityId",
            valueTemplate: '<span class="selected-value">{{dataItem.severity}}</span>',
            template: '<strong>{{dataItem.severity}}</strong><span>{{dataItem.impact}}</span>',
            change: $scope.onReputationSeverityChange,
            open: function (e) {
                e.sender.popup.element.addClass('risk_options');
            }
        };

        $scope.peopleLikelihoodOptions = {
            autoBind: false,
            optionLabel: "Select Likelihood",
            dataSource: $scope.LikelihoodDataSource,
            dataTextField: "likelihood",
            dataValueField: "likelihoodId",
            valueTemplate: '<span class="selected-value">{{dataItem.likelihood}}</span>',
            template: '<strong>{{dataItem.likelihood}}</strong><span>{{dataItem.description}}</span>',
            change: $scope.onPeopleLikelihoodChange,
            open: function (e) {
                e.sender.popup.element.addClass('risk_options');
            }
        };

        $scope.environmentLikelihoodOptions = {
            autoBind: false,
            optionLabel: "Select Likelihood",
            dataSource: $scope.LikelihoodDataSource,
            dataTextField: "likelihood",
            dataValueField: "likelihoodId",
            valueTemplate: '<span class="selected-value">{{dataItem.likelihood}}</span>',
            template: '<strong>{{dataItem.likelihood}}</strong><span>{{dataItem.description}}</span>',
            change: $scope.onEnvironmentLikelihoodChange,
            open: function (e) {
                e.sender.popup.element.addClass('risk_options');
            }
        };

        $scope.assetLikelihoodOptions = {
            autoBind: false,
            optionLabel: "Select Likelihood",
            dataSource: $scope.LikelihoodDataSource,
            dataTextField: "likelihood",
            dataValueField: "likelihoodId",
            valueTemplate: '<span class="selected-value">{{dataItem.likelihood}}</span>',
            template: '<strong>{{dataItem.likelihood}}</strong><span>{{dataItem.description}}</span>',
            change: $scope.onAssetLikelihoodChange,
            open: function (e) {
                e.sender.popup.element.addClass('risk_options');
            }
        };

        $scope.reputationLikelihoodOptions = {
            autoBind: false,
            optionLabel: "Select Likelihood",
            dataSource: $scope.LikelihoodDataSource,
            dataTextField: "likelihood",
            dataValueField: "likelihoodId",
            valueTemplate: '<span class="selected-value">{{dataItem.likelihood}}</span>',
            template: '<strong>{{dataItem.likelihood}}</strong><span>{{dataItem.description}}</span>',
            change: $scope.onReputationLikelihoodChange,
            open: function (e) {
                e.sender.popup.element.addClass('risk_options');
            }
        };

        // Kendo Function : ON KendoWidget Create
        $scope.$on("kendoWidgetCreated", function (ev, widget) {
            // in widget you have a reference to the event
            if (widget === $scope.MemberGrid) {
                $scope.MemberGrid.element.find(".k-grid-toolbar").insertAfter($scope.MemberGrid.element.find(".k-grid-content"));

            }
        });

        $scope.teamMembersOptions = {
            dataSource: {
                data: $scope.teamMembers,
                autoSync: true,
                height: 400,
                schema: {
                    model: {
                        id: "raTeamId",
                        fields: {
                            raTeamId: { type: "string" },
                            teamMember: { defaultValue: { userId: "", userName: "", position: "", image: "" } }
                        }
                    }
                }
            },
            toolbar: [{ name: "create", text: "Add new team member", className: "add_new" }],
            columns: [
                {
                    field: "teamMember",
                    title: "Team Member",
                    width: "400px",
                    editor: dropdownlistEditor,
                    template: function (dataItem) {
                        if (dataItem !== null && dataItem !== undefined && dataItem.teamMember !== null && dataItem.teamMember !== undefined) {
                            if (!dataItem.teamMember.hasOwnProperty('image')) {
                                dataItem.teamMember.image = "";
                            }
                            return '<div class="selected-teammate">' +
                                '<span class="selected-value" style="background-image: url(data:image/jpeg;base64,' + dataItem.teamMember.image + ')"></span>' +
                                '<span>' +
                                dataItem.teamMember.userName + '<br />' +
                                '<span class="teammate-position">' + dataItem.teamMember.position + '</span>' +
                                '</span>' +
                                '</div>';
                        }
                    }
                },
                {
                    command: {
                        text: "Remove", click: function (e) {
                            e.preventDefault();
                            var tr = $(e.target).closest("tr");
                            var data = this.dataItem(tr);
                            $("#teamMembersGrid").data("kendoGrid").dataSource.remove(data);
                            $("#teamMembersGrid").data("kendoGrid").dataSource.sync();
                        }
                    }, width: "100px"
                }
            ],
            editable: true
        };

        $scope.teamMemberTextSearch = "";
        $scope.selectedTeamMember = null;

        function dropdownlistEditor(container, options) {
            $('<input class = "txt dd_avatar" required data-required-msg= "Team Member is required" name = "' + options.field + '" />')
                .appendTo(container)
                .kendoDropDownList({
                    autoBind: false,
                    filter: "contains",
                    model: $scope.selectedTeamMember,
                    filtering: function (e) {
                        $scope.teamMemberTextSearch = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                    },
                    optionLabel: "Select team member",
                    dataTextField: "userName",
                    dataValueField: "userId",
                    required: true,
                    template: function (dataItem) {
                        if (!dataItem.hasOwnProperty('image')) {
                            dataItem.image = "";
                        }
                        return '<div class="custom-dropdown">' +
                            '<span class="k-state-default" style="background-image: url(data:image/jpeg;base64,' + dataItem.image + ')"></span>' +
                            '<span class="k-state-default">' +
                            '<div class="teammate-info">' +
                            '<label>' + dataItem.userName + '</label>' +
                            '<label>&nbsp&nbsp</label>' +
                            '</div>' +
                            '</span>' +
                                '</div>';
                    },
                    valueTemplate: function (dataItem) {
                        if (dataItem !== null && dataItem !== undefined) {
                            if (!dataItem.hasOwnProperty('image')) {
                                dataItem.image = "";
                            }
                            return '<div class="selected-teammate">' +
                                '<span class="selected-value" style="background-image: url(data:image/jpeg;base64,' + dataItem.image + ')"></span>' +
                                '<span>' +
                                dataItem.userName + '<br />' +
                                '<span class="teammate-position">' + dataItem.position + '</span>' +
                                '</span>' +
                                '</div>';
                        }
                    },
                    dataSource: {
                        serverFiltering: true,
                        transport: {
                            read: function (options) {
                                raServices.getTeamMembers($scope.teamMemberTextSearch).then(function (response) {
                                    if (response.data !== null && response.data !== undefined) {
                                        options.success(response.data);
                                    } else {
                                        options.success([]);
                                    }
                                }, function (err) {
                                    options.error([]);
                                    utils.error.showErrorGet(err);
                                });
                            }
                        }
                    }
                });
        }

        $scope.saveData = function (e, action) {
            if (!isProcessTriggerClick) {
                return false;
            }
            isProcessTriggerClick = false;

            e.preventDefault();
            e.stopPropagation();

            var isValid = $scope.raNewValidator.validate();

            if (action === 'Submit' && !utils.validRequiredAction(action)) {
                isValid = false;
            }
            if (!isValid) {
                isProcessTriggerClick = true;
                return false;
            }
            var team = $("#teamMembersGrid").data("kendoGrid").dataSource.data();
            for (i = 0; i < team.length; i++) {
                if ($scope.raNewModel.raTeamMembers.length > 0) {
                    for (j = 0; j < $scope.raNewModel.raTeamMembers.length; j++) {
                        if (team[i].teamMember.userId === $scope.raNewModel.raTeamMembers[j] || $scope.raNewModel.raTeamMembers[j] === "" || $scope.raNewModel.raTeamMembers[j] === null || $scope.raNewModel.raTeamMembers[j] === undefined) {
                            var option = {
                                id: "dialogInfo",
                                title: "Create RA",
                                lableClose: "CLOSE",
                                content: "Data is not valid. Please remove redundant values from <strong>Team Member</strong>!",
                                width: 500
                            };
                            utils.dialog.showDialog(option, function () {
                            });

                            $scope.raNewModel.raTeamMembers = [];
                            isProcessTriggerClick = true;
                            return false;
                        }
                    }
                }
                $scope.raNewModel.raTeamMembers.push(team[i].teamMember.userId);
            }
            $scope.raNewModel.action = action;
            $scope.raHeaderModel.peopleSeverity = $scope.selectedPeopleSeverity === null || $scope.selectedPeopleSeverity === undefined || _.isEmpty($scope.selectedPeopleSeverity) ? null : $scope.selectedPeopleSeverity.severityId;
            $scope.raHeaderModel.peopleLikelihood = $scope.selectedPeopleLikelihood === null || $scope.selectedPeopleLikelihood === undefined || _.isEmpty($scope.selectedPeopleLikelihood) ? null : $scope.selectedPeopleLikelihood.likelihoodId;
            $scope.raHeaderModel.environmentSeverity = $scope.selectedEnvironmentSeverity === null || $scope.selectedEnvironmentSeverity === undefined || _.isEmpty($scope.selectedEnvironmentSeverity) ? null : $scope.selectedEnvironmentSeverity.severityId;
            $scope.raHeaderModel.environmentLikelihood = $scope.selectedEnvironmentLikelihood === null || $scope.selectedEnvironmentLikelihood === undefined || _.isEmpty($scope.selectedEnvironmentLikelihood) ? null : $scope.selectedEnvironmentLikelihood.likelihoodId;
            $scope.raHeaderModel.assetsSeverity = $scope.selectedAssetSeverity === null || $scope.selectedAssetSeverity === undefined || _.isEmpty($scope.selectedAssetSeverity) ? null : $scope.selectedAssetSeverity.severityId;
            $scope.raHeaderModel.assetsLikelihood = $scope.selectedAssetLikelihood === null || $scope.selectedAssetLikelihood === undefined || _.isEmpty($scope.selectedAssetLikelihood) ? null : $scope.selectedAssetLikelihood.likelihoodId;
            $scope.raHeaderModel.reputationSeverity = $scope.selectedReputationSeverity === null || $scope.selectedReputationSeverity === undefined || _.isEmpty($scope.selectedReputationSeverity) ? null : $scope.selectedReputationSeverity.severityId;
            $scope.raHeaderModel.reputationLikelihood = $scope.selectedReputationLikelihood === null || $scope.selectedReputationLikelihood === undefined || _.isEmpty($scope.selectedReputationLikelihood) ? null : $scope.selectedReputationLikelihood.likelihoodId;
            $scope.raHeaderModel.riskLevel = $scope.riskLevel;
            $scope.raNewModel.raHeader = $scope.raHeaderModel;
            $scope.raNewModel.reviewerProfileId = $scope.selectedFacilitator === null || $scope.selectedFacilitator === undefined || _.isEmpty($scope.selectedFacilitator) ? null : $scope.selectedFacilitator.userProfileId;
            $scope.raNewModel.endorserProfileId = $scope.selectedEndorser === null || $scope.selectedEndorser === undefined || _.isEmpty($scope.selectedEndorser) ? null : $scope.selectedEndorser.userProfileId;
            $scope.raNewModel.approverProfileId = $scope.selectedApprover === null || $scope.selectedApprover === undefined || _.isEmpty($scope.selectedApprover) ? null : $scope.selectedApprover.userProfileId;

            $rootScope.isLoading = true;
            isProcessTriggerClick = true;

            raServices.createRA($stateParams.sceId, $scope.raNewModel).then(function (response) {
                $rootScope.isLoading = false;
                var option = {};
                if (response.data !== null && response.data !== undefined) {
                    switch (action) {
                        case "Draft":
                            option = {
                                id: "dialogInfo",
                                title: "Create RA",
                                lableClose: "CLOSE",
                                content: "This RA is saved as draft",
                                width: 500
                            };
                            utils.dialog.showDialog(option, function () {
                                $state.go(constants.state.raList);
                            });

                            break;
                        case "Submit":
                            option = {
                                id: "dialogInfo",
                                title: "Create RA",
                                lableClose: "CLOSE",
                                content: "This RA is submitted and <strong>pending review</strong>",
                                width: 500
                            };
                            utils.dialog.showDialog(option, function () {
                                $state.go(constants.state.raList);
                            });

                            break;
                    }
                } else {
                    switch (action) {
                        case "Draft":
                            option = {
                                id: "dialogInfo",
                                title: "Create RA",
                                lableClose: "CLOSE",
                                content: "This RA has error when saving.",
                                width: 500
                            };
                            utils.dialog.showDialog(option);

                            break;
                        case "Submit":
                            option = {
                                id: "dialogInfo",
                                title: "Create RA",
                                lableClose: "CLOSE",
                                content: "This RA has error when submitting.",
                                width: 500
                            };
                            utils.dialog.showDialog(option);

                            break;
                    }
                }
            }, function (error) {
                $rootScope.isLoading = false;
                var option = {};
                switch (action) {
                    case "Draft":
                        option = {
                            id: "dialogInfo",
                            title: "Create RA",
                            lableClose: "CLOSE",
                            content: kendo.format("This RA can not be saved as daft.\r\n{0}", error.message),
                            width: 500
                        };
                        utils.dialog.showDialog(option);
                        break;
                    case "Submit":
                        option = {
                            id: "dialogInfo",
                            title: "Create RA",
                            lableClose: "CLOSE",
                            content: kendo.format("This RA can not be created.\r\n{0}", error.message),
                            width: 500
                        };
                        utils.dialog.showDialog(option);
                        break;
                }
            });

        };

        $scope.raUpdateModel = {
            ReviewerProfileId: "",
            EndorserProfileId: "",
            ApproverProfileId: "",
            WorkDescription: "",
            Consequences: "",
            PeopleSeverityId: "",
            PeopleLikelihoodId: "",
            EnvironmentSeverityId: "",
            EnvironmentLikelihoodId: "",
            AssetSeverityId: "",
            AssetLikelihoodId: "",
            ReputationSeverityId: "",
            ReputationLikelihoodId: "",
            ProcessMonitoring: "",
            ProcessTrips: "",
            RecoveryMeasures: "",
            InstructionOfOperation: "",
            InstrumentImpact: "",
            TeamMembers: [],
            Action: ""
        };

        $scope.updateData = function (e, action) {
            if (!isProcessTriggerClick) {
                return false;
            }
            isProcessTriggerClick = false;

            e.preventDefault();
            e.stopPropagation();

            var isValid = $scope.raEditValidator.validate();

            if (action === 'Submit' && !utils.validRequiredAction(action)) {
                isValid = false;
            }
            if (!isValid) {
                isProcessTriggerClick = true;
                return false;
            }
            var team = $("#teamMembersGrid").data("kendoGrid").dataSource.data();
            for (i = 0; i < team.length; i++) {
                if ($scope.raUpdateModel.TeamMembers.length > 0) {
                    for (j = 0; j < $scope.raUpdateModel.TeamMembers.length; j++) {
                        if (team[i].teamMember.userId === $scope.raUpdateModel.TeamMembers[j] || $scope.raUpdateModel.TeamMembers[j] === "" || $scope.raUpdateModel.TeamMembers[j] === null || $scope.raUpdateModel.TeamMembers[j] === undefined) {
                            var option = {
                                id: "dialogInfo",
                                title: "Create RA",
                                lableClose: "CLOSE",
                                content: "Data is not valid. Please remove redundant values from <strong>Team Member</strong>!",
                                width: 500
                            };
                            utils.dialog.showDialog(option);

                            $scope.raUpdateModel.TeamMembers = [];
                            isProcessTriggerClick = true;
                            return false;
                        }
                    }
                }
                $scope.raUpdateModel.TeamMembers.push(team[i].teamMember.userId);
            }
            $scope.raUpdateModel.ReviewerProfileId = $scope.selectedFacilitator === null || $scope.selectedFacilitator === undefined || _.isEmpty($scope.selectedFacilitator) ? null : $scope.selectedFacilitator.userProfileId;
            $scope.raUpdateModel.EndorserProfileId = $scope.selectedEndorser === null || $scope.selectedEndorser === undefined || _.isEmpty($scope.selectedEndorser) ? null : $scope.selectedEndorser.userProfileId;
            $scope.raUpdateModel.ApproverProfileId = $scope.selectedApprover === null || $scope.selectedApprover === undefined || _.isEmpty($scope.selectedApprover) ? null : $scope.selectedApprover.userProfileId;
            $scope.raUpdateModel.WorkDescription = $scope.raDetail.raHeaderDetail.workDescription;
            $scope.raUpdateModel.Consequences = $scope.raDetail.raHeaderDetail.consequences;
            $scope.raUpdateModel.PeopleSeverityId = $scope.selectedPeopleSeverity === null || $scope.selectedPeopleSeverity === undefined || _.isEmpty($scope.selectedPeopleSeverity) ? null : $scope.selectedPeopleSeverity.severityId;
            $scope.raUpdateModel.PeopleLikelihoodId = $scope.selectedPeopleLikelihood === null || $scope.selectedPeopleLikelihood === undefined || _.isEmpty($scope.selectedPeopleLikelihood) ? null : $scope.selectedPeopleLikelihood.likelihoodId;
            $scope.raUpdateModel.EnvironmentSeverityId = $scope.selectedEnvironmentSeverity === null || $scope.selectedEnvironmentSeverity === undefined || _.isEmpty($scope.selectedEnvironmentSeverity) ? null : $scope.selectedEnvironmentSeverity.severityId;
            $scope.raUpdateModel.EnvironmentLikelihoodId = $scope.selectedEnvironmentLikelihood === null || $scope.selectedEnvironmentLikelihood === undefined || _.isEmpty($scope.selectedEnvironmentLikelihood) ? null : $scope.selectedEnvironmentLikelihood.likelihoodId;
            $scope.raUpdateModel.AssetSeverityId = $scope.selectedAssetSeverity === null || $scope.selectedAssetSeverity === undefined || _.isEmpty($scope.selectedAssetSeverity) ? null : $scope.selectedAssetSeverity.severityId;
            $scope.raUpdateModel.AssetLikelihoodId = $scope.selectedAssetLikelihood === null || $scope.selectedAssetLikelihood === undefined || _.isEmpty($scope.selectedAssetLikelihood) ? null : $scope.selectedAssetLikelihood.likelihoodId;
            $scope.raUpdateModel.ReputationSeverityId = $scope.selectedReputationSeverity === null || $scope.selectedReputationSeverity === undefined || _.isEmpty($scope.selectedReputationSeverity) ? null : $scope.selectedReputationSeverity.severityId;
            $scope.raUpdateModel.ReputationLikelihoodId = $scope.selectedReputationLikelihood === null || $scope.selectedReputationLikelihood === undefined || _.isEmpty($scope.selectedReputationLikelihood) ? null : $scope.selectedReputationLikelihood.likelihoodId;
            $scope.raUpdateModel.ProcessMonitoring = $scope.raDetail.raHeaderDetail.processMonitoring;
            $scope.raUpdateModel.ProcessTrips = $scope.raDetail.raHeaderDetail.processTrips;
            $scope.raUpdateModel.RecoveryMeasures = $scope.raDetail.raHeaderDetail.recoveryMeasures;
            $scope.raUpdateModel.InstructionOfOperation = $scope.raDetail.raHeaderDetail.instructionOfOperation;
            $scope.raUpdateModel.InstrumentImpact = $scope.raDetail.raHeaderDetail.instrumentImpact;

            $scope.raUpdateModel.Action = action;

            $rootScope.isLoading = true;
            isProcessTriggerClick = true;

            raServices.updateRA($stateParams.sceId, $stateParams.raId, $scope.raUpdateModel).then(function (response) {
                $rootScope.isLoading = false;
                var option = {};
                if (response.data !== null && response.data !== undefined) {
                    switch (action) {
                        case "Draft":
                            option = {
                                id: "dialogInfo",
                                title: "Update RA",
                                lableClose: "CLOSE",
                                content: "This RA is updated",
                                width: 500
                            };
                            utils.dialog.showDialog(option, function () {
                                $state.go(constants.state.raList);
                            });
                            break;
                        case "Submit":
                            option = {
                                id: "dialogInfo",
                                title: "Submit RA",
                                lableClose: "CLOSE",
                                content: "This RA is submitted and <strong>pending review</strong>",
                                width: 500
                            };
                            utils.dialog.showDialog(option, function () {
                                $state.go(constants.state.raList);
                            });
                            break;
                    }
                } else {
                    switch (action) {
                        case "Draft":
                            option = {
                                id: "dialogInfo",
                                title: "Update RA",
                                lableClose: "CLOSE",
                                content: kendo.format("This RA has error when saving.\r\n{0}"),
                                width: 500
                            };
                            utils.dialog.showDialog(option);
                            break;
                        case "Submit":
                            option = {
                                id: "dialogInfo",
                                title: "Update RA",
                                lableClose: "CLOSE",
                                content: kendo.format("This RA has error when submiting.\r\n{0}"),
                                width: 500
                            };
                            utils.dialog.showDialog(option);
                            break;
                    }
                }
            }, function (error) {
                $rootScope.isLoading = false;
                var option = {};
                switch (action) {
                    case "Draft":
                        option = {
                            id: "dialogInfo",
                            title: "Update RA",
                            lableClose: "CLOSE",
                            content: error.message,
                            width: 500
                        };
                        utils.dialog.showDialog(option);
                        break;
                    case "Submit":
                        option = {
                            id: "dialogInfo",
                            title: "SUBMIT RA",
                            lableClose: "CLOSE",
                            content: error.message,
                            width: 500
                        };
                        utils.dialog.showDialog(option);
                        break;
                }
            });
        };

        $scope.updateMOCModel = {
            sceByPass: true,
            mocNo: "",
            mocMeetingDateTime: "",
            mocApprover: ""
        };

        $scope.isReviewed = false;
        $scope.isEndorsed = false;
        $scope.isApproved = false;
        $scope.pendingReview = false;
        $scope.pendingEndorse = false;
        $scope.pendingApprove = false;

        $scope.selectedMocApprover = "";

        $scope.mocApproverSearchText = "";

        $scope.mocApproverDataSource = {
            serverFiltering: true,
            transport: {
                read: function (options) {
                    raServices.getMocApprovers($scope.mocApproverSearchText).then(function (response) {
                        if (response.data !== null && response.data !== undefined) {
                            options.success(response.data);
                        } else {
                            options.success([]);
                        }
                    }, function (err) {
                        options.error([]);
                        utils.error.showErrorGet(err);
                    });
                }
            }
        };

        $scope.mocApproverToTransfer = null;

        $scope.mocApproversOptions = {
            autoBind: false,
            optionLabel: "Select MOC Approver",
            filter: "contains",
            filtering: function (e) {
                $scope.mocApproverSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
            },
            dataSource: $scope.mocApproverDataSource,
            dataTextField: "userName",
            dataValueField: "userProfileId",
            valueTemplate: function (dataItem) {
                if (!dataItem.hasOwnProperty('image')) {
                    dataItem.image = $scope.selectedMocApprover.image;
                }
                return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
            },
            template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
        '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
        };


        $scope.updateMOC = function (e) {
            if (!isProcessTriggerClick) {
                return false;
            }
            isProcessTriggerClick = false;

            e.preventDefault();
            e.stopPropagation();

            var isValid = $scope.mocValidator.validate();
            if (!isValid) {
                isProcessTriggerClick = true;
                return false;
            }
            $scope.mocConfirmDialog("MOC Updated", "Please confirm that you have updated the MOC and ready to re-submit for MOC approval.").then(function () {
                $scope.updateMOCModel.mocMeetingDateTime = $.format.toBrowserTimeZone($scope.raDetail.raHeaderDetail.mocMeetingDate, constants.format.date.ddMMMyyyyhhmma);
                $scope.updateMOCModel.sceByPass = $scope.raDetail.raHeaderDetail.allowByPassViaMOC;
                $scope.updateMOCModel.mocNo = $scope.raDetail.raHeaderDetail.mocNo;
                $scope.updateMOCModel.mocApprover = $scope.selectedMocApprover.userProfileId;
                $rootScope.isLoading = true;
                isProcessTriggerClick = true;
                raServices.updateMOC($stateParams.sceId, $stateParams.raId, $scope.updateMOCModel).then(function (response) {
                    $rootScope.isLoading = false;
                    var option = {
                        id: "dialogInfo",
                        title: "MOC Submitted",
                        lableClose: "CLOSE",
                        content: "This MOC is submitted and pending MOC approval.",
                        width: 500
                    };
                    utils.dialog.showDialog(option, function () {
                        $state.go(constants.state.raList);
                    });

                }, function (err) {
                    $rootScope.isLoading = false;
                    var option = {
                        id: "dialogInfo",
                        title: "MOC Updated failed",
                        lableClose: "CLOSE",
                        content: err.message,
                        width: 500
                    };
                    utils.dialog.showDialog(option);
                });
                return true;
            }, function () {
                // Choosed cancel, do nothing
                isProcessTriggerClick = true;
                return true;
            });
        };

        $scope.submitMOCApproval = function (e) {
            if (!isProcessTriggerClick) {
                return false;
            }
            isProcessTriggerClick = false;

            e.preventDefault();
            e.stopPropagation();

            var isValid = $scope.mocValidator.validate();
            if (!isValid) {
                isProcessTriggerClick = true;
                return false;
            }
            $scope.updateMOCModel.mocMeetingDateTime = $.format.toBrowserTimeZone($scope.updateMOCModel.mocMeetingDateTime, constants.format.date.ddMMMyyyyhhmma);
            $scope.updateMOCModel.mocApprover = $scope.selectedMocApprover.userProfileId;
            $rootScope.isLoading = true;
            isProcessTriggerClick = true;

            raServices.updateMOC($stateParams.sceId, $stateParams.raId, $scope.updateMOCModel).then(function (response) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogInfo",
                    title: "MOC Submitted",
                    lableClose: "CLOSE",
                    content: "This MOC is submitted and pending MOC approval.",
                    width: 500
                };
                utils.dialog.showDialog(option, function () {
                    $state.go(constants.state.raList);
                });

            }, function (err) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogInfo",
                    title: "MOC Updated failed",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 500
                };
                utils.dialog.showDialog(option);

            });
            return true;
        }

        $scope.updateMOCActions = [
           { text: 'CANCEL' },
           {
               text: 'REQUEST MOC',
               action: function () {

                   if (!isProcessTriggerClick) {
                       return false;
                   }
                   isProcessTriggerClick = false;
                   var isValid = $scope.validators.updateMOC.validate();
                   if (!isValid) {
                       isProcessTriggerClick = true;
                       return false;
                   }
                   $scope.updateMOCModel.mocMeetingDateTime = $.format.toBrowserTimeZone($scope.updateMOCModel.mocMeetingDateTime, constants.format.date.ddMMMyyyyhhmma);
                   $scope.updateMOCModel.mocApprover = $scope.selectedMocApprover.userProfileId;
                   $rootScope.isLoading = true;
                   isProcessTriggerClick = true;
                   raServices.updateMOC($stateParams.sceId, $stateParams.raId, $scope.updateMOCModel).then(function (response) {
                       $rootScope.isLoading = false;
                       var option = {
                           id: "dialogInfo",
                           title: "MOC Submitted",
                           lableClose: "CLOSE",
                           content: "This MOC is submitted and <strong>pending MOC approval.</strong>",
                           width: 500
                       };
                       utils.dialog.showDialog(option, function () {
                           $state.go(constants.state.raList);
                       });

                   }, function (err) {
                       $rootScope.isLoading = false;
                       var option = {
                           id: "dialogInfo",
                           title: "MOC is submitted failed",
                           lableClose: "CLOSE",
                           content: err.message,
                           width: 500
                       };
                       utils.dialog.showDialog(option);

                   });
                   return true;
               },
               primary: true
           }
        ];


        $scope.mocApproveComment = "";

        $scope.approveMOC = function (sceId, raId, model) {
            raServices.approveMOC(sceId, raId, model).then(function (response) {
                $rootScope.isLoading = false;
                var option = {};
                if (response.data !== null && response.data !== undefined) {
                    if (model.isApproved) {
                        option = {
                            id: "dialogInfo",
                            title: "MOC Approved",
                            lableClose: "CLOSE",
                            content: "This MOC is approved",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });
                    } else {
                        option = {
                            id: "dialogInfo",
                            title: "MOC Not Approved",
                            lableClose: "CLOSE",
                            content: "This MOC is not approved and <strong>requires update</strong> from the applicant",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });

                    }
                } else {
                    option = {
                        id: "dialogInfo",
                        title: "MOC is approved Failed",
                        lableClose: "CLOSE",
                        content: "There are some errors occur",
                        width: 500
                    };
                    utils.dialog.showDialog(option);
                }
            }, function (err) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogInfo",
                    title: "MOC is approved Failed",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 500
                };
                utils.dialog.showDialog(option);
            });
        };

        $scope.mocApproveActions = [
            { text: 'CANCEL' },
            {
                text: 'APPROVE',
                action: function () {

                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;
                    if (!$scope.validators.mocApprove.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }

                    if ($scope.validators.mocApprove.validate()) {
                        $scope.workFlowModel.remarks = $scope.mocApproveComment;
                        $scope.workFlowModel.isApproved = true;
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.approveMOC($stateParams.sceId, $stateParams.raId, $scope.workFlowModel);
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];

        $scope.mocRejectComment = "";

        $scope.mocRejectActions = [
            { text: 'CANCEL' },
            {
                text: 'REJECT',
                action: function () {

                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;

                    if (!$scope.validators.mocReject.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }
                    if ($scope.validators.mocReject.validate()) {
                        $scope.workFlowModel.remarks = $scope.mocRejectComment;
                        $scope.workFlowModel.isApproved = false;
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.approveMOC($stateParams.sceId, $stateParams.raId, $scope.workFlowModel);
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];


        $scope.showTransferRolesKendoDiaglog = function () {
            $scope.reviewerToTransfer = $scope.raDetail.reviewer;
            $scope.endorserToTransfer = $scope.raDetail.endorser;
            $scope.approverToTransfer = $scope.raDetail.approver;
            $scope.mocApproverToTransfer = $scope.raDetail.mocApprover;
            if ($scope.pendingReview || $scope.pendingEndorse || $scope.pendingApprove || $scope.raDetail.mocStatusKey == 2) {
                $scope.transferRolesKendoDiaglog.center();
                $scope.transferRolesKendoDiaglog.open();
            }
        };

        $scope.transferRolesModel = {};
        $scope.applicantIsTransfered = false;
        $scope.reviewerIsTransfered = false;
        $scope.endorserIsTransfered = false;
        $scope.approverIsTransfered = false;
        $scope.mocApproverIsTransfered = false;
        $scope.adminComment = "";

        $scope.raTransferRoles = [
            { text: 'CANCEL' },
            {
                text: 'CONFIRM',
                action: function () {

                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;

                    if (!$scope.validators.raTransfer.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }

                    if ($scope.validators.raTransfer.validate()) {
                        $scope.transferRolesModel = {
                            reviewerProfileId: $scope.pendingReview && $scope.raDetail.reviewer.userProfileId !== $scope.reviewerToTransfer.userProfileId && $scope.reviewerToTransfer.userProfileId !== "" ? $scope.reviewerToTransfer.userProfileId : null,
                            endorserProfileId: $scope.pendingEndorse && $scope.raDetail.endorser.userProfileId !== $scope.endorserToTransfer.userProfileId && $scope.endorserToTransfer.userProfileId !== "" ? $scope.endorserToTransfer.userProfileId : null,
                            approverProfileId: $scope.pendingApprove && $scope.raDetail.approver.userProfileId !== $scope.approverToTransfer.userProfileId && $scope.approverToTransfer.userProfileId !== "" ? $scope.approverToTransfer.userProfileId : null,
                            mocApproverProfileId: $scope.raDetail.mocStatusKey == 2 && $scope.raDetail.mocApprover.userProfileId !== $scope.mocApproverToTransfer.userProfileId && $scope.mocApproverToTransfer.userProfileId !== "" ? $scope.mocApproverToTransfer.userProfileId : null,
                            comment: $scope.adminComment
                        };
                        if (($scope.transferRolesModel.reviewerProfileId === null || $scope.transferRolesModel.reviewerProfileId === undefined) &&
                            ($scope.transferRolesModel.endorserProfileId === null || $scope.transferRolesModel.endorserProfileId === undefined) &&
                            ($scope.transferRolesModel.approverProfileId === null || $scope.transferRolesModel.approverProfileId === undefined) &&
                            ($scope.transferRolesModel.mocApproverProfileId === null || $scope.transferRolesModel.mocApproverProfileId === undefined)) {
                            isProcessTriggerClick = true;
                            return true;
                        }
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        raServices.transferRoles($stateParams.sceId, $stateParams.raId, $scope.transferRolesModel).then(function (response) {
                            if ($scope.transferRolesModel.reviewerProfileId !== null && $scope.transferRolesModel.reviewerProfileId !== undefined) {
                                $scope.reviewerIsTransfered = true;
                            }
                            if ($scope.transferRolesModel.endorserProfileId !== null && $scope.transferRolesModel.endorserProfileId !== undefined) {
                                $scope.endorserIsTransfered = true;
                            }
                            if ($scope.transferRolesModel.approverProfileId !== null && $scope.transferRolesModel.approverProfileId !== undefined) {
                                $scope.approverIsTransfered = true;
                            }
                            if ($scope.transferRolesModel.mocApproverProfileId !== null && $scope.transferRolesModel.mocApproverProfileId !== undefined) {
                                $scope.mocApproverIsTransfered = true;
                            }
                            $rootScope.isLoading = false;
                            $scope.transferResultDialog.open();
                        }, function (err) {
                            $rootScope.isLoading = false;
                            var option = {
                                id: "dialogInfo",
                                title: "RA Roles Transferred failed.",
                                lableClose: "CLOSE",
                                content: err.message,
                                width: 500
                            };
                            utils.dialog.showDialog(option);
                        });
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];

        $scope.transferResultActions = [{
            text: 'CLOSE',
            action: function () {
                $state.go(constants.state.raList);
            }
        }];

        var mocMeetingDateTimeOptions = {
            format: "yyyy/MM/dd hh:mm tt",
            min: new Date(1900, 0, 1),
            max: new Date(2099, 11, 31)
        };
        //End region "RA Create new"

        //region "RA Update Require"
        $scope.raDetail = {};

        $scope.reviewStatus = "";

        function setRiskTabkeIntializing() {
            $scope.selectedFacilitator = $scope.raDetail.reviewer;
            $scope.selectedEndorser = $scope.raDetail.endorser;
            $scope.selectedApprover = $scope.raDetail.approver;
            $scope.selectedPeopleSeverity = $scope.raDetail.peopleSeverity;
            if ($scope.raDetail.peopleSeverity !== null && $scope.raDetail.peopleSeverity !== undefined) {
                $("#peopleImpactDescription").text($scope.raDetail.peopleSeverity.impact);
            } else {
                $("#peopleImpactDescription").text("");
            }
            $scope.selectedPeopleLikelihood = $scope.raDetail.peopleLikelihood;
            if ($scope.raDetail.peopleLikelihood !== null && $scope.raDetail.peopleLikelihood !== undefined) {
                $("#peopleLikelihoodDescription").text($scope.raDetail.peopleLikelihood.description);
            } else {
                $("#peopleLikelihoodDescription").text("");
            }
            $scope.selectedEnvironmentSeverity = $scope.raDetail.environmentSeverity;
            if ($scope.raDetail.environmentSeverity !== null && $scope.raDetail.environmentSeverity !== undefined) {
                $("#environmentImpactDescription").text($scope.raDetail.environmentSeverity.impact);
            } else {
                $("#environmentImpactDescription").text("");
            }
            $scope.selectedEnvironmentLikelihood = $scope.raDetail.environmentLikelihood;
            if ($scope.raDetail.environmentLikelihood !== null && $scope.raDetail.environmentLikelihood !== undefined) {
                $("#environmentLikelihoodDescription").text($scope.raDetail.environmentLikelihood.description);
            } else {
                $("#environmentLikelihoodDescription").text("");
            }

            $scope.selectedReputationSeverity = $scope.raDetail.reputationSeverity;
            if ($scope.raDetail.reputationSeverity !== null && $scope.raDetail.reputationSeverity !== undefined) {
                $("#reputationImpactDescription").text($scope.raDetail.reputationSeverity.impact);
            } else {
                $("#reputationImpactDescription").text("");
            }
            $scope.selectedReputationLikelihood = $scope.raDetail.reputationLikelihood;
            if ($scope.raDetail.reputationLikelihood !== null && $scope.raDetail.reputationLikelihood !== undefined) {
                $("#reputationLikelihoodDescription").text($scope.raDetail.reputationLikelihood.description);
            } else {
                $("#reputationLikelihoodDescription").text("");
            }
            $scope.selectedAssetLikelihood = $scope.raDetail.assetLikelihood;
            if ($scope.raDetail.assetLikelihood !== null && $scope.raDetail.assetLikelihood !== undefined) {
                $("#assetLikelihoodDescription").text($scope.raDetail.assetLikelihood.description);
            } else {
                $("#assetLikelihoodDescription").text("");
            }
            $scope.selectedAssetSeverity = $scope.raDetail.assetSeverity;
            if ($scope.raDetail.assetSeverity !== null && $scope.raDetail.assetSeverity !== undefined) {
                $("#assetImpactDescription").text($scope.raDetail.assetSeverity.impact);
            } else {
                $("#assetImpactDescription").text("");
            }
            if ($scope.raDetail.peopleRisk !== null && $scope.raDetail.peopleRisk !== undefined) {
                $("#peopleRisk").html($scope.raDetail.peopleLikelihood.value + $scope.raDetail.peopleSeverity.value + "&nbsp&nbsp" + $scope.raDetail.peopleRisk.riskDescription);
            } else {
                $("#peopleRisk").text("");
            }
            if ($scope.raDetail.environmentRisk !== null && $scope.raDetail.environmentRisk !== undefined) {
                $("#environmentRisk").html($scope.raDetail.environmentLikelihood.value + $scope.raDetail.environmentSeverity.value + "&nbsp&nbsp" + $scope.raDetail.environmentRisk.riskDescription);
            } else {
                $("#environmentRisk").text("");
            }
            if ($scope.raDetail.assetRisk !== null && $scope.raDetail.assetRisk !== undefined) {
                $("#assetRisk").html($scope.raDetail.assetLikelihood.value + $scope.raDetail.assetSeverity.value + "&nbsp&nbsp" + $scope.raDetail.assetRisk.riskDescription);
            } else {
                $("#assetRisk").text("");
            }
            if ($scope.raDetail.reputationRisk !== null && $scope.raDetail.reputationRisk !== undefined) {
                $("#reputationRisk").html($scope.raDetail.reputationLikelihood.value + $scope.raDetail.reputationSeverity.value + "&nbsp&nbsp" + $scope.raDetail.reputationRisk.riskDescription);
            } else {
                $("#reputationRisk").text("");
            }
            $scope.riskDescription = $scope.raDetail.riskIdentification === null || $scope.raDetail.riskIdentification === undefined ? "" : $scope.raDetail.riskIdentification.riskDescription;
            if ($scope.raDetail.riskIdentification !== null && $scope.raDetail.riskIdentification !== undefined) {
                $("#riskLevel").text($scope.raDetail.riskIdentification.riskDescription);
            } else {
                $("#riskLevel").text("");
            }

            $scope.teamMembers = $scope.raDetail.teamMembers;
            if ($scope.raDetail.riskIdentification !== null && $scope.raDetail.riskIdentification !== undefined) {
                $scope.riskLevel = $scope.raDetail.riskIdentification.riskValue;
            } else {
                $scope.riskLevel = 0;
            }

            $("#teamMembersGrid").data("kendoGrid").dataSource.data($scope.raDetail.teamMembers);
        }

        function chunk(arr, size) {
            var newArr = [];
            for (var i = 0; i < arr.length; i += size) {
                newArr.push(arr.slice(i, i + size));
            }
            return newArr;
        }

        $scope.chunkTeamMember = {};

        $scope.raPrint = function () {
            window.open('/print/ra/' + $stateParams.sceId + '/' + $stateParams.raId, '_blank');
        };

        $scope.getRADetailData = function (statusKey) {
            $rootScope.isLoading = true;
            raServices.getRADetail($stateParams.sceId, $stateParams.raId).then(function (response) {
                $rootScope.isLoading = false;
                if (response.data !== null && response.data !== undefined && response.data.raHeaderDetail !== null && response.data.raHeaderDetail !== undefined) {
                    if (statusKey !== response.data.raHeaderDetail.raStatusKey) {
                        $scope.redirectFunction(response, response.data.raHeaderDetail.raStatusKey);
                    }
                    $scope.raDetail = response.data;
                    $scope.InitializeStatusAndPermission();
                    if ($scope.raDetail.raHeaderDetail.raStatusKey === constants.RA.statusKey.raUpdateRequired) {
                        if ($scope.raDetail.reviewer !== null && $scope.raDetail.reviewer.status === false) {
                            $scope.actionResponse = constants.RA.actionResponse.review;
                            $scope.statusTypeResponse = constants.RA.statusTypeReponse.review;
                            $scope.personInCharge = $scope.raDetail.reviewer;
                        }
                        else {
                            if ($scope.raDetail.endorser !== null && $scope.raDetail.endorser.status === false) {
                                $scope.actionResponse = constants.RA.actionResponse.endorse;
                                $scope.statusTypeResponse = constants.RA.statusTypeReponse.endorse;
                                $scope.personInCharge = $scope.raDetail.endorser;
                            } else {
                                if ($scope.raDetail.approver !== null && $scope.raDetail.approver.status === false) {
                                    $scope.actionResponse = constants.RA.actionResponse.approve;
                                    $scope.statusTypeResponse = constants.RA.statusTypeReponse.approve;
                                    $scope.personInCharge = $scope.raDetail.approver;
                                }
                            }
                        }
                    }

                    if (response.data.raHeaderDetail.mocNo !== null && response.data.raHeaderDetail.mocNo !== undefined && response.data.raHeaderDetail.mocNo !== "") {
                        $scope.isUpdatedMOC = true;
                    } else {
                        $scope.isUpdatedMOC = false;
                    }

                    if (response.data.hasOwnProperty('raHeaderDetail')) {
                        $scope.isMOCRequired = response.data.raHeaderDetail.isMOCRequired;
                    } else {
                        $scope.isMOCRequired = response.data.isMOCRequired;
                    }
                    $scope.peopleRiskValue = $scope.raDetail.peopleRisk === null || $scope.raDetail.peopleRisk === undefined ? 0 : $scope.raDetail.peopleRisk.riskValue;
                    $scope.peopleRiskDescription = $scope.raDetail.peopleRisk === null || $scope.raDetail.peopleRisk === undefined ? "" : $scope.raDetail.peopleRisk.riskDescription;
                    $scope.environmentRiskValue = $scope.raDetail.environmentRisk === null || $scope.raDetail.environmentRisk === undefined ? 0 : $scope.raDetail.environmentRisk.riskValue;
                    $scope.environmentRiskDescription = $scope.raDetail.environmentRisk === null || $scope.raDetail.environmentRisk === undefined ? "" : $scope.raDetail.environmentRisk.riskDescription;
                    $scope.assetRiskValue = $scope.raDetail.assetRisk === null || $scope.raDetail.assetRisk === undefined ? 0 : $scope.raDetail.assetRisk.riskValue;
                    $scope.assetRiskDescription = $scope.raDetail.assetRisk === null || $scope.raDetail.assetRisk === undefined ? "" : $scope.raDetail.assetRisk.riskDescription;
                    $scope.reputationRiskValue = $scope.raDetail.reputationRisk === null || $scope.raDetail.reputationRisk === undefined ? 0 : $scope.raDetail.reputationRisk.riskValue;
                    $scope.reputationRiskDescription = $scope.raDetail.reputationRisk === null || $scope.raDetail.reputationRisk === undefined ? "" : $scope.raDetail.reputationRisk.riskDescription;

                    setRiskTabkeIntializing();
                    if ($scope.raDetail.peopleRisk !== null && $scope.raDetail.peopleRisk !== undefined)
                        $scope.setRiskClass("#peopleRisk", $scope.raDetail.peopleRisk.riskValue, false);
                    if ($scope.raDetail.environmentRisk !== null && $scope.raDetail.environmentRisk !== undefined)
                        $scope.setRiskClass("#environmentRisk", $scope.raDetail.environmentRisk.riskValue, false);
                    if ($scope.raDetail.assetRisk !== null && $scope.raDetail.assetRisk !== undefined)
                        $scope.setRiskClass("#assetRisk", $scope.raDetail.assetRisk.riskValue, false);
                    if ($scope.raDetail.reputationRisk !== null && $scope.raDetail.reputationRisk !== undefined)
                        $scope.setRiskClass("#reputationRisk", $scope.raDetail.reputationRisk.riskValue, false);
                    $scope.setRiskClass("#riskLevel", $scope.riskLevel, true);
                    if ($("#riskDescription").length) {
                        $scope.setRiskClass("#riskDescription", $scope.riskLevel, true);
                    }
                } else {
                    var option = {
                        id: "dialogInfo",
                        title: "Data Not Found",
                        lableClose: "CLOSE",
                        content: response.message,
                        width: 500
                    };
                    utils.dialog.showDialog(option, function () {
                        $state.go(constants.state.raList);
                    });

                }
            }, function (err) {
                $rootScope.isLoading = false;
                utils.error.showErrorGet(err);
            });
        };

        $scope.getRACopyData = function () {
            $rootScope.isLoading = true;

            raServices.getInfoRaCopy($stateParams.sceId).then(function (response) {
                if (response.data !== null && response.data !== undefined && response.data.raHeaderDetail !== null && response.data.raHeaderDetail !== undefined) {
                    $rootScope.isLoading = false;

                    $scope.initialData.areaId = response.data.raHeaderDetail.areaId;
                    $scope.initialData.areaName = response.data.raHeaderDetail.area;
                    $scope.initialData.sceNo = response.data.raHeaderDetail.sceNo;
                    $scope.initialData.tagNo = response.data.raHeaderDetail.tagNo;

                    //================
                    $scope.selectedFacilitator = {
                        userProfileId: response.data.reviewer.userProfileId,
                        userName: response.data.reviewer.userName,
                        image: response.data.reviewer.image
                    };

                    $scope.selectedEndorser = {
                        userProfileId: response.data.endorser.userProfileId,
                        userName: response.data.endorser.userName,
                        image: response.data.endorser.image
                    };

                    $scope.selectedApprover = {
                        userProfileId: response.data.approver.userProfileId,
                        userName: response.data.approver.userName,
                        image: response.data.approver.image
                    };

                    $scope.raHeaderModel.workDescription = response.data.raHeaderDetail.workDescription;
                    $scope.raHeaderModel.consequences = response.data.raHeaderDetail.consequences;
                    $scope.raHeaderModel.processMonitoring = response.data.raHeaderDetail.processMonitoring;
                    $scope.raHeaderModel.processTrips = response.data.raHeaderDetail.processTrips;
                    $scope.raHeaderModel.recoveryMeasures = response.data.raHeaderDetail.recoveryMeasures;
                    $scope.raHeaderModel.instructionOfOperation = response.data.raHeaderDetail.instructionOfOperation;
                    $scope.raHeaderModel.instrumentImpact = response.data.raHeaderDetail.instrumentImpact;

                    //========================
                    
                    $scope.raDetail = response.data;
                    $scope.InitializeStatusAndPermission();
                    
                    if ($scope.raDetail.reviewer !== null && $scope.raDetail.reviewer.status === false) {
                        $scope.actionResponse = constants.RA.actionResponse.review;
                        $scope.statusTypeResponse = constants.RA.statusTypeReponse.review;
                        $scope.personInCharge = $scope.raDetail.reviewer;
                    }
                    else {
                        if ($scope.raDetail.endorser !== null && $scope.raDetail.endorser.status === false) {
                            $scope.actionResponse = constants.RA.actionResponse.endorse;
                            $scope.statusTypeResponse = constants.RA.statusTypeReponse.endorse;
                            $scope.personInCharge = $scope.raDetail.endorser;
                        } else {
                            if ($scope.raDetail.approver !== null && $scope.raDetail.approver.status === false) {
                                $scope.actionResponse = constants.RA.actionResponse.approve;
                                $scope.statusTypeResponse = constants.RA.statusTypeReponse.approve;
                                $scope.personInCharge = $scope.raDetail.approver;
                            }
                        }
                    }
                   
                    
                    $scope.peopleRiskValue = $scope.raDetail.peopleRisk === null || $scope.raDetail.peopleRisk === undefined ? 0 : $scope.raDetail.peopleRisk.riskValue;
                    $scope.peopleRiskDescription = $scope.raDetail.peopleRisk === null || $scope.raDetail.peopleRisk === undefined ? "" : $scope.raDetail.peopleRisk.riskDescription;
                    $scope.environmentRiskValue = $scope.raDetail.environmentRisk === null || $scope.raDetail.environmentRisk === undefined ? 0 : $scope.raDetail.environmentRisk.riskValue;
                    $scope.environmentRiskDescription = $scope.raDetail.environmentRisk === null || $scope.raDetail.environmentRisk === undefined ? "" : $scope.raDetail.environmentRisk.riskDescription;
                    $scope.assetRiskValue = $scope.raDetail.assetRisk === null || $scope.raDetail.assetRisk === undefined ? 0 : $scope.raDetail.assetRisk.riskValue;
                    $scope.assetRiskDescription = $scope.raDetail.assetRisk === null || $scope.raDetail.assetRisk === undefined ? "" : $scope.raDetail.assetRisk.riskDescription;
                    $scope.reputationRiskValue = $scope.raDetail.reputationRisk === null || $scope.raDetail.reputationRisk === undefined ? 0 : $scope.raDetail.reputationRisk.riskValue;
                    $scope.reputationRiskDescription = $scope.raDetail.reputationRisk === null || $scope.raDetail.reputationRisk === undefined ? "" : $scope.raDetail.reputationRisk.riskDescription;

                    setRiskTabkeIntializing();
                    if ($scope.raDetail.peopleRisk !== null && $scope.raDetail.peopleRisk !== undefined)
                        $scope.setRiskClass("#peopleRisk", $scope.raDetail.peopleRisk.riskValue, false);
                    if ($scope.raDetail.environmentRisk !== null && $scope.raDetail.environmentRisk !== undefined)
                        $scope.setRiskClass("#environmentRisk", $scope.raDetail.environmentRisk.riskValue, false);
                    if ($scope.raDetail.assetRisk !== null && $scope.raDetail.assetRisk !== undefined)
                        $scope.setRiskClass("#assetRisk", $scope.raDetail.assetRisk.riskValue, false);
                    if ($scope.raDetail.reputationRisk !== null && $scope.raDetail.reputationRisk !== undefined)
                        $scope.setRiskClass("#reputationRisk", $scope.raDetail.reputationRisk.riskValue, false);
                    $scope.setRiskClass("#riskLevel", $scope.riskLevel, true);
                    if ($("#riskDescription").length) {
                        $scope.setRiskClass("#riskDescription", $scope.riskLevel, true);
                    }
                } else {
                    var option = {
                        id: "dialogInfo",
                        title: "Data Not Found",
                        lableClose: "CLOSE",
                        content: response.message,
                        width: 500
                    };
                    utils.dialog.showDialog(option, function () {
                        $state.go(constants.state.raList);
                    });

                }
            }, function (err) {
                $rootScope.isLoading = false;
                utils.error.showErrorGet(err);
            });
        };

        $scope.approveComment = "";

        $scope.rejectComment = "";

        $scope.reviewRejectActions = [
            { text: 'CANCEL' },
            {
                text: 'REJECT',
                action: function () {

                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;

                    if (!$scope.validators.reject.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }
                    if ($scope.validators.reject.validate()) {
                        $scope.workFlowModel.remarks = $scope.rejectComment;
                        $scope.workFlowModel.isApproved = false;
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.reviewRA($stateParams.sceId, $stateParams.raId, $scope.workFlowModel);
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];

        $scope.reviewApproveActions = [
            { text: 'CANCEL' },
            {
                text: 'APPROVE',
                action: function () {

                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;

                    if (!$scope.validators.approve.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }

                    if ($scope.validators.approve.validate()) {
                        $scope.workFlowModel.remarks = $scope.approveComment;
                        $scope.workFlowModel.isApproved = true;
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.reviewRA($stateParams.sceId, $stateParams.raId, $scope.workFlowModel);
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];

        $scope.endorseRejectActions = [
            { text: 'CANCEL' },
            {
                text: 'REJECT',
                action: function () {

                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;

                    if (!$scope.validators.reject.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }

                    if ($scope.validators.reject.validate()) {
                        $scope.workFlowModel.remarks = $scope.rejectComment;
                        $scope.workFlowModel.isApproved = false;
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.endorseRA($stateParams.sceId, $stateParams.raId, $scope.workFlowModel);
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];

        $scope.endorseApproveActions = [
            { text: 'CANCEL' },
            {
                text: 'APPROVE',
                action: function () {
                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;

                    if (!$scope.validators.approve.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }

                    if ($scope.validators.approve.validate()) {
                        $scope.workFlowModel.remarks = $scope.approveComment;
                        $scope.workFlowModel.isApproved = true;
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.endorseRA($stateParams.sceId, $stateParams.raId, $scope.workFlowModel);
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];

        $scope.approveRejectActions = [
            { text: 'CANCEL' },
            {
                text: 'REJECT',
                action: function () {
                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;
                    if (!$scope.validators.reject.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }
                    if ($scope.validators.reject.validate()) {
                        $scope.workFlowModel.remarks = $scope.rejectComment;
                        $scope.workFlowModel.isApproved = false;
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.approveRA($stateParams.sceId, $stateParams.raId, $scope.workFlowModel);
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];

        $scope.approveApproveActions = [
            { text: 'CANCEL' },
            {
                text: 'APPROVE',
                action: function () {

                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;
                    if (!$scope.validators.approve.validate()) {
                        isProcessTriggerClick = true;
                        return false;
                    }

                    if ($scope.validators.approve.validate()) {
                        $scope.workFlowModel.remarks = $scope.approveComment;
                        $scope.workFlowModel.isApproved = true;
                        $rootScope.isLoading = true;
                        isProcessTriggerClick = true;
                        $scope.approveRA($stateParams.sceId, $stateParams.raId, $scope.workFlowModel);
                        return true;
                    }
                    return false;
                },
                primary: true
            }
        ];

        $scope.reviewRA = function (sceId, raId, model) {
            raServices.reviewRA(sceId, raId, model).then(function (response) {
                $rootScope.isLoading = false;
                var option = {};
                if (response.data !== null && response.data !== undefined) {
                    if (model.isApproved) {
                        option = {
                            id: "dialogInfo",
                            title: "RA Reviewed",
                            lableClose: "CLOSE",
                            content: "This RA is reviewed and <strong>pending endorsement</strong>.",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });

                    } else {
                        option = {
                            id: "dialogInfo",
                            title: "RA Rejected",
                            lableClose: "CLOSE",
                            content: "This RA is not reviewed and <strong>requires update</strong> from the applicant",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });
                    }
                } else {
                    option = {
                        id: "dialogInfo",
                        title: "RA Review failed",
                        lableClose: "CLOSE",
                        content: "There are some errors occurs",
                        width: 500
                    };
                    utils.dialog.showDialog(option);
                }
            }, function (err) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogInfo",
                    title: "RA Review failed",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 500
                };
                utils.dialog.showDialog(option, function () {
                });

            });
        };

        $scope.endorseRA = function (sceId, raId, model) {
            raServices.endorseRA(sceId, raId, model).then(function (response) {
                $rootScope.isLoading = false;
                var option = {};
                if (response.data !== null && response.data !== undefined) {
                    if (model.isApproved) {
                        option = {
                            id: "dialogInfo",
                            title: "RA Endorsed",
                            lableClose: "CLOSE",
                            content: "This RA is endorsed and <strong>pending approval</strong>.",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });

                    } else {
                        option = {
                            id: "dialogInfo",
                            title: "RA Rejected",
                            lableClose: "CLOSE",
                            content: "This RA is not endorsed and <strong>requires update</strong> from the applicant",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });

                    }
                } else {
                    option = {
                        id: "dialogInfo",
                        title: "Endorse RA Failed",
                        lableClose: "CLOSE",
                        content: "There are some errors occur",
                        width: 500
                    };
                    utils.dialog.showDialog(option);
                }
            }, function (err) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogInfo",
                    title: "Approve RA Failed",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 500
                };
                utils.dialog.showDialog(option, function () {
                });

            });
        };

        $scope.approveRA = function (sceId, raId, model) {
            raServices.approveRA(sceId, raId, model).then(function (response) {
                $rootScope.isLoading = false;
                var option = {};
                if (response.data !== null && response.data !== undefined) {
                    if (model.isApproved) {
                        option = {
                            id: "dialogInfo",
                            title: "RA Approved",
                            lableClose: "CLOSE",
                            content: "This RA is approved",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });
                    } else {
                        option = {
                            id: "dialogInfo",
                            title: "RA Not Approved",
                            lableClose: "CLOSE",
                            content: "This RA is not approved and <strong>requires update</strong> from the applicant",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });

                    }
                } else {
                    option = {
                        id: "dialogInfo",
                        title: "Approve RA Failed",
                        lableClose: "CLOSE",
                        content: "There are some errors occur",
                        width: 500
                    };
                    utils.dialog.showDialog(option);
                }
            }, function (err) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogInfo",
                    title: "Approve RA Failed",
                    lableClose: "CLOSE",
                    content: err.message,
                    width: 500
                };
                utils.dialog.showDialog(option);
            });
        };

        $scope.cancelRA = function () {
            if ($scope.isApplicant || $scope.isAdmin) {
                $scope.confirmDialog("RA Cancel", "Are you sure you want to cancel this RA?").then(function () {
                    raServices.cancelRA($stateParams.sceId, $stateParams.raId).then(function (response) {
                        var option = {
                            id: "dialogInfo",
                            title: "RA Cancelled",
                            lableClose: "CLOSE",
                            content: "RA form has been cancelled successfully",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });
                    }, function (error) {
                        var option = {
                            id: "dialogInfo",
                            title: "RA Cancelled Failed",
                            lableClose: "CLOSE",
                            content: error.message,
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                        });
                    });
                }, function () {
                    // Choosed cancel, do nothing
                });
            } else {
                var option = {
                    id: "dialogInfo",
                    title: "Access Denied",
                    lableClose: "CLOSE",
                    content: "You don't have permission to do this action. Please contact to Administrator.",
                    width: 500
                };
                utils.dialog.showDialog(option, function () {
                    $state.go(constants.state.raList);
                });
            }
        };

        $scope.workFlowModel = {
            isApproved: false,
            remarks: ""
        };

        $(".approve-button").click(function () {
            var dialog = $("#approveDialog").data("kendoDialog");
            dialog.open();
        });

        $(".cancel-button").click(function () {
            $scope.cancelRA();
        });

        $(".reject-button").click(function () {
            utils.clearValid();
            var dialog = $("#rejectDialog").data("kendoDialog");
            dialog.open();
        });

        $scope.confirmDialog = function (title, content) {
            return $("<div></div>").kendoConfirm({
                title: title,
                content: content
            }).data("kendoConfirm").open().result;
        };
        $scope.mocConfirmDialog = function (title, content) {
            return $("<div></div>").kendoConfirm({
                title: title,
                content: content,
                actions: [{ text: "SUBMIT", primary: true },
                    { text: "CANCEL" }]
            }).data("kendoConfirm").open().result;
        };

        $scope.cancelMocConfirmDialog = function (title, content) {
            return $("<div></div>").kendoConfirm({
                title: title,
                content: content,
                actions: [{ text: "CANCEL MOC", primary: true },
                    { text: "CANCEL" }]
            }).data("kendoConfirm").open().result;
        };
        $scope.cancelMOC = function () {
            if ($scope.isApplicant || $scope.isAdmin) {
                $scope.cancelMocConfirmDialog("Cancel MOC", "Are you sure to cancel MOC?").then(function () {
                    raServices.cancelMOC($stateParams.sceId, $stateParams.raId).then(function (response) {
                        var option = {
                            id: "dialogInfo",
                            title: "MOC Cancelled",
                            lableClose: "CLOSE",
                            content: "This MOC is cancelled",
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                            $state.go(constants.state.raList);
                        });
                    }, function (error) {
                        var option = {
                            id: "dialogInfo",
                            title: "RA is Cancelled Failed",
                            lableClose: "CLOSE",
                            content: error.message,
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                        });
                    });
                }, function () {
                    // Choosed cancel, do nothing
                });
            } else {
                var option = {
                    id: "dialogInfo",
                    title: "Access Denied",
                    lableClose: "CLOSE",
                    content: "You don't have permission to do this action. Please contact to Administrator.",
                    width: 500
                };
                utils.dialog.showDialog(option, function () {
                    $state.go(constants.state.raList);
                });
            }
        };


        $scope.InitializeStatusAndPermission = function () {
            if ($scope.raDetail.raHeaderDetail.applicantUserProfileId === $scope.userProfile.userProfileId) {
                $scope.isApplicant = true;
            } else {
                $scope.isApplicant = false;
            }

            if ($scope.raDetail.reviewer !== null && $scope.raDetail.reviewer !== undefined && $scope.raDetail.reviewer.userProfileId === $scope.userProfile.userProfileId) {
                $scope.isFacilitator = true;
            } else {
                $scope.isFacilitator = false;
            }

            if ($scope.raDetail.endorser !== null && $scope.raDetail.endorser !== undefined && $scope.raDetail.endorser.userProfileId === $scope.userProfile.userProfileId) {
                $scope.isEndorser = true;
            } else {
                $scope.isEndorser = false;
            }
            if ($scope.raDetail.approver !== null && $scope.raDetail.approver !== undefined && $scope.raDetail.approver.userProfileId === $scope.userProfile.userProfileId) {
                $scope.isApprover = true;
            } else {
                $scope.isApprover = false;
            }
            if ($scope.raDetail.mocApprover !== null && $scope.raDetail.mocApprover !== undefined && $scope.raDetail.mocApprover.userProfileId === $scope.userProfile.userProfileId) {
                $scope.isMocApprover = true;
            } else {
                $scope.isMocApprover = false;
            }
            switch ($scope.raDetail.raHeaderDetail.raStatusKey) {
                case constants.RA.statusKey.raUpdateRequired:
                    $scope.RaStatus = constants.RA.status.updateRequired;
                    break;
                case constants.RA.statusKey.raPendingReview:
                    $scope.pendingReview = true;
                    $scope.RaStatus = constants.RA.status.pendingReview;
                    break;
                case constants.RA.statusKey.raPendingEndorsement:
                    $scope.pendingEndorse = true;
                    $scope.RaStatus = constants.RA.status.pendingEndorse;
                    break;
                case constants.RA.statusKey.raPendingApproval:
                    $scope.pendingApprove = true;
                    $scope.RaStatus = constants.RA.status.pendingApproval;
                    break;
                case constants.RA.statusKey.raApproved:
                    $scope.RaStatus = constants.RA.status.approved;
                    break;
                case constants.RA.statusKey.raPendingMoc:
                    $scope.RaStatus = constants.RA.status.pendingMOC;
                    break;
                case constants.RA.statusKey.raPendingMocApproval:
                    $scope.RaStatus = constants.RA.status.pendingMOCApproval;
                    break;
                case constants.RA.statusKey.raMocRequiresUpdate:
                    $scope.RaStatus = constants.RA.status.MocRequriesUpdate;
                    break;
                case constants.RA.statusKey.raMoc:
                    $scope.RaStatus = constants.RA.status.Moc;
                    break;
            }
        };

        $scope.isMOCRequired = false;
        $scope.isUpdatedMOC = false;
        // Class for MOC flow
        $scope.mocFlowClass = {
            application: '',
            approval: ''
        }

        $scope.getRADetailForWorkflow = function () {
            $rootScope.isLoading = true;
            raServices.getRADetail($stateParams.sceId, $stateParams.raId).then(function (response) {
                $rootScope.isLoading = false;
                if (response.data !== null && response.data !== undefined) {
                    $scope.raDetail = response.data;
                    $scope.InitializeStatusAndPermission();

                    switch ($scope.raDetail.raHeaderDetail.raStatusKey) {
                        case constants.RA.statusKey.raPendingReview: {
                            $scope.pendingReview = true;
                            break;
                        }
                        case constants.RA.statusKey.raPendingEndorsement: {
                            $scope.pendingEndorse = true;
                            $scope.isReviewed = true;
                            break;
                        }
                        case constants.RA.statusKey.raPendingApproval: {
                            $scope.pendingApprove = true;
                            $scope.isReviewed = true;
                            $scope.isEndorsed = true;
                            break;
                        }
                        case constants.RA.statusKey.raApproved: {
                            $scope.isReviewed = true;
                            $scope.isEndorsed = true;
                            $scope.isApproved = true;
                            break;
                        }
                        case constants.RA.statusKey.raPendingMoc:
                            {
                                $scope.isReviewed = true;
                                $scope.isEndorsed = true;
                                $scope.isApproved = true;
                                if ($scope.isApplicant) {
                                    $scope.mocFlowClass.application = 'current';
                                } else {
                                    $scope.mocFlowClass.application = '';
                                }
                                $scope.mocFlowClass.approval = '';
                                $scope.showMocFlow = true;
                                break;
                            }
                        case constants.RA.statusKey.raMocRequiresUpdate: {
                            $scope.isReviewed = true;
                            $scope.isEndorsed = true;
                            $scope.isApproved = true;
                            $scope.mocFlowClass.application = 'current';
                            $scope.mocFlowClass.approval = '';
                            $scope.showMocFlow = true;
                            break;
                        }
                        case constants.RA.statusKey.raPendingMocApproval: {
                            $scope.isReviewed = true;
                            $scope.isEndorsed = true;
                            $scope.isApproved = true;
                            $scope.mocFlowClass.application = 'completed';
                            if ($scope.isMocApprover) {
                                $scope.mocFlowClass.approval = 'current';
                            } else {
                                $scope.mocFlowClass.approval = '';
                            }
                            $scope.showMocFlow = true;
                            break;
                        }
                        case constants.RA.statusKey.raMoc: {
                            $scope.isReviewed = true;
                            $scope.isEndorsed = true;
                            $scope.isApproved = true;
                            $scope.mocFlowClass.application = 'completed';
                            $scope.mocFlowClass.approval = 'completed';
                            $scope.showMocFlow = true;
                            break;
                        }
                    }
                    if (response.data.raHeaderDetail !== null && response.data.raHeaderDetail !== undefined && (response.data.raHeaderDetail.mocNo !== null && response.data.raHeaderDetail.mocNo !== undefined && response.data.raHeaderDetail.mocNo !== "")) {
                        $scope.isUpdatedMOC = true;
                    } else {
                        $scope.isUpdatedMOC = false;
                    }
                    if (response.data.hasOwnProperty('raHeaderDetail')) {
                        $scope.isMOCRequired = response.data.raHeaderDetail.isMOCRequired;
                    } else {
                        $scope.isMOCRequired = response.data.isMOCRequired;
                    }
                    //set Initial Data
                    $scope.selectedFacilitator = $scope.raDetail.reviewer;
                    $scope.selectedEndorser = $scope.raDetail.endorser;
                    $scope.selectedApprover = $scope.raDetail.approver;
                    $scope.selectedMocApprover = $scope.raDetail.mocApprover;
                    $scope.selectedPeopleSeverity = $scope.raDetail.peopleSeverity;
                    $scope.selectedPeopleLikelihood = $scope.raDetail.peopleLikelihood;
                    $scope.selectedEnvironmentSeverity = $scope.raDetail.environmentSeverity;
                    $scope.selectedEnvironmentLikelihood = $scope.raDetail.environmentLikelihood;
                    $scope.selectedReputationSeverity = $scope.raDetail.reputationSeverity;
                    $scope.selectedReputationLikelihood = $scope.raDetail.reputationLikelihood;
                    $scope.selectedAssetLikelihood = $scope.raDetail.assetLikelihood;
                    $scope.selectedAssetSeverity = $scope.raDetail.assetSeverity;
                    $scope.riskDescription = $scope.raDetail.riskIdentification.riskDescription;
                    $scope.teamMembers = $scope.raDetail.teamMembers;
                    $scope.chunkTeamMember = chunk($scope.teamMembers, constants.RA.teamMemberSplitSize);
                    $scope.riskLevel = $scope.raDetail.riskIdentification.riskValue;
                    $scope.setRiskClass("#peopleRisk", $scope.raDetail.peopleRisk.riskValue, false);
                    $scope.setRiskClassForPrinting("#print_PeopleRisk", $scope.raDetail.peopleRisk.riskValue, false);

                    $scope.setRiskClass("#environmentRisk", $scope.raDetail.environmentRisk.riskValue, false);
                    $scope.setRiskClassForPrinting("#print_EnvironmentRisk", $scope.raDetail.environmentRisk.riskValue, false);

                    $scope.setRiskClass("#assetRisk", $scope.raDetail.assetRisk.riskValue, false);
                    $scope.setRiskClassForPrinting("#print_AssetRisk", $scope.raDetail.assetRisk.riskValue, false);

                    $scope.setRiskClass("#reputationRisk", $scope.raDetail.reputationRisk.riskValue, false);
                    $scope.setRiskClassForPrinting("#print_ReputationRisk", $scope.raDetail.reputationRisk.riskValue, false);

                    $scope.setRiskClass("#riskLevel", $scope.riskLevel, true);

                    $scope.setRiskClassForPrinting("#print_RiskDescription", $scope.riskLevel, true);
                    if ($("#riskDescription").length) {
                        $scope.setRiskClass("#riskDescription", $scope.riskLevel, true);
                    }
                } else {
                    var option = {
                        id: "dialogInfo",
                        title: "Data Not Found",
                        lableClose: "CLOSE",
                        content: response.message,
                        width: 500
                    };
                    utils.dialog.showDialog(option, function () {
                        $state.go(constants.state.raList);
                    });
                }
            }, function (err) {
                $rootScope.isLoading = false;
                utils.error.showErrorGet(err);
                //$state.go(constants.state.raList);
            });
        };
        //end region "RA Update Require"

        $scope.redirectFunction = function (response, statusKey) {
            switch (statusKey) {
                case constants.RA.statusKey.raDraft:
                    if (response.data.applicantProfileId !== $scope.userProfile.userProfileId) {
                        $state.go(constants.state.raList);
                    } else {
                        $state.go(constants.state.raEdit, { sceId: $stateParams.sceId, raId: $stateParams.raId });
                    }
                    break;
                case constants.RA.statusKey.raUpdateRequired:
                    {
                        if (response.data.applicantProfileId !== $scope.userProfile.userProfileId) {
                            $state.go(constants.state.raInfo, { sceId: $stateParams.sceId, raId: $stateParams.raId });
                        } else {
                            $state.go(constants.state.raUpdateRequired, { sceId: $stateParams.sceId, raId: $stateParams.raId });
                        }
                        break;
                    }
                case constants.RA.statusKey.raPendingReview:
                    $state.go(constants.state.raReview, { sceId: $stateParams.sceId, raId: $stateParams.raId });
                    break;
                case constants.RA.statusKey.raPendingEndorsement:
                    $state.go(constants.state.raEndorse, { sceId: $stateParams.sceId, raId: $stateParams.raId });
                    break;
                case constants.RA.statusKey.raPendingApproval:
                    $state.go(constants.state.raApprove, { sceId: $stateParams.sceId, raId: $stateParams.raId });
                    break;
                case constants.RA.statusKey.raApproved:
                    $state.go(constants.state.raInfo, { sceId: $stateParams.sceId, raId: $stateParams.raId });
                    break;
                case constants.RA.statusKey.raPendingMoc:
                case constants.RA.statusKey.raPendingMocApproval:
                case constants.RA.statusKey.raMocRequiresUpdate:
                case constants.RA.statusKey.raMoc:
                    {
                        $state.go(constants.state.raMOC, { sceId: $stateParams.sceId, raId: $stateParams.raId });
                        break;
                    }

            }
        };

        //Redirect site based on the corresponding function
        var onLoad = function (routeName) {
            // check bigModule
            $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";
            
            // end check
            switch (routeName) {
                case constants.state.raNew:
                    $rootScope.$app.title = constants.titlePage.raNew;
                    $scope.getInitialData();
                    break;
                case constants.state.raCopy:
                    $rootScope.$app.title = constants.titlePage.raNew;
                    $scope.getRACopyData();
                    break;
                case constants.state.raDetail:
                    $rootScope.isLoading = true;
                    raServices.getRABasic($stateParams.raId).then(function (response) {
                        $rootScope.isLoading = false;
                        if (response.data !== null && response.data !== undefined) {
                            $scope.redirectFunction(response, response.data.statusKey);
                        } else {
                            var option = {
                                id: "dialogInfo",
                                title: "Data Not Found",
                                lableClose: "CLOSE",
                                content: response.message,
                                width: 500
                            };
                            utils.dialog.showDialog(option, function () {
                                $state.go(constants.state.raList);
                            });
                        }
                    }, function (err) {
                        $rootScope.isLoading = false;
                        utils.error.showErrorGet(err);
                    });
                    break;
                case constants.state.raEdit:
                    $rootScope.$app.title = constants.titlePage.raUpdate;
                    $scope.getRADetailData(constants.RA.statusKey.raDraft);
                    break;
                case constants.state.raUpdateRequired:
                    $rootScope.$app.title = constants.titlePage.raUpdateRequired;
                    $scope.getRADetailData(constants.RA.statusKey.raUpdateRequired);
                    break;
                case constants.state.raReview:
                    $rootScope.$app.title = constants.titlePage.raReview;
                    $scope.getRADetailForWorkflow();
                    break;
                case constants.state.raEndorse:
                    $rootScope.$app.title = constants.titlePage.raEndorse;
                    $scope.getRADetailForWorkflow();
                    break;
                case constants.state.raApprove:
                    $rootScope.$app.title = constants.titlePage.raApprove;
                    $scope.getRADetailForWorkflow();
                    break;
                case constants.state.raInfo:
                    $rootScope.$app.title = constants.titlePage.raInfo;
                    $scope.getRADetailForWorkflow();
                    break;
                case constants.state.raMOC:
                    $rootScope.$app.title = constants.titlePage.raMOC;
                    $scope.getRADetailForWorkflow();
                    break;
                case constants.state.raPrint:
                    {
                        $rootScope.isLoading = true;
                        raServices.getRABasic($stateParams.raId).then(function (response) {
                            $scope.getRADetailForWorkflow();
                        },
                        function (err) {
                            $rootScope.isLoading = false;
                            utils.error.showErrorGet(err);
                        });
                        break;
                    }
            }
        };

        onLoad($state.current.name);
        // Discard button click event
        $scope.goToListPage = function (event) {
            event.preventDefault();
            $state.go(constants.state.raList);
        };
        // Open/Close Custom Dropdown (Vertical Dot)
        $(".dropdown_toggle").click(function (e) {
            $(this).parent().toggleClass("dd_open");
            e.stopPropagation();
        });

        // Close dropdown on click outside div
        $(document).on("click", function (e) {
            if ($(e.target).is(".dropdown_menu") === false) {
                $(".dd_block").removeClass("dd_open");
            }
        });

    }
]);
app.controller('raListController', ['$rootScope', '$state', '$scope', '$stateParams', '$location', '$timeout', 'authService', 'appSettings', 'raServices', 'statusService', 'areaService', 'riskService', 'constants',
function ($rootScope, $state, $scope, $stateParams, $location, $timeout, authService, appSettings, raServices, statusService, areaService, riskService, constants) {
    var isProcessTriggerClick = true;

    $scope.userProfile = $rootScope.$app.userProfile;

    $scope.isAdmin = $scope.userProfile.isAdmin;

    $scope.hasApplicantRole = ("," + $rootScope.$app.userProfile.rolesKeyString + ",").indexOf(",1,") >= 0;

    $rootScope.$app.title = constants.titlePage.raListing;
    var indexTab = 0;
    $scope.hide_item = "hide-item";

    $scope.totalMyRaListing = {
        totalMyRa: 0,
        totalPendingMyAction: 0
    };
    $scope.model = {
        view: "All",
        tagNo: "",
        status: "",
        filter: [{
            field: "",
            valueString: "",
            valueDateTimeFrom: "",
            valueDateTimeTo: "",
            valueDecimalFrom: "",
            valueDecimalTo: "",
            valueBit: "",
            isActive: false
        }],
        sort: [{
            field: "",
            asc: false,
            isActive: ""
        }],
        skip: 0,
        take: 0,
        isExport: false
    };

    onLoad = function () {
        // check bigModule
        $rootScope.bigModuleTitle = "Safety Critical Equipment (SCE)";

        // end check
        raServices.getTotalMyRaListing().then(function (response) {
            $scope.totalMyRaListing = {
                totalMyRa: response.data.totalMyRa,
                totalPendingMyAction: response.data.totalPendingMyAction
            };
        }, function (error) {
            utils.error.showErrorGet(error);
        });
    };
    onLoad();

    $scope.searchByTagNo = function (keyEvent) {
        if (keyEvent.which === 13)
            $scope.searchByTagNoClick();
    };

    $scope.searchByTagNoClick = function () {
        $scope.onChangeTab(indexTab);
    };

    $scope.defaultView = "All";

    $scope.resetModel = function () {
        $scope.model.view = "";
        $scope.model.status = "";
        $scope.model.filter = [];
        $scope.model.sort = [];
        $scope.model.skip = "";
        $scope.model.take = "";
        $scope.model.isExport = "";
    };

    $scope.areasDataSource = new kendo.data.DataSource({
        transport: {
            read: function (options) {
                areaService.getAllAreaIsActive().then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    });

    $scope.riskLevelDataSource = new kendo.data.DataSource({
        transport: {
            read: function (options) {
                riskService.getAllRiskLevel().then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    });

    $scope.statusDataSource = new kendo.data.DataSource({
        transport: {
            read: function (options) {
                statusService.getListStatusOfRa().then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (error) {
                    options.error([]);
                    utils.error.showErrorGet(error);
                });
            }
        }
    });

    $scope.initData = function (options) {
        kendo.ui.progress($('.ra-listing'), false);
        $scope.resetModel();
        var optionfilters = [];
        var filters = [
            {
                field: "applicationDate",
                valueDateTimeFrom: null,
                valueDateTimeTo: null,
                isActive: false
            },
            {
                field: "riskLevel",
                valueString: "",
                isActive: false
            },
            {
                field: "area",
                valueString: "",
                isActive: false
            },
            {
                field: "status",
                valueString: "",
                isActive: false
            },
            {
                field: "lapse",
                ValueDecimalFrom: null,
                isActive: false
            }
        ];
        if (options.data.filter !== null && options.data.filter !== undefined) {

            _.each(options.data.filter.filters, function (o) {
                var listFilterOut = [];
                utils.getfilter(o, listFilterOut);
                Array.prototype.push.apply(optionfilters, listFilterOut);
            });

            if (optionfilters !== null && optionfilters !== undefined) {
                _.each(optionfilters, function (m) {
                    var date = null;
                    switch (m.field) {
                        case "applicationDate":
                            if (m.operator === "gte") {
                                date = $.format.toBrowserTimeZone(m.value, constants.format.date.default);
                                filters[0].valueDateTimeFrom = date;
                                filters[0].isActive = true;
                            }
                            else {
                                date = $.format.toBrowserTimeZone(m.value, constants.format.date.default);
                                filters[0].valueDateTimeTo = date;
                                filters[0].isActive = true;
                            }
                            break;

                        case "riskLevel":
                            filters[1].valueString = filters[1].valueString + "," + m.value;
                            filters[1].isActive = true;
                            break;

                        case "area":
                            filters[2].valueString = filters[2].valueString + "," + m.value;
                            filters[2].isActive = true;
                            break;

                        case "status":
                            filters[3].valueString = filters[3].valueString + "," + m.value;
                            filters[3].isActive = true;
                            break;
                        case "lapse":
                            filters[4].ValueDecimalFrom = m.value;
                            filters[4].isActive = true;
                            break;
                        default:
                            var filterModel = {
                                field: m.field,
                                valueString: m.value,
                                isActive: true
                            };
                            filters.push(filterModel);
                            break;
                    }
                });
            }
            $scope.model.filter = filters;
        }
        if (options.data.sort !== null && options.data.sort !== undefined) {
            _.each(options.data.sort, function (o) {
                $scope.model.sort.push({
                    field: o.field,
                    asc: o.dir === 'asc',
                    isActive: true
                });
            });
        }
        $scope.model.view = $scope.defaultView;
        $scope.model.take = options.data.take;
        $scope.model.skip = (options.data.page - 1) * options.data.pageSize;
    };

    $rootScope.isLoading = true;
    $scope.isCalling = true;
    $scope.isFilter = 0;
    $scope.needToCallServer = 0;

    $scope.mainGridOptions = {
        dataSource: {
            transport: {
                read: function (options) {
                    if ($scope.isCalling) {
                        $rootScope.isLoading = true;

                        $scope.initData(options);

                        var isPreFilter = $rootScope.filterByArea !== null && $rootScope.filterByArea !== undefined && $rootScope.filterByArea.length > 0;

                        $scope.needToCallServer++;

                        if (isPreFilter && $scope.isFilter === 0) {
                            var ds = $(".ra-listing").data("kendoGrid").dataSource;
                            var currentFilter = [];
                            currentFilter.push({ field: "status", operator: "eq", value: $rootScope.filterByStatus });
                            _.each($rootScope.filterByArea, function (m) {
                                currentFilter.push({ field: "area", operator: "eq", value: m });
                            });
                            $scope.isFilter++;
                            ds.filter(currentFilter);
                        }

                        if (!isPreFilter || isPreFilter && $scope.needToCallServer === 2) {
                            raServices.getRaListing($scope.model).then(function (response) {
                                if (response.data !== null && response.data !== undefined) {
                                    options.success(response.data);

                                } else {
                                    options.success([]);
                                }

                                // reset value
                                $rootScope.filterByArea = null;
                                $rootScope.filterByStatus = '';
                                $rootScope.isLoading = false;
                            }, function (error) {
                                options.error([]);
                                utils.error.showErrorGet(error);
                                // reset value
                                $rootScope.filterByArea = null;
                                $rootScope.filterByStatus = '';

                                $rootScope.isLoading = false;
                            });
                        }
                        else {
                            options.success([]);
                            $('.ra-listing .k-grid-norecords-template').hide();
                        }
                    } else {
                        options.success([]);
                        $('.ra-listing .k-grid-norecords-template').hide();
                    }
                }
            },
            schema: {
                model: {
                    fields: {
                        area: { type: "string" },
                        tagNo: { type: "string" },
                        RaNo: { type: "string" },
                        reason: { type: "string" },
                        riskLevel: { type: "string" },
                        applicationDate: { type: "date" },
                        lapse: { type: "number", validation: { required: true, min: 0 } },
                        status: { type: "string" }
                    }
                },
                total: function (response) {
                    return response === null || response === undefined || response.length === 0 ? 0 : response[0].total;
                }
            },
            pageSize: 20,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true
        },
        scrollable: false,
        sortable: {
            mode: "multiple",
            allowUnsort: true
        },
        pageable: {
            pageSizes: true,
            buttonCount: 5
        },
        filterable: {
            extra: true,
            operators: {
                date: {
                    gte: "Start Date",
                    lte: "End Date"
                },
                string: {
                    operator: "contains"
                },
                number: {
                    operator: "eq"
                }
            }
        },
        filterMenuInit: function (e) {
            utils.filterMenuInit(e);
        },
        columns: [{
            field: "area",
            title: "Area",
            width: "70px",
            attributes: {
                "class": "cell_area"
            },
            filterable: {
                multi: true,
                dataSource: $scope.areasDataSource,
                itemTemplate: function (e) {
                    if (e.field === "all") {
                        return "<li class=\"select_all\"><label><input type='checkbox' /> <span>#= all#</span></label></li>";
                    } else {
                        return "<li><label><input type='checkbox' name='" + e.field + "' value='#=data.lookupAreaId#'/> <span>#= data.description #</span></label></li>";
                    }
                }
            }
        }, {
            field: "tagNo",
            title: "Tag No.",
            width: "93px",
            attributes: {
                "class": "cell_tag_no"
            },
            filterable: {
                extra: false
            }
        }, {
            field: "raNo",
            title: "RA No.",
            width: "200px",
            attributes: {
                "class": "cell_ra_no"
            },
            filterable: {
                extra: false
            }
        }, {
            field: "reason",
            title: "Reason",
            filterable: {
                extra: false
            },
            attributes: {
                "class": "cell_reason"
            }
        }, {
            field: "riskLevel",
            title: "Risk Identification",
            width: "140px",
            attributes: {
                "class": "cell_risk_level"
            },
            filterable: {
                multi: true,
                dataSource: $scope.riskLevelDataSource,
                itemTemplate: function (e) {
                    if (e.field === "all") {
                        return "<li class=\"select_all\"><label><input type='checkbox' /> <span>#= all#</span></label></li>";
                    } else {
                        return "<li><label><input type='checkbox' name='" + e.field + "' value='#=data.value#'/> <span>#= data.description #</span></label></li>";
                    }
                }
            },
            template: function (dataItem) {
                var retVal = "";
                switch (dataItem.riskLevel) {
                    case "1":
                        retVal = "<strong class='text-light-green'>" + dataItem.riskLevelDescription + "</strong>";
                        break;
                    case "2":
                        retVal = "<strong class='text-yellow'>" + dataItem.riskLevelDescription + "</strong>";
                        break;
                    case "3":
                        retVal = "<strong class='text-orange'>" + dataItem.riskLevelDescription + "</strong>";
                        break;
                    case "4":
                        retVal = "<strong class='text-red'>" + dataItem.riskLevelDescription + "</strong>";
                        break;
                    default:
                        retVal = "N/A";
                        break;
                }
                return retVal;
            }
        }, {
            field: "applicationDate",
            title: "SCE Application Date",
            width: "200px",
            format: "{0:dd MMM yyyy}",
            attributes: {
                "class": "cell_application_date"
            },
            filterable: {
                ui: "datepicker"
            }
        }, {
            field: "lapse",
            title: "Lapse",
            width: "85px",
            attributes: {
                "class": "cell_lapse"
            },
            filterable: {
                extra: false
            },
            template: '#:lapse# days'
        }, {
            field: "status",
            title: "Status",
            width: "300px",
            attributes: {
                "class": "cell_live"
            },
            filterable: {
                multi: true,
                dataSource: $scope.statusDataSource,
                itemTemplate: function (e) {
                    if (e.field === "all") {
                        return "<li class=\"select_all\"><label><input type='checkbox' /> <span>#= all#</span></label></li>";
                    } else {
                        return "<li><label><input type='checkbox' name='" + e.field + "' value='#=data.statusKey#'/> <span>#= data.description #</span></label></li>";
                    }
                }
            },
            template: function (dataItem) {
                var retVal = "";
                switch (dataItem.statusKey) {
                    case "11":
                        retVal = "<strong class='text-grey'>" + dataItem.status + "</strong>";
                        break;
                    case "12":
                    case "13":
                    case "14":
                    case "15":
                    case "16":
                    case "17":
                    case "19":
                        retVal = "<strong class='text-light-orange'>" + dataItem.status + "</strong>";
                        break;
                    case "18":
                    case "20":
                        retVal = "<strong class='text-green'>" + dataItem.status + "</strong>";
                        break;
                }

                var canTransferRole = $scope.isAdmin && (dataItem.statusKey === "12" || dataItem.statusKey === "13" || dataItem.statusKey === "14" || dataItem.statusKey === "16");
                var isDraft = dataItem.statusKey === "11";

                retVal += "\n\r<button class=\"btn-grid-item-menu\" type=\"button\" data-ng-click=\"openItemMenu($event)\"><i class=\"icon-dot-3 icon-btn-grid-item-menu\"></i></button>" +
                        "<ul class=\"grid-item-menu\" data-id='" + dataItem.raId + "' style=\"display: none; background-color: #fff; border: 1px solid #ccc;\" >" +
                            "<li><a href=\"#\" data-ng-click=\"viewDetail('" + dataItem.sceId + "','" + dataItem.raId + "')\">View</a></li>" +
                            "<li><a data-ng-class=\"" + (canTransferRole ? '' : 'hide_item') + "\"  href=\"#\" data-ng-click =\"showTransferRolesKendoDiaglog('" + dataItem.sceId + "','" + dataItem.raId + "')\">Transfer Roles...</a></li>" +
                            "<li><a href=\"#\" data-ng-click=\"statusLog('" + dataItem.sceId + "','" + dataItem.raId + "')\">Status Log</a></li>" +
                            "<li><a data-ng-class=\"" + (!isDraft ? '' : 'hide_item') + "\" href=\"#\" data-ng-click = \"raPrint('" + dataItem.sceId + "','" + dataItem.raId + "')\">Print</a></li>" +
                            "<li><a href=\"#\" data-ng-click=\"" + (($scope.isAdmin || ($scope.userProfile.userProfileId === dataItem.applicantId && $scope.hasApplicantRole)) && (dataItem.statusKey == '16' || dataItem.statusKey == '17') ? 'cancelMOC(\'' + dataItem.sceId + "','" + dataItem.raId + '\')' : '') + "\" data-ng-class=\"" + (($scope.isAdmin || ($scope.userProfile.userProfileId === dataItem.applicantId && $scope.hasApplicantRole)) && (dataItem.statusKey == '16' || dataItem.statusKey == '17') ? '' : 'hide_item') + "\">Cancel MOC</a></li>" +
                            "<li><a href=\"#\" data-ng-click=\"" + (($scope.userProfile.userProfileId === dataItem.applicantId && $scope.hasApplicantRole || $scope.isAdmin) && dataItem.statusKey !== '20' ? 'cancelRA(\'' + dataItem.sceId + "','" + dataItem.raId + '\')' : '') + "\" data-ng-class=\"" + (($scope.userProfile.userProfileId === dataItem.applicantId && $scope.hasApplicantRole || $scope.isAdmin) && dataItem.statusKey !== '20' ? '' : 'hide_item') + "\">Cancel RA</a></li>" +
                        "</ul>";
                return retVal;
            }
        }],
        noRecords: true,
        messages: {
            noRecords: "There is no data on current page"
        },
        toolbar: [{
            template: "<kendo-tabstrip>" +
                            "<ul>" +
                                "<li data-ng-click=\"onChangeTab(0)\" class=\"k-state-active\">All</li>" +
                                "<li data-ng-click=\"onChangeTab(1)\">My RA <small>({{totalMyRaListing.totalMyRa}})</small></li>" +
                                "<li data-ng-click=\"onChangeTab(2)\">Pending My Action <small>({{totalMyRaListing.totalPendingMyAction}})</small></li>" +
                            "</ul>" +
                        "</kendo-tabstrip>"
        }],
        selectable: "row",
        change: function (e) {
            e.preventDefault();
            var dataItem = this.dataItem(this.select());
            $state.go(constants.state.raDetail, { sceId: dataItem.sceId, raId: dataItem.raId });
        }
    };

    $scope.raPrint = function (sceId, raId) {
        window.open('/print/ra/' + sceId + '/' + raId, '_blank');
    };

    $scope.cancelRA = function (sceId, raId) {
        $scope.confirmDialog("RA Cancel", "Are you sure you want to cancel this RA?").then(function () {
            $rootScope.isLoading = true;
            raServices.cancelRA(sceId, raId).then(function (response) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogInfo",
                    title: "RA Cancelled",
                    lableClose: "CLOSE",
                    content: "RA Form has been cancelled successfully",
                    width: 300
                };
                utils.dialog.showDialog(option, function () {
                    $rootScope.isLoading = true;
                    $('#raListingGrid').data('kendoGrid').dataSource.read();
                    onLoad();
                    $rootScope.isLoading = false;
                });
            }, function (error) {
                $rootScope.isLoading = false;
                var option = {
                    id: "dialogInfo",
                    title: "RA Cancelled Failed",
                    lableClose: "CLOSE",
                    content: error.message,
                    width: 300
                };
                utils.dialog.showDialog(option, function () {
                });
            });
        }, function () {
            // Choosed cancel, do nothing
        });
    };

    $scope.cancelMocConfirmDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content,
            actions: [{ text: "CANCEL MOC", primary: true },
                { text: "CANCEL" }]
        }).data("kendoConfirm").open().result;
    };
    //Cancel MOC by admin   
    $scope.cancelMOC = function (sceId, raId) {
        $scope.cancelMocConfirmDialog("Cancel MOC", "Are you sure to cancel MOC?").then(function () {
            raServices.cancelMOC(sceId, raId).then(function (response) {
                var option = {
                    id: "dialogInfo",
                    title: "MOC Cancelled",
                    lableClose: "CLOSE",
                    content: "This MOC is cancelled",
                    width: 500
                };
                utils.dialog.showDialog(option, function () {
                    $state.go(constants.state.raList);
                });
            }, function (error) {
                var option = {
                    id: "dialogInfo",
                    title: "RA is Cancelled Failed",
                    lableClose: "CLOSE",
                    content: error.message,
                    width: 500
                };
                utils.dialog.showDialog(option, function () {
                });
            });
        }, function () {
            // Choosed cancel, do nothing
        });
    };
    //#region funtions for 3 dots button group

    $scope.viewDetail = function (sceId, raId) {
        $state.go(constants.state.raDetail, { sceId: sceId, raId: raId });
    };
    //go to log' page
    $scope.statusLog = function (sceId, id) {
        $state.go(constants.state.raStatusLog, { sceId: sceId, raId: id });
    }

    //#endregion

    $scope.onChangeTab = function (index) {
        indexTab = index;
        var grid = $(".ra-listing").data("kendoGrid");

        $scope.isCalling = false;
        // clear filter
        grid.dataSource.sort({});
        grid.dataSource.filter({});

        switch (index) {
            case 0:
                $scope.defaultView = "All";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
            case 1:
                $scope.defaultView = "MyRa";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
            case 2:
                $scope.defaultView = "PendingMyAction";
                $scope.isCalling = true;
                grid.dataSource.read();
                break;
        }
    };

    $scope.openItemMenu = function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        var itemMenu = $(e.target).closest("td").find(".grid-item-menu");
        _.each($('.grid-item-menu'), function (item) {
            if ($(item).attr("data-id") !== $(itemMenu).attr("data-id")) {
                $(item).hide();
            }
            else {
                $(itemMenu).slideToggle();
            }
        });
    };

    $scope.confirmDialog = function (title, content) {
        return $("<div></div>").kendoConfirm({
            title: title,
            content: content
        }).data("kendoConfirm").open().result;
    };

    //#region Transfer Roles
    $scope.facilitatorSearchText = "";

    $scope.facilitatorDataSource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                raServices.getRAFacilitors($scope.facilitatorSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (err) {
                    options.error([]);
                    utils.error.showErrorGet(err);
                });
            }
        }
    };

    $scope.endorserSearchText = "";

    $scope.endorserDataSource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                raServices.getRAEndorsers($scope.endorserSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (err) {
                    options.error([]);
                    utils.error.showErrorGet(err);
                });
            }
        }
    };

    $scope.approverSearchText = "";

    $scope.approverDataSource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                raServices.getRAApprovers($scope.approverSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (err) {
                    options.error([]);
                    utils.error.showErrorGet(err);
                });
            }
        }
    };

    $scope.mocApproverSearchText = "";

    $scope.mocApproverDataSource = {
        serverFiltering: true,
        transport: {
            read: function (options) {
                raServices.getMocApprovers($scope.mocApproverSearchText).then(function (response) {
                    if (response.data !== null && response.data !== undefined) {
                        options.success(response.data);
                    } else {
                        options.success([]);
                    }
                }, function (err) {
                    options.error([]);
                    utils.error.showErrorGet(err);
                });
            }
        }
    };

    $scope.pendingReview = false;
    $scope.pendingEndorse = false;
    $scope.pendingApprove = false;
    $scope.pendingMOCApproval = false;
    $scope.reviewerToTransfer = null;
    $scope.backupReviewer = null;
    $scope.endorserToTransfer = null;
    $scope.backupEndorser = null;
    $scope.approverToTransfer = null;
    $scope.mocApproverToTransfer = null;
    $scope.backupMOCApprover = null;
    $scope.adminComment = "";
    $scope.backupApprover = null;

    $scope.reviewerIsTransfered = false;
    $scope.endorserIsTransfered = false;
    $scope.approverIsTransfered = false;
    $scope.mocApproverIsTransfered = false;
    $scope.transferRolesModel = null;

    $scope.transferResultActions = [{
        text: 'CLOSE',
        action: function () {
            $state.go(constants.state.raList);
        }
    }];

    $scope.raTransferRoles = [
            { text: 'CANCEL' },
            {
                text: 'CONFIRM',
                action: function () {

                    if (!isProcessTriggerClick) {
                        return false;
                    }
                    isProcessTriggerClick = false;

                    if (!$scope.validators.raTransfer.validate()) {
                        isProcessTriggerClick = true;
                        return;
                    }
                    $scope.transferRolesModel = {
                        reviewerProfileId: $scope.pendingReview && $scope.reviewerToTransfer.userProfileId !== $scope.backupReviewer.userProfileId && $scope.reviewerToTransfer.userProfileId !== "" ? $scope.reviewerToTransfer.userProfileId : null,
                        endorserProfileId: $scope.pendingEndorse && $scope.endorserToTransfer.userProfileId !== $scope.backupEndorser.userProfileId && $scope.endorserToTransfer.userProfileId !== "" ? $scope.endorserToTransfer.userProfileId : null,
                        approverProfileId: $scope.pendingApprove && $scope.approverToTransfer.userProfileId !== $scope.backupApprover.userProfileId && $scope.approverToTransfer.userProfileId !== "" ? $scope.approverToTransfer.userProfileId : null,
                        mocApproverProfileId: $scope.pendingMOCApproval && $scope.mocApproverToTransfer.userProfileId !== $scope.backupMOCApprover.userProfileId && $scope.mocApproverToTransfer.userProfileId !== "" ? $scope.mocApproverToTransfer.userProfileId : null,
                        comment: $scope.adminComment
                    };
                    if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && ($scope.transferRolesModel.reviewerProfileId === null || $scope.transferRolesModel.reviewerProfileId === undefined) && ($scope.transferRolesModel.endorserProfileId === null || $scope.transferRolesModel.endorserProfileId === undefined) && ($scope.transferRolesModel.approverProfileId === null || $scope.transferRolesModel.approverProfileId === null) && ($scope.transferRolesModel.mocApproverProfileId === null || $scope.transferRolesModel.mocApproverProfileId === null)) {
                        isProcessTriggerClick = true;
                        return true;
                    }
                    $rootScope.isLoading = true;
                    isProcessTriggerClick = true;
                    raServices.transferRoles($scope.transferSceId, $scope.transferRaId, $scope.transferRolesModel).then(function (response) {
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.reviewerProfileId !== null && $scope.transferRolesModel.reviewerProfileId !== undefined) {
                            $scope.reviewerIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.endorserProfileId !== null && $scope.transferRolesModel.endorserProfileId !== undefined) {
                            $scope.endorserIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.approverProfileId !== null && $scope.transferRolesModel.approverProfileId !== undefined) {
                            $scope.approverIsTransfered = true;
                        }
                        if ($scope.transferRolesModel !== null && $scope.transferRolesModel !== undefined && $scope.transferRolesModel.mocApproverProfileId !== null && $scope.transferRolesModel.mocApproverProfileId !== undefined) {
                            $scope.mocApproverIsTransfered = true;
                        }
                        $rootScope.isLoading = false;
                        $scope.transferResultDialog.open();
                        $('#raListingGrid').data('kendoGrid').dataSource.read();
                        onLoad();
                    }, function (err) {
                        $rootScope.isLoading = false;
                        var option = {
                            id: "dialogInfo",
                            title: "RA Roles Transferred failed.",
                            lableClose: "CLOSE",
                            content: err.message,
                            width: 500
                        };
                        utils.dialog.showDialog(option, function () {
                        });
                    });
                    return true;
                },
                primary: true
            }
    ];

    $scope.transferSceId = "";
    $scope.transferRaId = "";

    $scope.showTransferRolesKendoDiaglog = function (sceId, raId) {
        $scope.transferSceId = sceId;
        $scope.transferRaId = raId;
        $rootScope.isLoading = true;
        raServices.getPendingPerson(sceId, raId).then(function (response) {
            $rootScope.isLoading = false;
            if (response.data !== null && response.data !== undefined) {
                var statusKey = response.data.statusKey;
                switch (statusKey) {
                    case constants.RA.statusKey.raPendingReview:
                        {
                            $scope.pendingReview = true;
                            $scope.pendingEndorse = false;
                            $scope.pendingApprove = false;
                            $scope.pendingMOCApproval = false;
                            $scope.reviewerToTransfer = {
                                userProfileId: response.data.userProfileId,
                                userId: response.data.userId,
                                userName: response.data.userName,
                                position: response.data.position,
                                image: response.data.image
                            };
                            $scope.backupReviewer = $scope.reviewerToTransfer;

                            $scope.endorserToTransfer = null;
                            $scope.approverToTransfer = null;
                            $scope.mocApproverToTransfer = null;
                            $scope.facilitatorOptions = {
                                optionLabel: "Select Facilitator",
                                filter: "contains",
                                filtering: function (e) {
                                    $scope.facilitatorSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                                },
                                dataSource: $scope.facilitatorDataSource,
                                dataTextField: "userName",
                                dataValueField: "userProfileId",
                                valueTemplate: function (dataItem) {
                                    if (!dataItem.hasOwnProperty('image')) {
                                        dataItem.image = $scope.reviewerToTransfer.image;
                                    }
                                    return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                                },
                                template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                            };
                            break;
                        }
                    case constants.RA.statusKey.raPendingEndorsement:
                        {
                            $scope.pendingReview = false;
                            $scope.pendingEndorse = true;
                            $scope.pendingApprove = false;
                            $scope.pendingMOCApproval = false;
                            $scope.endorserToTransfer = {
                                userProfileId: response.data.userProfileId,
                                userId: response.data.userId,
                                userName: response.data.userName,
                                position: response.data.position,
                                image: response.data.image
                            };
                            $scope.backupEndorser = $scope.endorserToTransfer;
                            $scope.reviewerToTransfer = null;
                            $scope.approverToTransfer = null;
                            $scope.mocApproverToTransfer = null;
                            $scope.endorsersOptions = {
                                optionLabel: "Select Endorser",
                                filter: "contains",
                                filtering: function (e) {
                                    $scope.endorserSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                                },
                                dataSource: $scope.endorserDataSource,
                                dataTextField: "userName",
                                dataValueField: "userProfileId",
                                valueTemplate: function (dataItem) {
                                    if (!dataItem.hasOwnProperty('image')) {
                                        dataItem.image = $scope.endorserToTransfer.image;
                                    }
                                    return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                                },
                                template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                            };
                            break;
                        }
                    case constants.RA.statusKey.raPendingApproval:
                        {
                            $scope.pendingReview = false;
                            $scope.pendingEndorse = false;
                            $scope.pendingApprove = true;
                            $scope.pendingMOCApproval = false;
                            $scope.approverToTransfer = {
                                userProfileId: response.data.userProfileId,
                                userId: response.data.userId,
                                userName: response.data.userName,
                                position: response.data.position,
                                image: response.data.image
                            };
                            $scope.backupApprover = $scope.approverToTransfer;

                            $scope.reviewerToTransfer = null;
                            $scope.endorserToTransfer = null;
                            $scope.mocApproverToTransfer = null;
                            $scope.approversOptions = {
                                optionLabel: "Select Approver",
                                filter: "contains",
                                filtering: function (e) {
                                    $scope.approverSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                                },
                                dataSource: $scope.approverDataSource,
                                dataTextField: "userName",
                                dataValueField: "userProfileId",
                                valueTemplate: function (dataItem) {
                                    if (!dataItem.hasOwnProperty('image')) {
                                        dataItem.image = $scope.approverToTransfer.image;
                                    }
                                    return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                                },
                                template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                            };
                            break;
                        }
                    case constants.RA.statusKey.raPendingMocApproval:
                        {
                            $scope.pendingReview = false;
                            $scope.pendingEndorse = false;
                            $scope.pendingApprove = false;
                            $scope.pendingMOCApproval = true;

                            $scope.reviewerToTransfer = null;
                            $scope.endorserToTransfer = null;
                            $scope.approverToTransfer = null;
                            $scope.mocApproverToTransfer = {
                                userProfileId: response.data.userProfileId,
                                userId: response.data.userId,
                                userName: response.data.userName,
                                position: response.data.position,
                                image: response.data.image
                            }
                            $scope.backupMOCApprover = $scope.mocApproverToTransfer;

                            $scope.mocApproversOptions = {
                                optionLabel: "Select MOC Approver",
                                filter: "contains",
                                filtering: function (e) {
                                    $scope.mocApproverSearchText = e.filter === null || e.filter === undefined ? "" : e.filter.value;
                                },
                                dataSource: $scope.mocApproverDataSource,
                                dataTextField: "userName",
                                dataValueField: "userProfileId",
                                valueTemplate: function (dataItem) {
                                    if (!dataItem.hasOwnProperty('image')) {
                                        dataItem.image = $scope.mocApproverToTransfer.image;
                                    }
                                    return '<span class="selected-value" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span><span>{{dataItem.userName}}</span>';
                                },
                                template: '<div class="custom-dropdown"><span class="k-state-default" data-ng-style="{\'background-image\' : \'url(data:image/jpg;base64,{{dataItem.image}})\'}"></span>' +
                            '<span class="k-state-default"><h3>{{dataItem.userName}}</h3></span></div>'
                            };
                            break;
                        }
                    default:
                        {
                            $scope.pendingReview = false;
                            $scope.pendingEndorse = false;
                            $scope.pendingApprove = false;
                            $scope.pendingMOCApproval = false;
                            $scope.reviewerToTransfer = null;
                            $scope.endorserToTransfer = null;
                            $scope.approverToTransfer = null;
                            $scope.mocApproverToTransfer = null;
                            break;
                        }
                }
                if ($scope.pendingReview || $scope.pendingEndorse || $scope.pendingApprove || $scope.pendingMOCApproval) {
                    $scope.transferRolesKendoDiaglog.center();
                    $scope.transferRolesKendoDiaglog.open();
                }
            }
        }, function (err) {
            $rootScope.isLoading = false;
            utils.error.showErrorGet(err);
        });
    };
    //#endregion
}]);