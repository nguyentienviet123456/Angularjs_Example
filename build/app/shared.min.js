var serviceBase = 'http://localhost:8888/';
var pathSingleSignOn = "http://10.14.68.12:8090/";

app.constant('appSettings', {
    apiServiceBaseUri: serviceBase,
    client: '6c7a1dc3-053b-43d7-bd79-c8ece35abf09',
    timeOut: 15
});

app.constant('constants', {
    singleSignOn: {
        id: "A0745833-43CE-4CAA-A24D-1F1F7896472F",
        applicationId: "A0745833-43CE-4CAA-A24D-1F1F7896472F",
        login: pathSingleSignOn + "api/Web/Auth/Login",
        logout: pathSingleSignOn + "api/Logout",
        domains: pathSingleSignOn + "api/Domains",
        signOn: pathSingleSignOn + "api/SignOn",
        disabled: true
    },
    autoReloadSetting: {
        mode: false,
        delay: 15
    },
    linkApp: {
        ios: "https://i.diawi.com/pHnAwU",
        android: "https://i.diawi.com/TnUXBy"
    },
    loginApp:
    {
        login: serviceBase + "login"
    },
    localStorage:
    {
        accessToken: "accessTokenSingleSignOn",
        logined: "logined",
        userSecret: "userSecret",
        userProfile: "userProfile",
        timeOld: "timeOld"
    },
    state: {
        default: "default",
        downloadApp: "downloadApp",
        login: "login",
        accessdenied: "accessdenied",
        scelist: "scelist",
        landing: "landing",
        scenew: "scenew",
        scecopynew: "scecopynew",
        sceedit: "sceedit",
        sceupdaterequire: "sceupdaterequire",
        scereview: "scereview",
        reviewupdaterequire: "reviewupdaterequire",
        sceendorse: "sceendorse",
        sceapprove: "sceapprove",
        sceacknowledge: "sceacknowledge",
        scelive: "scelive",
        scenormalized: "scenormalized",
        scedetail: "scedetail",
        scePrint: "sceprint",
        raNew: "ranew",
        raDetail: "radetail",
        raEdit: "raedit",
        raUpdateRequired: "raUpdateRequired",
        raReview: "raReview",
        raEndorse: "raEndorse",
        raApprove: "raApprove",
        raInfo: "raInfo",
        raMOC: "raMOC",
        raList: "ralist",
        raPrint: "raprint",
        manageUser: "manageuser",
        sceDashBoard: "scedashboard",
        newUser: "newuser",
        raCopy: "raCopy",
        editUser: "edituser",
        myProfile: "myprofile",
        profile: "profile",
        messageBox: "messagebox",
        adminMessage: "adminmessage",
        raStatusLog: "raStatusLog",
        sceStatusLog: "sceStatusLog",
        notification: "notification",
        notificationList: "notificationList",
        sceViewFile: "sceViewFile",
        asmDetail: "asmDetail",
        requireUpdateMOC: "asmRequiredUpdate",
        asmDashBoard: "asmdashboard",
        asmNewState: "asmNew",
        asmEditDraft: "asmEditDraft",
        asmRequiresUpdate: "asmRequiresUpdate",
        asmendorse: "asmendorse",
        asmlive: "asmlive",
        asmshelving: "asmshelving",
        asmclose: "asmclose",
        asmlist: "asmlist",
        asmCopy: "asmCopy",
        asmStatusLog: "asmStatusLog",
        asmPrint: "asmprint",
        diDashBoard: "didashboard",
        diList: "dilist",
        diNew: "dinew",
        rotfDashboard: "rotfdashboard",
        rotfDashboardOverview: "rotfdashboard.overview",
        rotfDashboardOperation: "rotfdashboard.operation"
    },
    allowAccess: {
        allowRead: "allowRead",
        allowWrite: "allowWrite",
        allowDelete: "allowDelete"
    },
    menu: {
        rotfDashboard: "RotfDashBoard",
        sceDashBoard: "SceDashBoard",
        sceNew: "SceNew",
        sceList: "SceList",
        manageUser: "ManageUser",
        admin: "admin",
        raList: "RaList",
        manageMessage: "manageMessage",
        asmDashBoard: "AsmDashBoard",
        asmNew: "AsmNew",
        asmList: "AsmList",
        diDashBoard: "DiDashBoard",
        diList: "DiList",
        diNew: "DiNew",
        default: "default"
    },
    module: {
        sce: "SCE",
        ra: "RA",
        asm: "ASM",
        di: "DI"
    },
    format: {
        date: {
            default: "MM/dd/yyyy",
            mmddyyyyHHmm: "MM/dd/yyyy HH:mm",
            ddMMMyyyyhhmma: "dd MMM yyyy hh:mm a"
        }
    },
    messages: {
        error: "An error occured while processing",
        networkError: "Network Connect Error",
        invalidEnterprise: "Invalid enterprise ID or password"
    },
    titlePage: {
        downloadApp: "ROTF Application",
        login: "Login",
        SceDashBoard: "SCE DashBoard",
        sceNew: "New SCE",
        sceCopyNew: "Copy new SCE",
        raListing: "RA Listing",
        raNew: "New RA",
        raUpdateRequired: "RA Update Required",
        raUpdate: "RA Update",
        raDetail: "Detail RA",
        raReview: "Review RA",
        raEndorse: "Endorse RA",
        raApprove: "Approve RA",
        raInfo: "Risk Assessment",
        raMOC: "MOC",
        sceListing: "SCE Listing",
        manageUser: "Manage User",
        newUser: "New User",
        editUser: "Update User",
        myProfile: "My Profile",
        profile: "User Profile",
        adminMessage: "Messages",
        statusLog: "Status's Logs",
        notification: "Notifications",
        notificationList: "All Notification",
        asm_detail: "ASM Details",
        requireUpdateMOC: "MOC Update Require",
        AsmDashBoard: "ASM DashBoard",
        asmListing: "ASM Listing",
        asmNew: "ASM New",
        diDashBoard: "DI DashBoard"
    },
    DI: {
        getHseIssue: serviceBase + 'Asm/GetHseIssue',
        getCopSol: serviceBase + 'Asm/GetCopSol'
    },
    SCE: {
        getPendingPeopleForTransferingRoles: serviceBase + "SCE/GetPeopleForTransferingRole/{0}",
        insertSce: serviceBase + "sce",
        transferSce: serviceBase + "sce/{0}/transfersce",
        getPreData: serviceBase + "sce/predataforcreate?controlName={0}&parentId={1}&keyword={2}",
        getApplicantsForTransfer: serviceBase + "sce/{0}/getapplicantstotransfer?keyword={1}",
        getSceListing: serviceBase + "sce/list",
        getSceListingToday: serviceBase + "sce/today",
        getSceDetail: serviceBase + "sce/{0}/detail",
        cancelSce: serviceBase + "sce/{0}",
        reviewSce: serviceBase + "sce/{0}/review",
        endorseSce: serviceBase + "sce/{0}/endorse",
        approveSce: serviceBase + "sce/{0}/approve",
        GetPTWListing: serviceBase + "sce/{0}/ptw",
        AddNewPTW: serviceBase + "sce/{0}/ptw",
        UpdatePTW: serviceBase + "sce/{0}/ptw",
        DeletePTW: serviceBase + "sce/{0}/ptw",
        acknowledgeSce: serviceBase + "sce/{0}/acknowledge",
        getTotalMySceListing: serviceBase + "sce/getTotalMySceListing",
        editSce: serviceBase + "sce/{0}/edit",
        normalizeSce: serviceBase + "sce/{0}/normalize",
        getSceExtApproval: serviceBase + "sce/approvalExtension",
        getSceAcknowledgeSchedule: serviceBase + "sce/reacknowledge",
        getAllUnit: serviceBase + "sce/getallunit",
        getAllTag: serviceBase + "sce/getallscetag",
        getUnitByAreaId: serviceBase + "sce/{0}/getunitbyareaid",
        getUnitByAreaIdAndStatus: serviceBase + "sce/{0}/getunitbyareaid/{1}",
        getTagNoByUnitId: serviceBase + "sce/{0}/getscetagbyunitid",
        getTagNoByUnitIdAndStatus: serviceBase + "sce/{0}/getscetagbyunitid/{1}",
        getSilIdByTagId: serviceBase + "sce/{0}/getSilIdByTagId",
        getScePendingInDashboard: serviceBase + "scedashboard/getscependingactionforscedashboard",
        getRaPendingInDashBoard: serviceBase + "scedashboard/getrapendingactionforscedashboard",
        getScePrintingDetail: serviceBase + "sce/{0}/getsceprintingdetail",
        sceTransferRoles: serviceBase + "sce/{0}/TransferRoles",
        getSCELog: serviceBase + "log/getlogsbysceid",
        getSceCopy: serviceBase + "sce/{0}/copy",
        uploadFiles: serviceBase + "sce/{0}/uploadfiles/{1}",
        getUploadedFiles: serviceBase + "SCE/{0}/GetListFile",
        viewFile: serviceBase + "SCE/{0}/viewFile/{1}",
        exportFile: serviceBase + "SCE/Export",
        approverTranser: serviceBase + "sce/{0}/approverTransfer"
    },
    SCEDashBoard: {
        getSCEDashBoard: serviceBase + "SCEDashBoard",
        getActiveAreas: serviceBase + "SCEDashBoard/Areas",
        getSubscribedAreas: serviceBase + "SCEDashBoard/GetSubscribedAreas",
        getSceLiveStatistic: serviceBase + "SCEDashBoard/GetSceLiveStatistic" 
    },
    ASMDashBoard: {
        getASMDashBoard: serviceBase + "AsmDashBoard",
        getActiveAreas: serviceBase + "AsmDashBoard/Areas",
        getSubscribedAreas: serviceBase + "AsmDashBoard/GetSubscribedAreas",
        getEEMUAData: serviceBase + "AsmDashBoard/GetEEMUA/{0}",
        saveEEMUAData: serviceBase + "AsmDashBoard/UpdateEEMUA/{0}",
        getAsmPendingInDashboard: serviceBase + "Asmdashboard/GetAsmPendingActionForAsmDashBoard"
    },
    ASM: {
        getPendingPeopleForTransferingRoles: serviceBase + "ASM/GetPeopleForTransferingRole/{0}",
        shelveASM: serviceBase + "ASM/ShelvingAlarm/{0}",
        closeASM: serviceBase + "ASM/CloseAlarmShelving/{0}",
        getASMMOCApprovers: serviceBase + "MasterData/GetASMMOCApprovers?keyword={0}",
        submitMOC: serviceBase + "ASM/{0}/SubmitMoc",
        listAsm: serviceBase + "asm/listing",
        totalMyPendingAsm: serviceBase + "asm/totalmypendingAsm",
        creatAsm: serviceBase + "Asm/Create",
        editAsm: serviceBase + "Asm/EditDraft/{0}",
        requiresUpdateAsm: serviceBase + "Asm/ApplicantUpdateRequire/{0}",
        getAreas: serviceBase + "MasterData/GetAreas",
        getUnitByArea: serviceBase + "MasterData/GetUnitsByAreaId?areaId={0}",
        getTagNoByUnit: serviceBase + "MasterData/GetTagsByUnitForASM?unitId={0}",
        getAlarmClasses: serviceBase + "MasterData/GetAlarmClasses",
        getAlarmTypes: serviceBase + "MasterData/GetAlarmTypes",
        getAsmReviewers: serviceBase + "MasterData/GetASMReviewers?keyword={0}",
        cancelAsm: serviceBase + "asm/{0}/Cancel",
        getAsmDetail: serviceBase + "Asm/Detail/{0}",
        reviewAsm: serviceBase + "ASM/{0}/Review",
        endorseAsm: serviceBase + "ASM/{0}/Endorse",
        approveAsm: serviceBase + "asm/{0}/Approve",
        asmTransferRoles: serviceBase + "asm/{0}/TransferRoles",
        transferAsm: serviceBase + "ASM/{0}/TransferASM",
        cancelMOC: serviceBase + "asm/{0}/MocCancel",
        requireUpdateMOC: serviceBase + "asm/{0}/RequiReUpdateMoc",
        approveMoc: serviceBase + "asm/{0}/ApproveMoc",
        getAlarmClosureReason: serviceBase + "MasterData/GetAlarmClosureReason",
        statusKey: {
            application: "21",
            requiresUpdate: "22",
            pendingEndorse: "23",
            pendingReview: "24",            
            pendingApproval: "25",            
            pendingShelving: "26",
            live: "28",
            closed: "30",
            pendingMoc: "31",
            pendingMocApproval: "32",
            requireMocUpdate: "33",            
            moc: "34"            
        },
        getApplicants: serviceBase + "MasterData/GetASMApplicant?keyword={0}",
        getApplicantsForTransfer: serviceBase + "MasterData/GetASMApplicantForTransfering/{0}/?keyword={1}",
        getEndorsers: serviceBase + "MasterData/GetASMEndorsers?keyword={0}",
        getApprovers: serviceBase + "MasterData/GetASMApprovers?keyword={0}",
        getReviewers: serviceBase + "MasterData/GetASMReviewers?keyword={0}",
        getAsmCopy: serviceBase + "ASM/{0}/Copy",
        getAsmLog: serviceBase + "log/getlogsbyasmid",
        getAsmApprovalExtension: serviceBase + "ASM/ApprovalExtension",
        getAsmReShelvingSchedule: serviceBase + "ASM/ReShelvingSchedule",
        getPreData: serviceBase + "ASM/predataforcreate?controlName={0}&parentId={1}&keyword={2}",
        reApproveAsm: serviceBase + "ASM/{0}/ReApprove",
        reShelveAsm: serviceBase + "ASM/{0}/ReShelving",
        getAsmPrintingDetail: serviceBase + "asm/{0}/getasmprintingdetail"
    },
    ROTF: {
        getNPAT: serviceBase + 'RoTF/GetNPAT',
        getOEE: serviceBase + 'RoTF/GetOEE',
        getGoodDaySummary: serviceBase + 'RoTF/GetGoodDaySummary',
        getOperationInfor: serviceBase + 'RoTF/GetOperationInfor',
        getListUnitStatus: serviceBase + + 'RoTF/GetListUnitStatus',
        getAreaOperations: serviceBase + + 'RoTF/GetAreaOperations'
    },
    status: {
        getStatusBySce: serviceBase + "status/GetStatusBySce",
        getListStatisOfRa: serviceBase + "status/getrastatus",
        getListStatusByModuleName: serviceBase + "Status/GetStatusByModule/{0}"
    },
    RA: {
        getPendingPerson: serviceBase + "SCE/{0}/RA/{1}/GetPendingPerson",
        getInitialData: serviceBase + "SCE/{0}/RA/GetInitialData",
        getApplicants: serviceBase + "RA/GetApplicants?keyword={0}",
        getRAFacilitator: serviceBase + "RA/GetFacilitators?keyword={0}",
        getRAEndorsers: serviceBase + "RA/GetRAEndorsers?keyword={0}",
        getRAApprovers: serviceBase + "RA/GetRAApprovers?keyword={0}",
        getMocApprovers: serviceBase + "RA/GetMocApprovers?keyword={0}",
        getSeveritiesByImpactGroup: serviceBase + "RA/GetSeverities/{0}",
        getLikelihoods: serviceBase + "RA/GetLikeliHoods",
        getRiskIdentification: serviceBase + "RA/GetRiskIdentification/{0}/{1}",
        getRABasic: serviceBase + "RA/GetRABasic/{0}",
        updateRA: serviceBase + "SCE/{0}/RA/{1}",
        reviewRA: serviceBase + "SCE/{0}/RA/Review/{1}",
        endorseRA: serviceBase + "SCE/{0}/RA/Endorse/{1}",
        approveRA: serviceBase + "SCE/{0}/RA/Approve/{1}",
        approveMOC: serviceBase + "SCE/{0}/RA/ApproveMOC/{1}",
        cancelRA: serviceBase + "SCE/{0}/RA/Cancel/{1}",
        updateMOC: serviceBase + "SCE/{0}/RA/UpdateMOC/{1}",
        cancelMOC: serviceBase + "SCE/{0}/RA/CancelMOC/{1}",
        consequenceType: {
            people: "people",
            environment: "environment",
            asset: "asset",
            reputation: "reputation"
        },
        getTeamMembers: serviceBase + "User/TeamMembers?keyword={0}",
        getRATeamMembers: serviceBase + "RA/GetRATeamMembers/{0}",
        createRA: serviceBase + "SCE/{0}/RA",
        getRADetail: serviceBase + "SCE/{0}/RA/{1}",
        getRALog: serviceBase + "log/getlogsbyraid",
        raListing: serviceBase + "sce/ra/list",
        getTotalMyRaListing: serviceBase + "sce/ra/gettotalmyralisting",
        transferRoles: serviceBase + "SCE/{0}/RA/TransferRoles/{1}",
        teamMemberSplitSize: 6,
        statusKey: {
            raDraft: "11",
            raUpdateRequired: "19",
            raPendingReview: "12",
            raPendingEndorsement: "13",
            raPendingApproval: "14",
            raApproved: "20",
            raPendingMoc: "15",
            raPendingMocApproval: "16",
            raMocRequiresUpdate: "17",
            raMoc:"18"
        },
        mocStatus: {
            notRequired: 0,
            pendingMOC: 1,
            pendingMOCApproval: 2,
            requiresUpdate: 3,
            moc: 4
        },
        actionResponse: {
            review: "Reviewed",
            endorse: "Endorsed",
            approve: "Approved"
        },
        statusTypeReponse: {
            review: "Review Status",
            endorse: "Endorse Status",
            approve: "Approve Status"
        },
        status: {
            updateRequired: "Update Required",
            pendingReview: "Pending Review",
            pendingEndorse: "Pending Endorsement",
            pendingApproval: "Pending Approval",
            approved: "Approved",
            pendingMOC: "Pending MOC",
            pendingMOCApproval: "Pending MOC Approval",
            MocRequriesUpdate: "MOC Requries Update",
            Moc: "MOC",
            Draft: "Draft"
        },
        riskLevel: {
            lowRisk: 1,
            mediumRisk: 2,
            highRisk: 3,
            veryHigh: 4
        },
        checkRaCopy: serviceBase + "RA/CheckRaCopy/{0}",
        getRaCopy: serviceBase + "RA/GetInfoRaCopy/{0}",
    },
    user: {
        getListUser: serviceBase + "user/list",
        deactivateUser: serviceBase + "user/{0}/deactivate",
        activeUser: serviceBase + "user/{0}/active",
        deactivateListUser: serviceBase + "user/Deactivates",
        adFindUser: serviceBase + "user/AdFindUser?keyWord={0}",
        create: serviceBase + "user/addNew",
        edit: serviceBase + "user/{0}/edit",
        detail: serviceBase + "user/{0}/getdetail",
        getRoleEdit: serviceBase + "user/{0}/getRoleEdit",
        manageRole: serviceBase + "user/{0}/manageRole",
        manageRoles: serviceBase + "user/manageRoles",
        myProfile: serviceBase + "user/myProfile",
        updateMyProfile: serviceBase + "user/myProfile",
        profile: serviceBase + "user/{0}/getProfile"
    },
    role: {
        getAllRoleIncludeNumberUser: serviceBase + "role/getAllRoleIncludeNumberUser",
        getRolesIncludeModule: serviceBase + "role/getRolesIncludeModule",
        roleKeys: {
            //ASM Module
            asmApplicant: "21",
            asmReviewer: "22",
            asmEndorser: "23",
            asmApprover: "24",
            asmShelver: "25",
            asmMocApprover: "27",
            asmAdmin: "26",
            //SCE Module
            sceApplicant: "1",
            sceReviewer: "2",
            sceEndorser: "3",
            sceApprover: "4",
            sceAcknowledger: "5",
            raReviewer: "9",
            raEndorser: "10",
            raApprover: "11",
            mocApprover: "15",
            sceUser: "7",
            raUser: "14",
            sceAdmin: "0"
        }
    },
    area: {
        getAllAreaIsActive: serviceBase + "area/GetAllAreaIsActive",
        getAreaByUserSubscription: serviceBase + "area/{0}/getAreaByUserSubscription"
    },
    risk: {
        getAllRiskLevel: serviceBase + "sce/ra/getallrisklevel"
    },
    impactGroup: {
        people: 'People',
        environment: 'Environment',
        asset: 'Asset',
        reputation: 'Reputation'
    },
    message: {
        getListMessageDashBoard: serviceBase + "message/listMessageDashBoard?moduleName={0}&areaId={1}&messageId={2}&scroll={3}",
        getListMessageAdmin: serviceBase + "message/listMessageAdmin?moduleId={0}&areaId={1}&messageId={2}&keyWord={3}&scroll={4}",
        create: serviceBase + "message/create",
        getListOfArea: serviceBase + "message/getListOfArea",
        deleteMessages: serviceBase + "Message/Delete"
    },
    notification: {
        getTopNotification: serviceBase + "notification/Top",
        getListNotification: serviceBase + "notification/List",
        getCountNotification: serviceBase + "notification/Count",
        getCountUnreadNotification: serviceBase + "notification/CountUnRead",
        markAsAllReadNotification: serviceBase + "notification/MarkAsAllRead",
        markAsReadNotification: serviceBase + "notification/MarkAsRead"
    },
    uploadGroupKey: {
        temporay: "Temporay",
        swift: "SWIFT",
        specialStandingInstruction: "SpecialStandingInstruction"
    },
    viewFile: {
        fileSce: serviceBase + "sce/{0}/viewfile/{1}?token={2}",
        checkExistFileSce: serviceBase + "sce/checkExistFileSce/{0}"
    },
    utils: {
        getIp: serviceBase + "ip/getIp"
    }
});
// Prototype

// Format string utility
String.prototype.format = function () {
    var str = this;
    for (var i = 0; i < arguments.length; i++) {
        var reg = new RegExp("\\{" + i + "\\}", "gm");
        str = str.replace(reg, arguments[i]);
    }
    return str;
};

//end prototype

// Custom validator required
(function ($, kendo) {
    $.extend(true, kendo.ui.validator, {
        rules: {
            required: function (input) {

                if (!$(input).is("[required]")) {
                    return true;
                }

                var name = $(input).attr("name");
                var value = "";

                if ($(input).is("[type=text]") || $(input).is("textarea")) {
                    value = $(input).val();
                }
                else {
                    if ($(input).is("select")) {
                        value = $(input).find(":selected").attr('value');

                        if (value === null || value === undefined || value === "") {
                            if ($(input).parent().find(".selected-value").length > 0) {
                                value = "selected";
                            }
                        }
                    }
                    else
                        if ($(input).is("[type=checkbox]")) {
                            _.each($(input).closest("form").find("[name='" + name + "']"), function (item) {
                                if ($(item).is(":checked")) {
                                    value = "checked";
                                }
                            });
                        }
                        else {
                            if ($(input).is("[type=radio]")) {
                                _.each($(input).closest("form").find("[name='" + name + "']"), function (item) {
                                    if ($(item).is(":checked")) {
                                        value = "checked";
                                    }
                                });
                            }
                            else {
                                if ($(input).attr("data-role") === "dropdownlist") {
                                    if ($(input).parent().find(".k-input").length > 0) {

                                        var lable = $(input).attr("k-option-label");
                                        var textSelect = ($(input).parent().find(".k-input").text() + "").trim();

                                        if (textSelect !== "" && lable !== "'" + textSelect + "'" && lable !== textSelect) {
                                            value = "selected";
                                        }

                                    }
                                }
                            }
                        }
                }

                if (value === null || value === undefined) {
                    value = "";
                }

                value = value.replace(/\n/g, '');
                value = value.trim();

                if (value === "") {
                    return false;
                }
                return true;
            }
        }
    });
})($, kendo);

// Window resize
$(window).resize(function () {
    fixPositionActionBar();
    fixMaxHeightDialog();
});


// Change html
(function ($, oldHtmlMethod) {

    // Override the core html method in the jQuery object.
    $.fn.html = function () {

        // Execute the original HTML method using the
        fixIeClearTextBox();
        fixClickBody();
        fixProcessFlow();
        fixPositionActionBar();
        visibleButton();
        fixMaxHeightDialog();
        showHide();

        if ($('.menu-select').length > 0 && $('.menu-select').attr("data-event-click") !== "true") {
            $('.menu-select').attr("data-event-click", "true");
            $('.menu-select').kendoMenu({ closeOnClick: true });
        }
        // Augmented arguments collection.
        return oldHtmlMethod.apply(this, arguments);
    };

})(jQuery, jQuery.fn.html);

// Fixing IE clear textbox
var fixIeClearTextBox = function () {

    if ($('.input-search-form').length > 0 && $('.input-search-form').attr("data-event") !== "fix_ie_clear_textbox") {

        $('.input-search-form').attr("data-event", "fix_ie_clear_textbox");

        $(".input-search-form").bind("mouseup", function (e) {
            if (e.which === 8) {
                return;
            }
            var _this = this;
            var oldValue = $(_this).val();

            if (oldValue === "") return;

            // When this event is fired after clicking on the clear button
            // the value is not cleared yet. We have to wait for it.
            var myVar = setInterval(function () {
                if ($(_this).val() === "") {
                    var event = $.Event("keypress");
                    event.which = 13; // Enter
                    $(_this).trigger(event);
                    clearInterval(myVar);
                }
            }, 1);
        });
    }
};

//Close Item Menu
var fixClickBody = function () {
    if ($('#MainWrapper').attr("data-event-click") !== 'clickBody') {
        $('#MainWrapper').attr("data-event-click", "clickBody");
        $('#MainWrapper').click(function (e) {
            if (!$(e.target).is('.btn-grid-item-menu,.icon-btn-grid-item-menu')) {
                $('.grid-item-menu').hide();
            }
            if (!$(e.target).is('.bulk-edit,.ul-bulk-edit')) {
                $('.ul-bulk-edit').hide();
            }

            fixPositionActionBar();
        });
    }
};

//Caches a jQuery object containing the Process Flow element
var fixProcessFlow = function () {
    if ($('#MainPanel').attr("data-event-scroll") !== 'scrollMainPanel') {
        $('#MainPanel').attr("data-event-scroll", "scrollMainPanel");
        $('#MainPanel').on("scroll", function () {

            var flow = $('.process_flow');
            var flow_moc = $('.process_flow_moc');
            var scroll = $('#MainPanel').length < 1 ? 0 : $('#MainPanel').scrollTop();

            if (scroll >= $('.process_flow').data('offset')) {
                flow.removeClass('affix_top').addClass('affix');
            } else {
                flow.removeClass('affix').addClass('affix_top');
            }

            if (scroll >= $('.process_flow_moc').data('offset')) {
                flow_moc.removeClass('affix_top').addClass('affix_moc');
            } else {
                flow_moc.removeClass('affix_moc').addClass('affix_top');
            }
        });
    }
};

// Fix position action bar
var fixPositionActionBar = function () {

    if ($('.panel_action_bar').length > 0 && $('.panel_action_bar').find(".col-left").length > 0) {
        $('.panel_action_bar').find(".col-left").css("min-height", $(window).height() - 230);
    }

};

// Visible button
var visibleButton = function () {
    if ($(".visible-button").length > 0) {
        if ($('.visible-button').length > 0 && $('.visible-button').attr("data-event") !== "click") {
            $('.visible-button').attr("data-event", "click");
            $(".panel_content").on("click", '.visible-button', function (e) {
                e.preventDefault();
                e.stopPropagation();
                var self = e.target;

                if ($(self).is("#toogleBody")) {
                    if ($(self).text() === "Expand All") {
                        $(".panel_content").find(".box-title").addClass("panel-open").next("div.box-body").slideDown(function () {
                            $(self).text("Collapse All");
                        });
                    } else {
                        $(".panel_content").find(".box-title").removeClass("panel-open").next("div.box-body").slideUp(function () {
                            $(self).text("Expand All");
                        });
                    }
                } else {
                    $(self).closest(".box-title").toggleClass('panel-open').next('.box-body').slideToggle(function () {

                        var hasOpen = 0;
                        var hasClose = 0;

                        _.each($(".panel_content").find(".box-title"), function (ele, i) {
                            if ($(ele).attr('class') !== "box-title panel-open") {
                                hasOpen++;
                            } else {
                                hasClose++;
                            }
                        });

                        var btn = $("#toogleBody");
                        if (hasOpen === 0 && btn.text() === "Expand All") {
                            btn.text("Collapse All");
                        }
                        if (hasClose === 0 && btn.text() === "Collapse All") {
                            btn.text("Expand All");
                        }

                        fixPositionActionBar();
                    });
                }
            });
        }
    }
};

var showHide = function () {
    $(".visible-button1").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        $(this).parent().closest('h5').next().toggle();
        //$(".visible-button1 i").closest('icon-array-down').next().toggleClass("icon-arr-up");
        //$(".visible-button1 i").toggleClass("icon-arr-up");
        $(this).closest('i').next().toggleClass("icon-arr-up");
        //$(".visible-button1 i").closest('a').next().toggleClass("icon-arr-up");
        // update offset top of process_flow_moc
        var offsetTop = $('.process_flow').height() + 44;
        $(".process_flow_moc").css("top", offsetTop);
    });
}

// fix max-height .k-widget.k-dialog .k-content, .k-widget.k-windows .k-content
var fixMaxHeightDialog = function () {

    if ($('.k-widget.k-dialog').length > 0 && $('.k-widget.k-dialog').find(".k-content").length > 0) {
        var maxHeight = ($(window).height() - 140).toString() + 'px';
        $('.k-widget.k-dialog').find(".k-content").css("max-height", maxHeight);
    }

    if ($('.k-widget.k-windows').length > 0 && $('.k-widget.k-windows').find(".k-content").length > 0) {
        var maxHeight = ($(window).height() - 140).toString() + 'px';
        $('.k-widget.k-windows').find(".k-content").css("max-height", maxHeight);
    }

};

// fix Dialog Center
var fixDialogCenter = function (element) {
    if (element !== null && element !== undefined) {

        var heightWindow = $(window).height();

        var windows = $(element).parent();

        var heightKWindows = $(windows).height();

        var top = (heightWindow - heightKWindows) / 2;

        if (top > 0) {
            $(windows).css("top", top);
        }
        else {
            $(windows).css("top", 0);
        }
    }
};

// Utils
var utils = {
    isNull: function (value) {
        return value === undefined || value === null;
    },
    isEmpty: function (value) {
        return value !== undefined && value !== null && (value === "" || JSON.stringify(value) === '{}' || JSON.stringify(value) === '[]');
    },
    isNullOrEmpty: function (value) {
        return value === undefined || value === null || value === "" || JSON.stringify(value) === '{}' || JSON.stringify(value) === '[]';
    },
    isNullOrWhiteSpace: function (value) {
        return value === undefined || value === null || value.toString().trim() === "";
    },
    isUndefined: function (value) {
        return value === undefined;
    },
    filterMenuInit: function (e) {
        if (e.sender.dataSource.options.schema.model.fields[e.field] !== null && e.sender.dataSource.options.schema.model.fields[e.field] !== undefined && e.sender.dataSource.options.schema.model.fields[e.field].type === "date") {
            var beginOperator = e.container.find("[data-role=dropdownlist]:eq(0)").data("kendoDropDownList");
            beginOperator.value("gte");
            beginOperator.trigger("change");
            beginOperator.readonly();

            var logicOperator = e.container.find("[data-role=dropdownlist]:eq(1)").data("kendoDropDownList");
            logicOperator.readonly();

            var endOperator = e.container.find("[data-role=dropdownlist]:eq(2)").data("kendoDropDownList");
            endOperator.value("lte");
            endOperator.trigger("change");
            endOperator.readonly();
        }
        else {
            if (e.container.find(".k-header").length > 0 && e.container.find(".k-header").find(".k-input").length > 0) {
                e.container.find(".k-header").find(".k-input").hide();
            }
        }

        //hide filter-help-text
        if (e.container.find(".k-filter-help-text").length > 0) {
            e.container.attr("title", "");
            e.container.find(".k-filter-help-text").remove();
        }
    },
    getfilter: function (filter, listFilterOut) {
        listFilterOut = listFilterOut !== undefined && listFilterOut !== null ? listFilterOut : [];
        if (filter.filters !== null && filter.filters !== undefined) {
            _.each(filter.filters, function (m) {
                var outPut = [];
                utils.getfilter(m, listFilterOut);
                if (outPut.length > 0) {
                    listFilterOut.push(outPut);
                }
            });
        }
        else {
            listFilterOut.push({ field: filter.field, value: filter.value, operator: filter.operator });
        }
    },
    timeLine: function (datetime) {
        var date = $.format.toBrowserTimeZone(datetime, "dd MMM yyyy hh:mm a");
        var timedate = new Date(datetime).getTime();
        var timeNow = new Date().getTime();
        var seconds = (timeNow - timedate) / 1000;

        var hours = Math.floor(seconds / 3600);
        var minutes = Math.floor((seconds - hours * 3600) / 60);
        seconds = seconds - hours * 3600 - minutes * 60;
        var time = "";

        if (hours !== 0 && hours <= 23) {
            time = hours + " hours ";
        }
        if (minutes !== 0 || time !== "") {
            minutes = minutes < 10 && time !== "" ? "0" + minutes : String(minutes);
            time += minutes + " mins ago";
        }
        else {
            time = "just now";
        }

        if (hours >= 24) {
            time = date;
        }

        if (hours < 0) {
            time = "just now";
        }

        return time;
    },
    urlify: function urlify(text) {
        var data = "";
        if (text !== null && text !== undefined) {
            var urlHttpsRegex = /(https?:\/\/[^\s]+)/gi;
            var urlHttpRegex = /(http?:\/\/[^\s]+)/gi;
            data = text.replace(urlHttpsRegex, function (url) {
                return '<a target="_blank" href="' + url + '">' + url + '</a>';
            });
            data = text.replace(urlHttpRegex, function (url) {
                return '<a target="_blank" href="' + url + '">' + url + '</a>';
            });
            return data;
        }
        else {
            return '';
        }
    },
    validRequiredAction: function (action) {
        var isValid = true;
        var name = "";
        var msgRequired = "";
        var actionRequired = "";
        action = (',' + action + ',').toLowerCase();

        _.each($("[action-valid-required]"), function (input, index) {

            actionRequired = (',' + $(input).attr("action-valid-required") + ",").toLowerCase();

            if (actionRequired !== ',,' && actionRequired.indexOf(action) > -1) {
                var value = "";
                name = $(input).attr("name");

                if ($(input).is("[type=text]") || $(input).is("textarea")) {
                    value = $(input).val();
                }
                else {
                    if ($(input).is("select")) {
                        value = $(input).find(":selected").attr('value');

                        if (value === null || value === undefined || value === "") {
                            if ($(input).parent().find(".selected-value").length > 0) {
                                value = "selected";
                            }
                        }
                    }
                    else
                        if ($(input).is("[type=checkbox]")) {
                            _.each($(input).closest("form").find("[name='" + name + "']"), function (item) {
                                if ($(item).is(":checked")) {
                                    value = "checked";
                                }
                            });
                        }
                        else {
                            if ($(input).is("[type=radio]")) {
                                _.each($(input).closest("form").find("[name='" + name + "']"), function (item) {
                                    if ($(item).is(":checked")) {
                                        value = "checked";
                                    }
                                });
                            }
                            else {
                                if ($(input).attr("data-role") === "dropdownlist") {
                                    if ($(input).parent().find(".k-input").length > 0) {

                                        var lable = $(input).attr("k-option-label");
                                        var textSelect = ($(input).parent().find(".k-input").text() + "").trim();

                                        if (textSelect !== "" && lable !== "'" + textSelect + "'" && lable !== textSelect) {
                                            value = "selected";
                                        }

                                    }
                                }
                            }
                        }
                }

                if (value === null || value === undefined) {
                    value = "";
                }

                value = value.replace(/\n/g, '');
                value = value.trim();
                msgRequired = $(input).attr("data-required-msg");

                if (value === "") {
                    isValid = false;
                    _.each($(input).closest("form").find("[data-for='" + name + "']"), function (message, index) {
                        $(input).addClass("k-invalid");
                        $(message).addClass("k-widget");
                        $(message).addClass("k-tooltip");
                        $(message).addClass("k-tooltip-validation");
                        $(message).html(msgRequired);
                        $(message).show();
                    });
                }
                else {
                    _.each($(input).closest("form").find("[data-for='" + name + "']"), function (message, index) {
                        if ($(message).text() === msgRequired) {
                            $(message).html("");
                            $(message).hide();
                        }
                    });
                }
            }
        });

        return isValid;
    },
    clearValidRequiredAction: function () {
        var name = "";
        var msgRequired = "";
        _.each($("[action-valid-required]"), function (input, index) {
            name = $(input).attr("name");
            msgRequired = $(input).attr("data-required-msg");

            _.each($(input).closest("form").find("[data-for='" + name + "']"), function (message, index) {
                if ($(message).text() === msgRequired) {
                    $(message).html("");
                    $(message).hide();
                }
            });
        });
    },
    clearValid: function (container) {
        var filter = "";
        if (container !== '' && container !== undefined && container !== null) {
            filter = container + " ";
        }

        if ($(filter + ".k-invalid-msg").length > 0) {
            $(filter + ".k-invalid-msg").hide();
        }

        if ($(filter + ".k-invalid").length > 0) {
            $(filter + ".k-invalid").removeClass("k-invalid");
        }
    },
    fixDialogCenter: function (element) {
        var myVar = setInterval(function () {
            fixDialogCenter(element);
            clearInterval(myVar);
        }, 1);
    },
    dialog: {
        showConfirm: function (option, funcOk, funcClose) {
            if ($("#" + option.id).length > 0) {
                $("#" + option.id).parent().remove();
                $("#" + option.id).remove();
            }

            $('body').append("<div id='" + option.id + "'></div>");

            $("#" + option.id).kendoDialog({
                title: option.title,
                closeable: true,
                modal: true,
                content: option.content,
                width: option.width,
                actions: [{
                    text: option.lableClose
                },
                {
                    text: option.lableOk,
                    action: function () {
                        return funcOk();
                    },
                    primary: true
                }
                ],
                close: function () {
                    if (typeof funcClose === 'function') {
                        funcClose();
                    }
                }
            });
        },
        showDialog: function (option, funcClose) {
            if ($("#" + option.id).length > 0) {
                $("#" + option.id).parent().remove();
                $("#" + option.id).remove();
            }

            $('body').append("<div id='" + option.id + "'></div>");

            $("#" + option.id).kendoDialog({
                title: option.title,
                closeable: true,
                modal: true,
                content: option.content,
                width: option.width,
                actions: [{
                    text: option.lableClose
                }],
                close: function () {
                    if (typeof funcClose === 'function') {
                        funcClose();
                    }
                }
            });
        }
    },
    error: {
        showErrorGet: function (err) {

            if (err !== null && err !== undefined && err.statusCode === -1) {
                if ($('#toast-container').length === 0) {
                    toastr.options = {
                        "closeButton": false,
                        "newestOnTop": false,
                        "progressBar": true,
                        "positionClass": "toast-bottom-right",
                        "preventDuplicates": true,
                        "onclick": null,
                        "showDuration": "300",
                        "hideDuration": "1000",
                        "timeOut": "5000",
                        "extendedTimeOut": "1000",
                        "showEasing": "swing",
                        "hideEasing": "linear",
                        "showMethod": "fadeIn",
                        "hideMethod": "fadeOut"
                    };
                    toastr["warning"](err.message, "Warning");
                }
            }
            else {
                console.log(err);
            }
        }
    },
    mapObject: function (fromObj, toObj) {
        for (var prop in fromObj) {
            if (typeof fromObj[prop] != "function" && toObj.hasOwnProperty(prop) && typeof toObj[prop] != "function") {
                toObj[prop] = fromObj[prop];
            }
        }
    }
};

var checkUserHasRoleKey = function (rolesString, roleKey) {
    return ("," + rolesString + ",").indexOf(","+roleKey+",") >= 0;
}
// isMobile
var isMobile = {
    Android: function () { return navigator.userAgent.match(/Android/i); },
    BlackBerry: function () { return navigator.userAgent.match(/BlackBerry/i); },
    iOS: function () { return navigator.userAgent.match(/iPhone|iPad|iPod/i); },
    Opera: function () { return navigator.userAgent.match(/Opera Mini/i); },
    Windows: function () { return navigator.userAgent.match(/IEMobile/i); },
    any: function () { return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera()); }
};
app.directive('asmApprove', function () {
    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'app/views/shared/directives/AsmApproveDirective.html',        
        link: function (scope, el, attrs) {
        }
    };
});







"use strict";


app.directive('bsDropdown', function ($compile) {
    return {
        restrict: 'E',
        scope: {
            items: '=dropdownData',
            doSelect: '&selectVal',
            selectedItem: '=preselectedItem'
        },
        link: function (scope, element, attrs) {
            var html = '';
            switch (attrs.menuType) {
                case "button":
                    html += '<div class="btn-group"><button class="btn button-label btn-info">Action</button><button class="btn btn-info dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>';
                    break;
                default:
                    html += '<div class="dropdown"><a class="dropdown-toggle" role="button" data-toggle="dropdown"  href="javascript:;">Dropdown<b class="caret"></b></a>';
                    break;
            }
            html += '<ul class="dropdown-menu"><li ng-repeat="item in items"><a tabindex="-1" data-ng-click="selectVal(item)">{{item.name}}</a></li></ul></div>';
            element.append($compile(html)(scope));
            for (var i = 0; i < scope.items.length; i++) {
                if (scope.items[i].id === scope.selectedItem) {
                    scope.bSelectedItem = scope.items[i];
                    break;
                }
            }
            scope.selectVal = function (item) {
                switch (attrs.menuType) {
                    case "button":
                        $('button.button-label', element).html(item.name);
                        break;
                    default:
                        $('a.dropdown-toggle', element).html('<b class="caret"></b> ' + item.name);
                        break;
                }
                scope.doSelect({
                    selectedVal: item.id
                });
            };
            scope.selectVal(scope.bSelectedItem);
        }
    };
});
app.animation('.slide', function() {
    var NG_HIDE_CLASS = 'ng-hide';
    return {
        beforeAddClass: function(element, className, done) {
            if(className === NG_HIDE_CLASS) {
                element.slideUp(done); 
            }
        },
        removeClass: function(element, className, done) {
            if(className === NG_HIDE_CLASS) {
                element.hide().slideDown(done);
            }
        }
    }
});
app.factory('IdleTimeout', ['$window', '$location', '$timeout', '$document', 'constants', function ($window, $location, $timeout, $document, constants) {
    return function (delay, onIdle, isWarning) {
        var idleTimeout = function (delay, onIdle, isWarning) {
            var $this = this;
            $this.idleTime = delay;
            $this.goneIdle = function () {
                // Remove all information of user logged in
                $window.localStorage.removeItem(constants.localStorage.userProfile);
                $window.localStorage.removeItem(constants.localStorage.userSecret);
                $window.localStorage.setItem(constants.localStorage.logined, false);
                $window.localStorage.setItem(constants.localStorage.accessToken, "");
                onIdle();
                $timeout.cancel($this.timeout);
                // Required user login
                if (($location.path() + '').toLowerCase() !== "/login" && ($location.path() + '').toLowerCase() !== "/download/app") {
                    $window.location.href = "/login?returnUrl=" + $location.path();
                } else {
                    $window.location.href = "/login";
                }
                return;
            };
            $this.warningIdle = function () {
                onIdle();
            };
            return {
                cancel: function () {
                    return $timeout.cancel($this.timeout);
                },
                start: function (event) {
                    if (isWarning === true) {
                        $this.timeout = $timeout(function () {
                            $this.warningIdle();
                        }, $this.idleTime);
                    } else {
                        $this.timeout = $timeout(function () {
                            $this.goneIdle();
                        }, $this.idleTime);
                    }
                }
            };
        };
        var events = ['keydown', 'keyup', 'click', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'mousedown', 'touchstart', 'touchmove', 'scroll', 'focus'];
        var $body = angular.element($document);
        var reset = function () {
            idleTimer.cancel();
            idleTimer.start();
            // Update time old
            var timeNow = new Date().getTime();
            $window.localStorage.setItem(constants.localStorage.timeOld, timeNow);
        };
        var idleTimer = idleTimeout(delay, onIdle, isWarning);
        return {
            active: true,
            cancel: function () {
                idleTimer.cancel();
                angular.forEach(events, function (event) {
                    $body.off(event, reset);
                });
            },
            start: function () {
                idleTimer.start();
                angular.forEach(events, function (event) {
                    $body.on(event, reset);
                });
            }
        };
    };
}]).directive('authenticationTimeout', ['IdleTimeout', 'appSettings', function (IdleTimeout, appSettings) {
    return {
        restrict: 'AC',
        controller: ['$scope', function ($scope) {
            $scope.timer = null;
            $scope.active = false;
            $scope.start = function (timer) {
                $scope.timer = new IdleTimeout((appSettings.timeOut * 60 - 30) * 1000, $scope.warning, true); // Warning before 30 seconds
                $scope.timer.start();
                $scope.active = true;
            };
            $scope.warning = function () {
                var now = new Date();
                $scope.timer = new IdleTimeout(30 * 1000, $scope.cancel, false); // Force logout after 30 seconds and required user login
                $scope.timer.start();
                // Show warning dialog
                option = {
                    id: "warningDialog",
                    title: "Warning",
                    lableClose: "CLOSE",
                    content: 'Your session will expire in 30 seconds starting from ' + $.format.toBrowserTimeZone(now, "hh:mm:ss a"),
                    width: 520
                };
                utils.dialog.showDialog(option, function () {});
            }
            $scope.cancel = function () {
                $scope.timer.cancel();
                $scope.active = false;
            };
        }],
        link: function ($scope, $el, $attrs) {
            $scope.start();
        }
    };
}]);

app.directive('loading', function () {
    return {
        restrict: 'E',
        replace: true,
        template: '<div id="progress_loading" data-ng-show="isLoading"><div class="loading_content"> <i class="fa fa-spinner fa-pulse"></i><br/> Processing...</div></div>'
    };
});

app.directive("myCustom", function () {
    return {
        templateUrl: function (elem, attr) { return attr.src; }
    };
});
app.directive('processFlow', function () {
    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'app/views/shared/directives/ProcessFlowDirective.html',
        scope: {
            status: '@',
            title: '@'
        },
        link: function (scope, el, attrs) {
            var tmp = {
                "Shelving Process Flow": [
                    "Application",
                    "Review",
                    "Endorsement",
                    "Approval",
                    "ApprovalClose",
                    "Shelving",
                    "Live",
                    "NoReShelvingOrReApproval",
                    "MOC",
                    "MOC Approval",
                    "finish"
                ]
            };

            scope.allStatus = tmp[scope.title];

            scope.getStatus = function (idx) {
                var currentIdx = scope.allStatus.indexOf(scope.status);
                var statusCount = scope.allStatus.length;
                if (currentIdx > idx || currentIdx === (statusCount - 1)) {
                    return "completed";
                } else if (currentIdx === idx) {
                    return "current";
                }else {
                    return "";
                }
            }
        }
    };
});






app.factory('ReloadPage', ['$window', '$state', '$location', '$timeout', '$document', 'constants', '$cookies', function ($window, $state, $location, $timeout, $document, constants, $cookies) {
    return function (delay, onReload) {
        var reloadPage = function (delay, onReload) {
            var $this = this;
            $this.reloadTime = delay;
            $this.goneReload = function () {
                console.log('gone reload!');
                onReload();
                $state.reload();
                return;
            };
            return {
                cancel: function () {
                    return $timeout.cancel($this.timeout);
                },
                start: function (event) {
                    console.log('start timeout', $this.reloadTime);
                    $this.timeout = $timeout(function () {
                        $this.goneReload();
                    }, $this.reloadTime);
                }
            };
        };
        var $body = angular.element($document);
        var reset = function () {
            reloadTimer.cancel();
            reloadTimer.start();
        };
        var reloadTimer = reloadPage(delay, onReload);
        return {
            active: true,
            cancel: function () {
                reloadTimer.cancel();
            },
            start: function () {
                reloadTimer.start();
            }
        };
    };
}]).directive('reloadPage', ['ReloadPage', 'constants', 'appSettings', '$cookies', function (ReloadPage, constants, appSettings, $cookies) {
    return {
        restrict: 'AC',
        controller: ['$scope', function ($scope) {
            var mode = ($cookies.mode === null || $cookies.mode === undefined) ? constants.autoReloadSetting.mode : $cookies.mode;
            var delay = ($cookies.delay === null || $cookies.delay === undefined) ? constants.autoReloadSetting.delay : $cookies.delay;
            $scope.delay = delay;
            $scope.isShow = mode;
            $('#reloadMode').prop('checked', (mode === true));
            $('input[name="reloadMode"]').change(function () {
                if (this.checked === true) {
                    $scope.isShow = true;
                    $cookies.mode = true;
                } else {
                    $scope.isShow = false;
                    $cookies.mode = false;
                }
            });
            // 
            $scope.timerReload = null;
            $scope.startReload = function (timer) {
                console.log('start!');
                $scope.timerReload = new ReloadPage($scope.delay * 1000, $scope.cancelReload);
                $scope.timerReload.start();
            };
            $scope.cancelReload = function () {
                console.log('cancel!');
                $scope.timerReload.cancel();
            };
            // session
            $scope.setDelay = function () {
                $scope.delay = $('#delay').val();
                $cookies.delay = $scope.delay;
            };
        }],
        link: function ($scope, $el, $attrs) {
            $scope.startReload();
        }
    };
}]);

"use strict";


app.directive('hazardousOperation', function ($compile) {
    return {
        replace: true,
        restrict: 'E',
        templateUrl: 'app/views/shared/directives/di/hazardousOperationDirective.html',      
        link: function (scope, element, attrs) {
            $(document).ready(function () {
               
            });
            scope.statuses =
            [
                {
                    id: '1',
                    name: 'Open'
                },
                {
                    id: '2',
                    name: 'Pending'
                },
                {
                    id: '3',
                    name: 'Closed'
                }
            ];
        }
    };
});
"use strict";


app.directive('hseIssue', function ($compile) {
    return {
        replace: true,
        restrict: 'E',
        templateUrl: 'app/views/shared/directives/di/hseIssueDirective.html',
        link: function (scope, element, attrs) {
            $(document).ready(function () {            
                // create DateTimePicker from input HTML element
                $("#hse .estimatePicker").last().kendoDateTimePicker({                 
                    dateInput: true
                });
               
            });
            scope.statuses =
                [
                    {
                        id: '1',
                        name: 'Open'
                    },
                    {
                        id: '2',
                        name: 'Pending'
                    },
                    {
                        id: '3',
                        name: 'Closed'
                    }
                ];
            scope.users =
            [
                {
                    id: '1',
                    name: 'DuctTT6'
                },
                {
                    id: '2',
                    name: 'TuocVN'
                },
                {
                    id: '3',
                    name: 'MinhNT24'
                }
            ];
        }
    };
});
"use strict";


app.directive('onGoingTemporary', function ($compile) {
    return {
        replace: true,
        restrict: 'E',
        templateUrl: 'app/views/shared/directives/di/onGoingTemporaryDirective.html',
        link: function (scope, element, attrs) {
            $(document).ready(function () {
               
            });
            scope.statuses =
            [
                {
                    id: '1',
                    name: 'Open'
                },
                {
                    id: '2',
                    name: 'Pending'
                },
                {
                    id: '3',
                    name: 'Closed'
                }
            ];
        }
    };
});
"use strict";


app.directive('operationRegister', function ($compile) {
    return {
        replace: true,
        restrict: 'E',
        templateUrl: 'app/views/shared/directives/di/operationRegisterDirective.html',
        link: function (scope, element, attrs) {
            $(document).ready(function () {
              
            });
            scope.statuses =
            [
                {
                    id: '1',
                    name: 'Open'
                },
                {
                    id: '2',
                    name: 'Pending'
                },
                {
                    id: '3',
                    name: 'Closed'
                }
            ];
        }
    };
});
"use strict";


app.directive('productionPlanMode', function ($compile) {
    return {
        restrict: 'E',
        templateUrl: 'app/views/shared/directives/di/productionPlanModeDirective.html',
        scope: {
            items: '=dropdownData',
            doSelect: '&selectVal',
            selectedItem: '=preselectedItem'
        },
        link: function (scope, element, attrs) {
           
        }
    };
});